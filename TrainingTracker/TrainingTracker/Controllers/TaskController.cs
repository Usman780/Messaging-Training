using Microsoft.Identity.Client;
using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using TrainingTracker.BL;
using TrainingTracker.Helper_Classes;
using TrainingTracker.HelpingClasses;
using TrainingTracker.HelpingClasses.GoogleCalendar;
using TrainingTracker.HelpingClasses.Logging;
using TrainingTracker.HelpingClasses.Outlook;
using TrainingTracker.Models;
using Microsoft.AspNet.SignalR;
using TrainingTracker.DataHub;
using static Google.Apis.Auth.OAuth2.Web.AuthorizationCodeWebApp;
using File = TrainingTracker.Models.File;
using System.Data;
using System.Transactions;
using System.Data.SqlClient;

namespace TrainingTracker.Controllers
{
    public class TaskController : Controller
    {
        CheckAuthenticationDTO logedinuser = General_Purpose.CheckAuthentication();
        General_Purpose pushnoti = new General_Purpose();
        PushDataDTO data = new PushDataDTO();

        MainMailClass errormail = new MainMailClass();

        public void clearCache()
        {
            var oldCtx = Request.GetOwinContext();
            var oldAuthManager = oldCtx.Authentication;
            oldAuthManager.SignOut("ApplicationCookie");

        }
        public bool AuthenticateUser()
        {

            if (logedinuser.Name == null)
            {
                clearCache();
                return false;
            }

            Models.User user = new UserBL().getUsersById(logedinuser.Id);

            if (user == null)
            {
                clearCache();
                return false;
            }

            if (logedinuser.Role != user.Role)
            {
                clearCache();
                return false;
            }

            return true;
        }

        [HandleError]
        public ActionResult Error()
        {
            return View();
        }

        // GET: Task
        public ActionResult Index()
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                return View();
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }


        public ActionResult PostTurnOverTask(int FromId, int ToId, string Way, int sid=-1)
        {
            try
            {
                DatabaseEntities de = new DatabaseEntities();
                List<User_Task> utlist = new User_TaskBL().getUser_TasksList(de).Where(x => x.IsActive == 1 && x.UserID != null && x.CompletionDate == null).ToList();
                utlist = utlist.Where(x => x.UserID == FromId).ToList();

                foreach (User_Task ut in utlist)
                {
                    ut.UserID = ToId;

                    bool chkUtask = new User_TaskBL().UpdateUser_Tasks(ut, de);
                }

                if (Way == "admin")
                {
                    return RedirectToAction("DisplayAdmin", "Utilities", new { message = "Tasks Turn Over Successfully" });
                }
                else if (Way == "manager")
                {
                    return RedirectToAction("DisplayManager", "Utilities", new { message = "Tasks Turn Over Successfully" });
                }
                else if (Way == "employee")
                {
                    return RedirectToAction("DisplayEmployee", "Utilities", new { message = "Tasks Turn Over Successfully" });
                }
                else if (Way == "Division")
                {
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(sid), message = "Tasks Turn Over Successfully", page1 = Way });
                }
                else if (Way == "setupDep")
                {
                    return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(sid), message = "Tasks Turn Over Successfully", way = Way });
                }
                else
                {
                    return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(sid), message = "Tasks Turn Over Successfully", way = Way });
                }
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
    
        #region Task

        public List<int> AssignTaskToDivision(string Time, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, DateTime? startDate, DateTime? endDate, int days = -1, string notes = null, int divID = -1, List<int> taskidlist = null, int DReminder = -1)
        {
            try
            {


                List<User> email = new List<User>();
                List<string> content = new List<string>();

                List<int> Idlist = new List<int>(); // List to get parent tasks IDs
                int role = logedinuser.Role;
                int id = logedinuser.Id;




                List<User> users = new UserBL().getAllActiveUsersList().Where(x => x.DivisionId == divID).ToList();
                User logedin = new UserBL().getUsersById(id);
                users.Add(logedin);

                int flag = 0;
                string tik = "";
                int Idcounter = 0;
                foreach (User trainee in users)
                {
                    email.Clear();
                    content.Clear();
                    if (flag == 0)
                    {
                        tik = DateTime.Now.Ticks.ToString();
                        flag++;
                    }
                    if (days != -1)
                    {
                        switch (days)
                        {
                            case 1:
                                days = 1;
                                break;

                            case 2:
                                days = 7;

                                break;

                            case 3:
                                days = 30;
                                break;

                            case 4:
                                days = 365;
                                break;

                            case 5:
                                days = 730;
                                break;

                            case 6:
                                days = freqDays.Value;
                                break;

                            default:
                                Console.WriteLine("Default case");
                                break;
                        }
                    }


                    User_Task tm = new User_Task();

                    if (taskidlist != null)
                    {

                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = startDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;
                        tm.CreatedID = logedinuser.Id;
                        tm.DivisionID = tik;

                        tm.Priority = priority;
                        tm.CanvasCourseId = CanvasCourseId;
                        tm.ParentID = taskidlist[Idcounter];

                    }
                    else
                    {
                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = startDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;
                        tm.CreatedID = logedinuser.Id;
                        tm.DivisionID = tik;

                        tm.Priority = priority;
                        tm.CanvasCourseId = CanvasCourseId;
                        // tm.ParentID = Idlist[Idcounter];
                    }



                    if (Request["IsPrivate"] != null)
                    {
                        tm.IsPrivate = 1;
                    }
                    else
                        tm.IsPrivate = 0;
                    if (days != -1)
                    {
                        tm.EndDate = tm.StartDate;
                        tm.RepeatTime = days;
                    }
                    else

                    {
                        if (endDate == null)
                        {
                            return Idlist = null;
                        }
                        tm.EndDate = endDate.Value;
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                        }

                        DateTime drt = new DateTime(endDate.Value.Year, endDate.Value.Month, endDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                        tm.EndDate = drt;
                    }

                    DatabaseEntities de = new DatabaseEntities();
                    User User = new UserBL().getUsersById(tm.UserID.Value, de);

                    email.Add(trainee);



                    //  tm.UserID = trainee.Id;


                    User_Task uutask = new User_Task();
                    if (DReminder != -1)
                    {
                        tm.DailyReminder = DReminder;
                    }
                    uutask = new User_TaskBL().AddUser_Tasks(tm);
                    //if (CanvasCourseId != null)
                    //{
                    //    General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                    //}
                    Idcounter++;

                    Idlist.Add(uutask.Id);

                    tm.User1 = trainee;

                    //if (CanvasCourseId != null)
                    //{
                    //    User admin = new UserBL().getUsersById(id);
                    //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    string rle = "";
                    //    if (User.Role == 3)
                    //        rle = "Employee";
                    //    else if (User.Role == 2 || User.Role == 4)
                    //        rle = "Manager";
                    //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                    //        rle = "Admin";
                    //    else
                    //        rle = "Yourself";

                    //    string maiil = "";
                    //    if (User.CanvasLoginId != null)
                    //        maiil = User.CanvasLoginId;
                    //    else
                    //    {
                    //        maiil = User.Email;
                    //        User.CanvasLoginId = User.Email;
                    //    }



                    //    new UserBL().UpdateUsers(User, de);

                    //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                    //   maiil + "\n\n Thanks\n Team Zuptu";
                    //    string title = "Canvas Course Assigning";
                    //    MainMailClass mail = new MainMailClass();
                    //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    if (cour == null)
                    //    {
                    //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                    //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                    //        if (canvasuser == null)
                    //        {
                    //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                    //        }
                    //        else
                    //        {
                    //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                    //            if (response == "OK")
                    //            {
                    //                ViewBag.msg = "Task Assigned Successfully";
                    //            }
                    //            else
                    //            {
                    //                ViewBag.msg = "Oops! Something went wrong.";
                    //            }
                    //        }
                    //    }






                    //}

                    tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);
                    if (tm.User1.Role != 1)
                    {
                        content.Add(Messages.taskAward(tm));
                        Communication.sendMessage(content, email);
                        //Mobile App Notification
                        data.TaskId = tm.Id.ToString();
                        General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, tm.UserID.ToString());

                    }

                }
                List<Department> departments = new DepartmentBL().getDepartmentsList().Where(x => x.DivisionID == divID).ToList();
                foreach (Department department in departments)
                {


                    List<User> empusers = new UserBL().getAllActiveUsersList().Where(x => x.DepartmentId == department.Id).ToList();
                    foreach (User trainee in empusers)
                    {
                        email.Clear();
                        content.Clear();

                        if (flag == 0)
                        {
                            tik = DateTime.Now.Ticks.ToString();
                            flag++;
                        }
                        if (days != -1)
                        {
                            switch (days)
                            {
                                case 1:
                                    days = 1;
                                    break;

                                case 2:
                                    days = 7;

                                    break;

                                case 3:
                                    days = 30;
                                    break;

                                case 4:
                                    days = 365;
                                    break;

                                case 5:
                                    days = 730;
                                    break;

                                case 6:
                                    days = freqDays.Value;
                                    break;

                                default:
                                    Console.WriteLine("Default case");
                                    break;
                            }
                        }


                        User_Task tm = new User_Task();
                        //{
                        //    TaskID = taskId,
                        //    UserID = trainee.Id,
                        //    Cost = cost,
                        //    CEU = ceu,
                        //    Hours = hours,
                        //    Grad = Grad,
                        //    StartDate = startDate,
                        //    Notes = notes,
                        //    IsActive = 1,
                        //    Status = 0,
                        //    CreatedID = logedinuser.Id,
                        //    Priority = priority,
                        //    CanvasCourseId = CanvasCourseId,
                        //    DivisionID=tik,

                        //};
                        if (taskidlist != null)
                        {
                            tm.TaskID = taskId;
                            tm.UserID = trainee.Id;
                            tm.Cost = cost;
                            tm.CEU = ceu;
                            tm.Hours = hours;
                            tm.Grad = Grad;
                            tm.StartDate = startDate;
                            tm.Notes = notes;
                            tm.IsActive = 1;
                            tm.Status = 0;
                            tm.CreatedID = logedinuser.Id;
                            tm.Priority = priority;
                            tm.CanvasCourseId = CanvasCourseId;
                            tm.DivisionID = tik;
                            tm.ParentID = taskidlist[Idcounter];


                        }
                        else
                        {
                            tm.TaskID = taskId;
                            tm.UserID = trainee.Id;
                            tm.Cost = cost;
                            tm.CEU = ceu;
                            tm.Hours = hours;
                            tm.Grad = Grad;
                            tm.StartDate = startDate;
                            tm.Notes = notes;
                            tm.IsActive = 1;
                            tm.Status = 0;

                            tm.CreatedID = logedinuser.Id;
                            tm.Priority = priority;
                            tm.CanvasCourseId = CanvasCourseId;
                            tm.DivisionID = tik;
                        }

                        if (id != trainee.Id)
                            tm.CreatedID = id;

                        if (Request["IsPrivate"] != null)
                        {
                            tm.IsPrivate = 1;
                        }
                        else
                            tm.IsPrivate = 0;
                        if (days != -1)
                        {
                            tm.EndDate = tm.StartDate;
                            tm.RepeatTime = days;
                        }
                        else

                        {
                            if (endDate == null)
                            {
                                return null;
                            }
                            tm.EndDate = endDate.Value;
                            DateTime dateTime = DateTime.Now;
                            DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
                            if (Time != null)
                            {
                                timeValue = Convert.ToDateTime(Time);
                            }

                            DateTime drt = new DateTime(endDate.Value.Year, endDate.Value.Month, endDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                            tm.EndDate = drt;
                        }

                        DatabaseEntities de = new DatabaseEntities();
                        User User = new UserBL().getUsersById(tm.UserID.Value, de);

                        email.Add(trainee);

                        // tm.UserID = trainee.Id;
                        User_Task uutask = new User_Task();
                        if (DReminder != -1)
                        {
                            tm.DailyReminder = DReminder;
                        }
                        uutask = new User_TaskBL().AddUser_Tasks(tm);
                        if (CanvasCourseId != null)
                        {
                            General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                        }
                        Idcounter++;

                        Idlist.Add(uutask.Id);


                        tm.User1 = trainee;
                        //Canvas Course Assinging mail
                        //if (CanvasCourseId != null)
                        //{
                        //    User admin = new UserBL().getUsersById(id);
                        //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    string rle = "";
                        //    if (User.Role == 3)
                        //        rle = "Employee";
                        //    else if (User.Role == 2 || User.Role == 4)
                        //        rle = "Manager";
                        //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                        //        rle = "Admin";
                        //    else
                        //        rle = "Yourself";

                        //    string maiil = "";
                        //    if (User.CanvasLoginId != null)
                        //        maiil = User.CanvasLoginId;
                        //    else
                        //    {
                        //        maiil = User.Email;
                        //        User.CanvasLoginId = User.Email;
                        //    }



                        //    new UserBL().UpdateUsers(User, de);

                        //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                        //   maiil + "\n\n Thanks\n Team Zuptu";
                        //    string title = "Canvas Course Assigning";
                        //    MainMailClass mail = new MainMailClass();
                        //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    if (cour == null)
                        //    {
                        //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                        //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                        //        if (canvasuser == null)
                        //        {
                        //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                        //        }
                        //        else
                        //        {
                        //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                        //            if (response == "OK")
                        //            {
                        //                ViewBag.msg = "Task Assigned Successfully";
                        //            }
                        //            else
                        //            {
                        //                ViewBag.msg = "Oops! Something went wrong.";
                        //            }
                        //        }
                        //    }






                        //}

                        tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);

                        if (tm.User1.Role != 1)
                        {
                            content.Add(Messages.taskAward(tm));
                            Communication.sendMessage(content, email);
                            data.TaskId = tm.Id.ToString();

                            General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, tm.UserID.ToString());
                        }

                    }

                }

                return Idlist;
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return null;

            }

        }
        public ActionResult AssignTaskToDivisionfromDetails(string Time, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, DateTime? startDate, DateTime? endDate, int days = -1, string notes = null, int divID = -1, string FeqEndingDate = "", int DReminder = -1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                List<int> response = AssignTaskToDivision(Time, taskId, priority, cost, freqDays, ceu, hours, Grad, CanvasCourseId, startDate, endDate, days, notes, divID, null, DReminder);
                List<int> result = response;
                if (days != -1)
                {
                    if (FeqEndingDate == "")
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has not been assigned because you have not set frequency ending date." });
                    }
                    DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                    if (FEndingDate < Convert.ToDateTime(startDate))
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has not been assigned because task's start date must be greater than frequency ending date." });

                    }
                    DateTime dt1 = startDate.Value.AddDays(days);
                    while (FEndingDate.AddDays(1) > dt1)
                    {

                        response = AssignTaskToDivision(Time, taskId, priority, cost, freqDays, ceu, hours, Grad, CanvasCourseId, dt1, endDate, days, notes, divID, result, DReminder);


                        if (days == 30)
                            dt1 = dt1.AddMonths(1);
                        else if (days == 365)
                            dt1 = dt1.AddYears(1);
                        else
                            dt1 = dt1.AddDays(days);


                    }

                }
                if (response != null)
                {
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has been assigned to whole Division." });

                }
                else
                {
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "There is no employee in this Division." });


                }
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }

        }


        public List<int> AssignTaskToDepatment(string Time, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, DateTime? startDate, DateTime? endDate, int days = -1, string notes = null, int depatmentID = -1, int divID = -1, List<int> taskidlist = null, int DReminder = -1)
        {
            try
            {

                //if (AuthenticateUser() == false)
                //{
                //    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                //}

                List<User> email = new List<User>();
                List<string> content = new List<string>();

                List<int> Idlist = new List<int>(); // List to get parent tasks IDs
                int role = logedinuser.Role;
                int id = logedinuser.Id;



                //User trainee = new UserBL().getUsersById(traineeId);


                Department department = new DepartmentBL().getDepartmentsById(depatmentID);


                List<User> empusers = new UserBL().getUsersList().Where(x => x.DepartmentId == department.Id).ToList();

                if (empusers.Count() == 0)
                {
                    return Idlist = null;
                }

                User logedin = new UserBL().getUsersById(id);
                empusers.Add(logedin);

                int flag = 0;
                string tik = "";
                int Idcounter = 0;

                foreach (User trainee in empusers)
                {
                    email.Clear();
                    content.Clear();
                    if (days != -1)
                    {
                        switch (days)
                        {
                            case 1:
                                days = 1;
                                break;

                            case 2:
                                days = 7;

                                break;

                            case 3:
                                days = 30;
                                break;

                            case 4:
                                days = 365;
                                break;

                            case 5:
                                days = 730;
                                break;

                            case 6:
                                days = freqDays.Value;
                                break;

                            default:
                                Console.WriteLine("Default case");
                                break;
                        }
                    }


                    if (flag == 0)
                    {
                        tik = DateTime.Now.Ticks.ToString();
                        flag++;
                    }
                    User_Task tm = new User_Task();

                    if (taskidlist != null)
                    {
                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = startDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;

                        tm.Priority = priority;
                        tm.CanvasCourseId = CanvasCourseId;
                        tm.DepartmentID = tik;
                        tm.ParentID = taskidlist[Idcounter];


                    }
                    else
                    {
                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = startDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;

                        tm.Priority = priority;
                       tm.CanvasCourseId = CanvasCourseId;
                        tm.DepartmentID = tik;
                    }
                    if (id != trainee.Id)
                        tm.CreatedID = id;
                    if (Request["IsPrivate"] != null)
                    {
                        tm.IsPrivate = 1;
                    }
                    else
                        tm.IsPrivate = 0;
                    if (days != -1)
                    {
                        tm.EndDate = tm.StartDate;
                        tm.RepeatTime = days;
                    }
                    else

                    {
                        if (endDate == null)
                        {
                            return null;
                        }
                        tm.EndDate = endDate.Value;
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                        }

                        DateTime drt = new DateTime(endDate.Value.Year, endDate.Value.Month, endDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                        tm.EndDate = drt;
                    }

                    DatabaseEntities de = new DatabaseEntities();
                    User User = new UserBL().getUsersById(tm.UserID.Value, de);
                    email.Add(trainee);

                    // tm.UserID = trainee.Id;


                    User_Task uutask = new User_Task();
                    if (DReminder != -1)
                    {
                        tm.DailyReminder = DReminder;
                    }
                    uutask = new User_TaskBL().AddUser_Tasks(tm);
                    if (CanvasCourseId != null)
                    {
                        General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                    }
                    Idcounter++;

                    Idlist.Add(uutask.Id);


                    tm.User1 = trainee;
                    //Canvas Course Assinging mail
                    //if (CanvasCourseId != null)
                    //{
                    //    User admin = new UserBL().getUsersById(id);
                    //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    string rle = "";
                    //    if (User.Role == 3)
                    //        rle = "Employee";
                    //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                    //        rle = "Admin";
                    //    else if (User.Role == 1 && User.IsMasterAdmin == 1)
                    //        rle = "Master Admin";
                    //    else
                    //        rle = "Yourself";

                    //    string maiil = "";
                    //    if (User.CanvasLoginId != null)
                    //        maiil = User.CanvasLoginId;
                    //    else
                    //    {
                    //        maiil = User.Email;
                    //        User.CanvasLoginId = User.Email;
                    //    }



                    //    new UserBL().UpdateUsers(User, de);

                    //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                    //   maiil + "\n\n Thanks\n Team Zuptu";
                    //    string title = "Canvas Course Assigning";
                    //    MainMailClass mail = new MainMailClass();
                    //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    if (cour == null)
                    //    {
                    //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                    //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                    //        if (canvasuser == null)
                    //        {
                    //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                    //        }
                    //        else
                    //        {
                    //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                    //            if (response == "OK")
                    //            {
                    //                ViewBag.msg = "Task Assigned Successfully";
                    //            }
                    //            else
                    //            {
                    //                ViewBag.msg = "Oops! Something went wrong.";
                    //            }
                    //        }
                    //    }






                    //}

                    tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);

                    if (tm.User1.Role != 1)
                    {
                        content.Add(Messages.taskAward(tm));
                        Communication.sendMessage(content, email);
                        data.TaskId = tm.Id.ToString();
                        General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, tm.UserID.ToString());
                    }

                }



                return Idlist;

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return null;

            }
        }

        public ActionResult AssignTaskToDepatmentfromDetails(string Time, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, DateTime? startDate, DateTime? endDate, int days = -1, string notes = null, int depatmentID = -1, int divID = -1, string FeqEndingDate = "", int DReminder = -1)
        {
            try
            {
                List<int> response = AssignTaskToDepatment(Time, taskId, priority, cost, freqDays, ceu, hours, Grad, CanvasCourseId, startDate, endDate, days, notes, depatmentID, divID, null, DReminder);
                List<int> result = response;
                if (days != -1)
                {
                    if (FeqEndingDate == "")
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has not been assigned because you have not set frequency ending date." });


                    }
                    DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                    if (FEndingDate < Convert.ToDateTime(startDate))
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has not been assigned because task's start date must be greater than frequency ending date." });

                    }
                    // DateTime startDate = tm.StartDate.Value;
                    DateTime dt1 = startDate.Value.AddDays(days);
                    while (FEndingDate.AddDays(1) > dt1)
                    {
                        response = AssignTaskToDepatment(Time, taskId, priority, cost, freqDays, ceu, hours, Grad, CanvasCourseId, dt1, endDate, days, notes, depatmentID, divID, result, DReminder);

                        //  response = AssignTaskToDivisionFromIndex(dt1.ToString(), taskId, Convert.ToInt32(priority), cost, freqDays, ceu, hours, Convert.ToInt32(Grad), CanvasCourseId, days, notes, divisionId, WorktypeId, result);

                        if (days == 30)
                            dt1 = dt1.AddMonths(1);
                        else if (days == 365)
                            dt1 = dt1.AddYears(1);
                        else
                            dt1 = dt1.AddDays(days);



                    }

                }
                if (response != null)
                {
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "Task has been assigned to whole Department." });

                }
                else
                {
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divID), message = "There is no employee in this Department." });


                }
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }

        }

        public ActionResult displayAddTask(string sid, string taskName = "", string division = "", string departmentName = "", string message = "", string way = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                List<TaskType> taskType = new List<TaskType>();
                int count = 0;
                List<Department> departments = new List<Department>();
                List<GroupTask> grouptask = new List<GroupTask>();



                int role = logedinuser.Role;
                if (role == (int)Enums.Role.Admin)
                {
                    ViewBag.division = new DivisionBL().getDivisionsList().OrderBy(s => s.Name).ToList();
                    taskType = new List<TaskType>();
                    departments = new List<Department>();
                    grouptask = new List<GroupTask>();
                    count = 0;
                }
                else if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int id = logedinuser.Id;
                    User manager = new UserBL().getUsersList().Where(mg => (mg.Role == 2 || mg.Role == 4) && mg.Id == id).FirstOrDefault();




                    grouptask = new GroupTaskBL().getGroupTasksList().OrderBy(s => s.Name).ToList();
                    taskType = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                    departments = new DepartmentBL().getDepartmentsList().Where(x => x.DivisionID == manager.DivisionId).OrderBy(s => s.Name).ToList();
                }
                else
                {
                    int id = logedinuser.Id;
                    User trainee = new UserBL().getUsersById(id);
                }

                if (division != "")
                    if (departmentName != "")
                        if (taskName != "")

                            ViewBag.name = taskName;
                ViewBag.department = departmentName;
                ViewBag.division = division;
                ViewBag.groupTask = grouptask;
                ViewBag.count = count;
                ViewBag.taskTypes = taskType;
                ViewBag.DepartmentNames = departments;
                ViewBag.message = message;
                ViewBag.Id = sid;
                ViewBag.way = way;
                // List<Course> canvascourses = General_Purpose.GetCanvasCourse();
                //   ViewBag.canvascourses = canvascourses;
                if (logedinuser.Role == 2 || logedinuser.Role == 4)
                {
                    ViewBag.role = 2;
                }
                return View("AddTask");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult GetdisplayAddTask(string Sid="", string way = "")
        {
            try
            {
                List<TaskType> taskType = new List<TaskType>();
                int count = 0;
                List<Department> departments = new List<Department>();
                List<GroupTask> grouptask = new List<GroupTask>();
                List<Task> tasks = new TaskBL().getTasksList().OrderBy(s => s.Name).ToList();


                int role = logedinuser.Role;
                if (role == (int)Enums.Role.Admin)
                {
                    ViewBag.division = new DivisionBL().getDivisionsList().OrderBy(s => s.Name).ToList();
                    taskType = new List<TaskType>();
                    departments = new List<Department>();
                    grouptask = new List<GroupTask>();
                    count = 0;
                }
                else if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int id = logedinuser.Id;
                    User manager = new UserBL().getUsersList().Where(mg => (mg.Role == 2 || mg.Role == 4) && mg.Id == id).FirstOrDefault();
                    tasks = tasks.Where(x => x.Department.DivisionID == manager.DivisionId).OrderBy(s => s.Name).ToList();
                    tasks = tasks.Where(x => x.IsPrivate == (int)Enums.TaskPrivacy.Public || (x.UserId == id && x.IsPrivate == (int)Enums.TaskPrivacy.Private)).OrderBy(s => s.Name).ToList();


                    grouptask = new GroupTaskBL().getGroupTasksList().OrderBy(s => s.Name).ToList();
                    taskType = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                    departments = new DepartmentBL().getDepartmentsList().Where(x => x.DivisionID == manager.DivisionId).OrderBy(s => s.Name).ToList();
                }
                else
                {
                    int id = logedinuser.Id;
                    tasks = tasks.Where(x => x.IsPrivate == 0).OrderBy(s => s.Name).ToList();
                    User trainee = new UserBL().getUsersById(id);
                    tasks = tasks.Where(x => x.DepartmentID == trainee.DepartmentId).OrderBy(s => s.Name).ToList();
                }




                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = tasks.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    tasks = tasks.Where(x => x.Name.ToLower().Contains(searchValue.ToLower()) || x.Department.Division.Name.ToLower().Contains(searchValue.ToLower()) || x.Hours.Equals(searchValue) || x.Cost_.Equals(searchValue) || x.CEU.Equals(searchValue)).ToList();
                }

                int totalrowsafterfilterinig = tasks.Count();
                //sorting

                // pagination
                tasks = tasks.Skip(start).Take(length).ToList();

                //List<User> mnglist = new List<User>();
                List<ManagerDTO> mnglist = new List<ManagerDTO>();
                string str = "";
                string input = "";

                if (Sid == "")
                {
                    if (way == "setupDep")
                    {
                        Sid = "3";
                    }
                    else
                    {
                        Sid = "0";
                    }
                    //Sid = "0";

                }
                else
                {
                    if (way == "setupDep")
                    {
                        Sid = "3";
                    }
                    else
                    {
                        Sid = "1";
                    }
                    //Sid = "1";

                }

                foreach (Task x in tasks)
                {
                    input = "<input type = 'checkbox' class='messageCheckbox' id='check " + x.Id + "'value='" + x.Id + "' name='" + x.Name + "' />";

                    
                    x.Name = "<a href='../Task/taskDisplay?v=" + StringCipher.Base64Encode(x.Id.ToString()) + "&way=" + Sid + "'>" + x.Name + "</a>";




                    if (x.Department.Division != null)
                    {
                        str = x.Department.Division.Name;
                    }
                    else
                        str = "";

                    if (logedinuser.Role == 2 || logedinuser.Role == 4 || logedinuser.Role==1)
                    {
                        x.IsActive = (int)11;
                    }
                    if (x.CEU == null)
                    {
                        x.CEU = 0;
                    }

                    if (x.Hours == null)
                    {
                        x.Hours = 0;
                    }

                    if (x.Cost_ == null)
                    {
                        x.Cost_ = 0;
                    }

                    ManagerDTO obj = new ManagerDTO()
                    {
                        FirstName = input,
                        Name = x.Name, // serial number 
                        DivisionName = str, // division Name
                        Cost = (double)x.Cost_, //Cost
                        Hours = (double)x.Hours, //Hours
                        CEU = (double)x.CEU, //CEU
                        IsActive = (int)x.IsActive,// IsActive is 11 is Manger is Loged IN
                        Description = x.Description,
                        Id = x.Id,
                        EncryptedId = General_Purpose.EncryptId(x.Id).ToString()

                    };
                    mnglist.Add(obj);

                    

                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);


            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }



        public JsonResult GetTaskBySearch(string taskName = "", string division = "", string departmentName = "", string Sid="", string way="")
        {

            List<TaskType> taskType = new List<TaskType>();
            int count = 0;
            List<Department> departments = new List<Department>();
            List<GroupTask> grouptask = new List<GroupTask>();
            List<Task> tasks = new TaskBL().getTasksList().OrderBy(s => s.Name).ToList();

            if (division != "")
                tasks = tasks.Where(x => x.Department != null && (x.Department.Division.Name.ToUpper().Contains(division.ToUpper()))).OrderBy(s => s.Name).ToList();
            if (departmentName != "")
                tasks = tasks.Where(x => x.Department != null && (x.Department.Name.ToUpper().Contains(departmentName.ToUpper()))).OrderBy(s => s.Name).ToList();
            if (taskName != "")
                tasks = tasks.Where(x => x.Name != null && (x.Name.ToUpper().Contains(taskName.ToUpper()))).OrderBy(s => s.Name).ToList();

            List<ManagerDTO> mnglist = new List<ManagerDTO>();
            string str = "";
            string input = "";

            foreach (Task x in tasks)
            {
                input = "<input type = 'checkbox' class='messageCheckbox' id='check " + x.Id + "'value='" + x.Id + "' name='" + x.Name + "' />";

                if(Sid == "")
                {
                    if (way == "setupDep")
                    {
                        Sid = "3";
                    }
                    else
                    {
                        Sid = "0";
                    }

                    x.Name = "<a href='../Task/taskDisplay?v=" + StringCipher.Base64Encode(x.Id.ToString()) + "&way=" + Sid + "'>" + x.Name + "</a>";

                }
                else
                {
                    if (way == "setupDep")
                    {
                        Sid = "3";
                    }
                    else
                    {
                        Sid = "1";
                    }
                    
                    x.Name = "<a href='../Task/taskDisplay?v=" + StringCipher.Base64Encode(x.Id.ToString())+ "&way="+Sid+"'>" + x.Name + "</a>";

                }



                if (x.Department != null)
                {
                    str = x.Department.Division.Name;
                }
                else
                    str = "";

                if (logedinuser.Role == 2 || logedinuser.Role == 4 || logedinuser.Role == 1)
                {
                    x.IsActive = (int)11;
                }
                if (x.CEU == null)
                {
                    x.CEU = 0;
                }

                if (x.Hours == null)
                {
                    x.Hours = 0;
                }

                if (x.Cost_ == null)
                {
                    x.Cost_ = 0;
                }

                ManagerDTO obj = new ManagerDTO()
                {
                    FirstName = input,
                    Name = x.Name, // serial number 
                    DivisionName = str, // division Name
                    Cost = (double)x.Cost_, //Cost
                    Hours = (double)x.Hours, //Hours
                    CEU = (double)x.CEU, //CEU
                    IsActive = (int)x.IsActive,// IsActive is 11 is Manger is Loged IN
                    Description = x.Description,
                    Id = x.Id,
                    EncryptedId = General_Purpose.EncryptId(x.Id).ToString()

                };
                mnglist.Add(obj);

            }

            return Json(mnglist, JsonRequestBehavior.AllowGet);


        }
        
        
        public ActionResult addTaskAdmin(string did)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }


                int deptId = General_Purpose.DecryptId((did));
                ViewBag.deptId = deptId;
                List<TaskType> taskType = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                ViewBag.taskTypes = taskType;
             //   List<Course> canvascourses = General_Purpose.GetCanvasCourse();
               // ViewBag.canvascourses = canvascourses;

                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult addTask(Task task, int isDept = -1)
        {
            try
            {


                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (isDept == -1)
                {
                    if (Request["isPrivate"] != null)
                    {
                        task.IsPrivate = 1;
                    }
                    else
                        task.IsPrivate = 0;
                }
                else
                {
                    task.IsPrivate = 0;

                }
                int id = logedinuser.Id;
                task.UserId = id;



                Department dept = new DepartmentBL().getDepartmentsById(task.DepartmentID.Value);
                int taskcount = dept.Tasks.Where(x => x.IsActive == 1 && x.Name.Equals(task.Name)).Count();

                task.IsActive = 1;


                if (taskcount > 0)
                {
                    if (isDept == -1)
                        return RedirectToAction("displayAddTask", new { message = "Task name already exists in the department. Task didn't add successfully." });
                    else
                    {
                        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(task.DepartmentID.Value), message = "Task name already exists in the department. Task didn't add successfully." });

                    }
                }
                else
                {
                    int taskId = new TaskBL().AddTasks(task);
                    int count = Request.Files.Count;
                    BlobManager BlobManagerObj = new BlobManager();

                    for (int i = 0; i < count; i++)
                    {
                        var file = Request.Files[i];
                        if (file.ContentLength > 0)
                        {



                            string path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);

                            string FileAbsoluteUri = BlobManagerObj.UploadFile(file, path);



                            new TaskFileBL().AddTaskFile(
                                new TaskFile()
                                {
                                    Name = file.FileName,
                                    Path = path,
                                    IsActive = 1,
                                    TaskId = taskId
                                });
                        }
                    }




                    if (isDept == -1)
                        return RedirectToAction("displayAddTask", new { message = "Task has been added." });
                    else
                        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(task.DepartmentID.Value), message = "Task has been added." });


                }
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult displayUpdateAction(string sid, string deptId = null, string msg = "",string v = null, string way = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                ViewBag.Id=v;
                int taskId;
                taskId = General_Purpose.DecryptId((sid));
                if (taskId == 0 && (sid != null || sid != ""))
                {
                    string uID = HttpUtility.UrlEncode(sid);

                    taskId = General_Purpose.DecryptId((uID));

                }
                
                Task task = new TaskBL().getTasksById(taskId);
                int adminid = logedinuser.Role;
                ViewBag.currentTask = task.TaskType;
                if (adminid == (int)Enums.Role.Cordinator || adminid == (int)Enums.Role.Manager || adminid == (int)Enums.Role.Admin)
                {
                    int id = logedinuser.Id;
                    User manager = new UserBL().getAllUsersList().Where(mg => (mg.Role == 2 || mg.Role == 4) && mg.Id == id).FirstOrDefault();

                    if (manager == null)
                    {
                        ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).Where(x => x.IsActive == 1).ToList();

                    }
                    else
                    {
                        ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).Where(x => x.IsActive == 1 && x.DivisionID==manager.DivisionId).ToList();

                    }

                    ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                    ViewBag.Department = task.Department;
                }
                ViewBag.obj = task;
                ViewBag.msg = msg;
                ViewBag.way = way;
                //   List<Course> canvascourses = General_Purpose.GetCanvasCourse();
                // ViewBag.canvascourses = canvascourses;
                ViewBag.taskTypes = new TaskTypeBL().getAllTaskTypesList();
                if (deptId != null)
                    ViewBag.deptId = deptId;
                else
                    ViewBag.divisionId = "null";
                return View("UpdateTask", task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult updateTask(Task task, string deptId, int isPrivate = -1, string way=""/*, int fvid*/)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                task.IsActive = 1;

                {
                    try
                    {
                        //   int count = 0;

                        if (Request.Files.Count > 0)
                        {
                            var file = Request.Files[0];

                            string path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                            task.File = path;
                            path = Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + path;

                            file.SaveAs(path);
                        }
                    }

                    catch (Exception e)
                    { }
                    Department dept = new Department();
                    int dId = -1;
                    if (deptId != "" && deptId != null)
                    {
                        dId = General_Purpose.DecryptId((deptId));
                        if (dId == 0 && (deptId != null || deptId != ""))
                        {
                            string uID = HttpUtility.UrlEncode(deptId);

                            dId = General_Purpose.DecryptId((uID));

                        }
                        dept = new DepartmentBL().getDepartmentsById(dId);
                    }
                    else
                    {
                        dept = new DepartmentBL().getDepartmentsById((int)task.DepartmentID);

                    }

                    int taskcount = dept.Tasks.Where(x => x.IsActive == 1 && x.Id != task.Id && x.Name.Equals(task.Name)).Count();
                    string message = "";
                    if (taskcount > 0)
                    {
                        message = "Another task with same name already exist. Task is not updated";
                    }
                    else
                    {
                        if (deptId != null && deptId != "")
                            task.DepartmentID = dId;
                        task.CompanyId = Convert.ToInt32(logedinuser.Company);
                        new TaskBL().UpdateTasks(task);
                        message = "Task has been updated.";
                    }


                    if (!deptId.Equals(""))
                        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = deptId, message = message, way=way });
                    else
                        return RedirectToAction("displayAddTask", new { message = message, way=way });

                }
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        [OutputCache(Duration = int.MaxValue, VaryByParam = "v", Location = System.Web.UI.OutputCacheLocation.Client, NoStore = true)]
        public ActionResult taskDisplay(string v, string msg = "", string way="")
        {
            try
            {
                ViewBag.way = way;
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                Task task = new TaskBL().getTasksById(Convert.ToInt32(StringCipher.Base64Decode(v)));
                List<Tag> tags = new TagBL().getTagsList().Where(x => x.DivisionId == task.DivisionId).OrderBy(s => s.Name).ToList();

                foreach (TaskTag item in task.TaskTags.Where(x => x.IsActive == 1).ToList())
                {
                    if (tags.Where(x => x.Id == item.TagId).Count() > 0)
                        tags.Remove(tags.Where(x => x.Id == item.TagId).FirstOrDefault());
                }


                ViewBag.tags = tags;
                ViewBag.msg = msg;

                return View(task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult deleteTask()
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                List<Task> task = new TaskBL().getTasksList();
                foreach (var item in task)
                {
                    if (Request.Form[item.Id.ToString()] != null)
                    {
                        new TaskBL().DeleteTasks(item.Id, de);
                    }
                }
                de.SaveChanges();
                return RedirectToAction("displayAddTask", new { message = "Task has been deleted." }); ;
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        //Used to delete tasks completely from Set-up=>Task (for Admin + Manager)
        public ActionResult deleteTaskNew(int TaskId=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                new TaskBL().DeleteTasks(TaskId, de);
               
                de.SaveChanges();
                return RedirectToAction("displayAddTask", new { message = "Task has been deleted." }); ;
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteTaskAdmin(int taskId, int deptId, string way = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new TaskBL().DeleteTasks(taskId);
                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Task has been deleted", way = way });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult addTraineeTask(string Time, User_Task trainee_Task, int? CanvasCourseId, int days = -1, int freqDays = 0, string FeqEndingDate = "",int DReminder=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                trainee_Task.IsPrivate = 0;
                DatabaseEntities de = new DatabaseEntities();

                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }

                }
                if (days != -1)
                {
                    trainee_Task.EndDate = trainee_Task.StartDate;
                    trainee_Task.RepeatTime = days;
                }
                else
                {
                    DateTime dateTime = DateTime.Now;
                    DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                    if (Time != null)
                    {
                        timeValue = Convert.ToDateTime(Time);
                    }

                    DateTime drt = new DateTime(trainee_Task.EndDate.Value.Year, trainee_Task.EndDate.Value.Month, trainee_Task.EndDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                    trainee_Task.EndDate = drt;
                }

                int id = logedinuser.Id;
                trainee_Task.CreatedID = id;
                trainee_Task.IsActive = 1;

                List<User> emails = new List<User>();
                List<string> content = new List<string>();
                if (trainee_Task.EndDate < trainee_Task.StartDate)
                {
                    return RedirectToAction("DisplayEmployee", "Utilities", new { message = "Enddate must be greater than Startdate." });

                }
                int flag = 0;
                List<User> trainee = new UserBL().getUsersList().Where(x => x.Role == 3).OrderBy(s => s.FirstName).ToList();
                trainee_Task.Status = 0;
                foreach (var item in trainee)
                {
                    if (Request.Form[item.Id.ToString()] != null)
                    {
                        flag++;

                        trainee_Task.UserID = item.Id;
                        User_Task tt = new User_Task()
                        {
                            IsActive = 1,
                            IsPrivate = 0,
                            UserID = trainee_Task.UserID,
                            CreatedID = trainee_Task.CreatedID,
                            EndDate = trainee_Task.EndDate,
                            RepeatTime = trainee_Task.RepeatTime,
                            TaskID = trainee_Task.TaskID,
                            StartDate = trainee_Task.StartDate,
                            CEU = trainee_Task.CEU,
                            Cost = trainee_Task.Cost,
                            Notes = trainee_Task.Notes,
                            File = trainee_Task.File,
                            Grad = trainee_Task.Grad,
                            Hours = trainee_Task.Hours,
                            Priority = trainee_Task.Priority,
                            CanvasCourseId = CanvasCourseId,
                            Status = 0
                        };

                        if (days == -1)
                        {
                            if (DReminder != -1)
                            {
                                tt.DailyReminder = DReminder;
                            }
                            tt = new User_TaskBL().AddUser_Tasks(tt);
                            if (CanvasCourseId != null)
                            {
                                General_Purpose.AssignLMSCourse(tt.Id, (int)CanvasCourseId);
                            }
                        }
                        if (days != -1)
                        {
                            if (FeqEndingDate == "")
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because you have not set frequency ending date." });
                            }
                            DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                            if (FEndingDate < Convert.ToDateTime(tt.StartDate))
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                            }
                            if (DReminder != -1)
                            {
                                tt.DailyReminder = DReminder;
                            }
                            tt = new User_TaskBL().AddUser_Tasks(tt);
                            if (CanvasCourseId != null)
                                General_Purpose.AssignLMSCourse(tt.Id, (int)CanvasCourseId);

                            DateTime startDate = tt.StartDate.Value;
                            DateTime dt = tt.StartDate.Value.AddDays(days);
                            while (FEndingDate.AddDays(1) > dt)
                            {
                                User_Task ut = new User_Task()
                                {
                                    IsActive = 1,
                                    IsPrivate = tt.IsPrivate,
                                    StartDate = dt,
                                    EndDate = dt,
                                    Cost = tt.Cost,
                                    CEU = tt.CEU,
                                    Grad = tt.Grad,
                                    UserID = tt.UserID,
                                    TaskID = tt.TaskID,
                                    CreatedID = tt.CreatedID,
                                    CompletionDate = tt.CompletionDate,
                                    File = tt.File,
                                    RepeatDeadline = tt.RepeatDeadline,
                                    Priority = tt.Priority,
                                   CanvasCourseId = tt.CanvasCourseId,
                                    Status = 0,
                                    RepeatTime = tt.RepeatTime,
                                    ParentID = tt.Id,




                                };
                                if (DReminder != -1)
                                {
                                    ut.DailyReminder = DReminder;
                                }
                                ut = new User_TaskBL().AddUser_Tasks(ut);
                                if (CanvasCourseId != null)
                                {
                                    General_Purpose.AssignLMSCourse(ut.Id, (int)CanvasCourseId);
                                }
                                if (days == 30)
                                    dt = dt.AddMonths(1);
                                else if (days == 365)
                                    dt = dt.AddYears(1);
                                else
                                    dt = dt.AddDays(days);

                              //  dt = dt.AddDays(days);


                            }

                        }

                        DatabaseEntities dd = new DatabaseEntities();
                        User User = new UserBL().getUsersById(tt.UserID.Value, de);

                        emails.Add(item);
                        trainee_Task.Task = new TaskBL().getTasksById(trainee_Task.TaskID.Value);
                        trainee_Task.User1 = item;

                        //Canvas Course Assigning mail
                        //if (CanvasCourseId != null)
                        //{
                        //    User admin = new UserBL().getUsersById(id);
                        //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    string rle = "";
                        //    if (User.Role == 3)
                        //        rle = "Employee";
                        //    else if (User.Role == 2 || User.Role == 4)
                        //        rle = "Manager";
                        //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                        //        rle = "Admin";
                        //    else
                        //        rle = "Yourself";

                        //    string maiil = "";
                        //    if (User.CanvasLoginId != null)
                        //        maiil = User.CanvasLoginId;
                        //    else
                        //    {
                        //        maiil = User.Email;
                        //        User.CanvasLoginId = User.Email;
                        //    }



                        //    new UserBL().UpdateUsers(User, de);

                        //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please send him Course assigning invitation from your Canvas Account on his Email " +
                        //   maiil + "\n\n Thanks\n Team Zuptu";
                        //    string title = "Canvas Course Assigning";
                        //    MainMailClass mail = new MainMailClass();
                        //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    if (cour == null)
                        //    {
                        //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                        //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                        //        if (canvasuser == null)
                        //        {
                        //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                        //        }
                        //        else
                        //        {
                        //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                        //            if (response == "OK")
                        //            {
                        //                ViewBag.msg = "Task Assigned Successfully";
                        //            }
                        //            else
                        //            {
                        //                ViewBag.msg = "Oops! Something went wrong.";
                        //            }
                        //        }

                        //    }






                        //}

                        content.Add(Messages.taskAward(trainee_Task));
                        data.TaskId = trainee_Task.Id.ToString();
                        General_Purpose.SendPushNotification(item.Player_Id, Messages.taskAward(trainee_Task, 1), "Message from Zuptu", data, item.Id.ToString());
                    }
                }
                if (flag == 0)
                {
                    return RedirectToAction("DisplayEmployee", "Utilities", new { message = "No Employee selected. Task has not been assigned to any Employee." });
                }

                de.SaveChanges();
                Communication.sendMessage(content, emails);
                return RedirectToAction("DisplayEmployee", "Utilities", new { message = "Task has been assigned to employee" });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult deleteTaskFunction(int sid, string DivDepID = "", int isCompleted = -1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new User_TaskBL().DeleteUser_Tasks(sid);
                if(isCompleted != -1)
                {
                    return RedirectToAction("CompletedAssignments", new { DivDepID = DivDepID });
                }
                else
                {
                    return RedirectToAction("assignments", new { DivDepID = DivDepID });
                }

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }

        }

        #region Template View 
        public ActionResult TemplatesView(string v, string edit = "", string isModal = "", string displayMessage = null, string message = "", string way = "", string department = "", string sid = "", string DivDepID = "", string template = "", string DxM = "")
        {
            try
            {
                ViewBag.DxM = DxM;

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                /////////////////////////////////
                Log.Info("Templates View Page");

                ////////////////////////////
                int role = logedinuser.Role;
                int id = logedinuser.Id;
                int taskId;
                string strr = "";

                string encrptId = General_Purpose.EncryptId(id);

                if (isModal == "1")
                {
                    taskId = Convert.ToInt32(v);
                }
                else
                {
                    taskId = General_Purpose.DecryptId((v));
                }

                if (taskId == 0)
                {
                    strr = HttpUtility.UrlEncode(v);
                    taskId = General_Purpose.DecryptId((strr));
                }
                User_Task task = new User_TaskBL().getUser_TasksById(taskId);

                DateTime dd = Convert.ToDateTime(task.EndDate).Date;

                DateTime d7 = DateTime.Now.Date.AddDays(7);
                DateTime d30 = DateTime.Now.Date.AddDays(30);
                ViewBag.DailyRem = -1;
                ViewBag.WeeklyRem = -1;
                ViewBag.MonthlyRem = -1;

                if (dd > DateTime.Now.Date)
                {
                    ViewBag.DailyRem = 1;

                    if (dd > d7)
                    {
                        ViewBag.WeeklyRem = 1;

                        if (dd > d30)
                        {
                            ViewBag.MonthlyRem = 1;
                        }
                    }
                }
                if (task.DailyReminder != null)
                {
                    ViewBag.DailyReminder = task.DailyReminder;
                }
                if (task.BeforeDDateReminder != null)
                {
                    TimeSpan days = Convert.ToDateTime(task.BeforeDDateReminder) - dd;
                    ViewBag.BeforeDDateReminder = Math.Abs(days.Days);
                }

                ViewBag.currentStatus = task.Status.HasValue ? task.Status.Value : 0;
                ViewBag.status = new List<int>() { 1, 2, 3, 4 }/*.Where(x => x > task.Status)*/;


                List<TaskCommentDTO> files = new List<TaskCommentDTO>();



                BlobManager blob = new BlobManager();

                int loginrole = -1;

                User u = new UserBL().getUsersById(id);
                if (u.IsMasterAdmin == 1)
                {
                    loginrole = 0;
                }
                else if (u.Role == 1)
                {
                    loginrole = 1;
                }
                else if (u.Role == 2 || u.Role == 2)
                {
                    loginrole = 2;
                }
                else if (u.Role == 3)
                {
                    loginrole = 3;
                }


                foreach (var item in task.TaskComments.Where(x => x.IsActive == 1))
                {
                    Log.Info("Comment's ParentID : " + item.ParentId);
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (item.ParentId == null)
                    {
                        List<TaskComment> replycomments = new List<TaskComment>();
                        if (template != "")
                        {
                            replycomments = new TaskCommentBL().getTaskCommentsList(1).Where(x => x.ParentId == item.Id && x.IsActive == 1).ToList();

                        }
                        else
                        {
                            replycomments = new TaskCommentBL().getTaskCommentsList().Where(c => c.ParentId == item.Id && c.IsActive == 1).ToList();

                        }

                        if (replycomments.Count() > 0)
                        {


                            TaskCommentDTO tcd = new TaskCommentDTO();



                            foreach (var repitem in replycomments)
                            {
                                TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                tcd2.Image = repitem.User.Image;
                                tcd2.Comment = repitem.Comment;
                                tcd2.userId = repitem.UserId.Value;
                                tcd2.IsDocMFile = repitem.IsDocMFile;
                                User uss = new UserBL().getUsersById(tcd2.userId);

                                if (loginrole == 0)
                                {
                                    if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                }




                                tcd2.Id = repitem.Id;
                                tcd2.isManager = 0;
                                tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                if (repitem.File != null)
                                {
                                    tcd2.File = repitem.FileName;
                                    tcd2.FilePath = repitem.File;
                                }
                                else
                                    tcd2.File = null;
                                tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;
                                if (repitem.File != null)
                                {
                                    try
                                    {
                                        CloudBlockBlob blobObj = blob.getCloudBlockBlob(repitem.File);
                                        blobObj.FetchAttributes();
                                        tcd2.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                    }
                                    catch (Exception e)
                                    {
                                        tcd2.FileSize = "";
                                        tcd2.File = null;
                                        tcd2.FilePath = null;
                                    }
                                }
                                else
                                    tcd2.FileSize = "";
                                files2.Add(tcd2);
                                tcd2.prime = -1;
                            }

                            tcd.obj = files2;
                            tcd.Comment = item.Comment;
                            tcd.userId = item.UserId.Value;
                            tcd.Image = item.User.Image;
                            tcd.IsDocMFile = item.IsDocMFile;

                            User us = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }




                            tcd.Id = item.Id;
                            tcd.isManager = 0;
                            tcd.CommentTime = Convert.ToDateTime(item.Date);
                            if (item.File != null)
                            {
                                tcd.File = item.FileName;
                                tcd.FilePath = item.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = item.User.FirstName + " " + item.User.LastName;
                            if (item.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }
                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;

                        }
                        else
                        {



                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Image = item.User.Image;
                            tcd.Comment = item.Comment;
                            tcd.userId = item.UserId.Value;
                            tcd.IsDocMFile = item.IsDocMFile;
                            User us = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }




                            tcd.Id = item.Id;
                            tcd.isManager = 0;
                            tcd.CommentTime = Convert.ToDateTime(item.Date);
                            if (item.File != null)
                            {
                                tcd.File = item.FileName;
                                tcd.FilePath = item.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = item.User.FirstName + " " + item.User.LastName;
                            if (item.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }
                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                    }
                }

                List<TaskCommentDTO> Ticketfiles = new List<TaskCommentDTO>();

                foreach (Task_Ticket item in task.Task_Ticket.Where(x => x.IsActive == 1).ToList())
                {
                    if (item.Ticket_File != null)
                    {
                        User user = new UserBL().getUsersById((int)item.CreatedBy);
                        TaskCommentDTO obj = new TaskCommentDTO();
                        obj.Name = user.FirstName+" "+user.LastName;
                        obj.CommentTime = Convert.ToDateTime(item.CreationDatetime);
                        obj.File = item.Ticket_FileName;
                        obj.FilePath = item.Ticket_File;

                        try
                        {
                            CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.Ticket_File);
                            blobObj.FetchAttributes();
                            obj.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                        }
                        catch (Exception e)
                        {
                            obj.FileSize = "";
                            obj.File = null;
                            obj.FilePath = null;
                        }

                        Ticketfiles.Add(obj);
                    }
                }
                ViewBag.Ticketfiles = Ticketfiles.OrderByDescending(x => x.CommentTime);
                //string f = "gdfgfdgfdgfdgdfgdf";

                files = files.OrderBy(x => x.Id).ToList();
                List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId);
                ViewBag.completedTickets = t.Where(x => x.CompletionDatetime != null).ToList();
                ViewBag.uncompletedTickets = t.Where(x => x.CompletionDatetime == null).ToList();
                ViewBag.ActiveToDo = t.Where(x => x.CompletionDatetime == null).ToList().Count();
                ViewBag.comments = files;
                ViewBag.comments1 = files.OrderByDescending(x => x.Id);
                ViewBag.request = displayMessage;
                ViewBag.message = message;
                ViewBag.EditTicket = edit;
                ViewBag.way = way;
                ViewBag.siid = encrptId;
                ViewBag.sid = sid;
                ViewBag.department = department;
                ViewBag.v = v;
                ViewBag.usertaskid = task.Id;
                ViewBag.isModal = isModal;
                ViewBag.DivDepID = DivDepID;
                ViewBag.template = template;
                Department departmentid = new Department();
                if (task.User1 != null)
                {

                    if (task.User1.DepartmentId == null)
                    {
                        ViewBag.divid = task.User1.DivisionId; ;
                        ViewBag.managers = new UserBL().getUsersList().Where(x => x.DivisionId == task.User1.DivisionId || x.Role == 1 && x.IsActive == 1 && x.Id != task.UserID).ToList();

                    }
                    else
                    {
                        departmentid = new DepartmentBL().getDepartmentsById((int)task.User1.DepartmentId);
                        ViewBag.divid = departmentid.DivisionID;
                        ViewBag.managers = new UserBL().getUsersList().Where(x => x.DivisionId == departmentid.DivisionID || x.Role == 1 && x.IsActive == 1 && x.Id != task.UserID).ToList();

                    }
                }



                return View(task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplateupdateStatus(int status, string traineTaskId, string way = "", string isModal = "", string department = "", string sid = "", int cStatus = -1, string v = "", string DivDepID = "", string isTemplate = "")
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int taskId = General_Purpose.DecryptId((traineTaskId));
                DatabaseEntities de = new DatabaseEntities();
                List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId, de).Where(x => x.CompletionDatetime == null).ToList();



                List<User> email = new List<User>();
                List<string> content = new List<string>();
                User_Task User_Task = new User_TaskBL().getUser_TasksByIdWrapper(taskId, de);
                if (User_Task.Status != status)
                {
                    //User u = new UserBL().getUsersById((int)User_Task.UserID);

                    // email.Add(u);
                    //content.Add(Messages.taskStatusUpdate(User_Task));
                    User_Task.Status = status;
                    //Communication.sendMessage(content, email);
                    //data.TaskId = User_Task.Id.ToString();
                    //  General_Purpose.SendPushNotification(u.Player_Id, Messages.taskStatusUpdate(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());

                    if (cStatus == 4)
                    {
                        User_Task.CompletionDate = null;

                    }
                    if (status == 4)
                    {
                        foreach (Task_Ticket x in t)
                        {
                            x.CompletedByUser = logedinuser.Id;
                            x.CompletionDatetime = DateTime.Now;
                            new Task_TicketBL().UpdateTask_Tickets(x, de);

                        }


                        User_Task.CompletionDate = DateTime.Now;
                        //  Communication.sendMessage(new List<string>() { (Messages.taskCompleted(User_Task)) }, email);
                        data.TaskId = User_Task.Id.ToString();
                        //  General_Purpose.SendPushNotification(u.Player_Id, Messages.taskCompleted(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());

                    }
                    new User_TaskBL().UpdateUser_Tasks(User_Task, de);
                    de.SaveChanges();
                }
                return RedirectToAction("TemplatesView", "Task", new { v = traineTaskId, message = "Status has been updated." });

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplateaddEmployeeTasktoDO(Task_Ticket gtt, string Starttime = "", string Endtime = "", string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                User_Task usertask = new User_TaskBL().getUser_TasksById(Convert.ToInt32(gtt.UserTask_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;


                gtt.CreationDatetime = DateTime.Now;
                gtt.IsActive = 1;
                gtt.CreatedBy = logedinuser.Id;
                if (gtt.Name == null)
                {
                    return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Todo name not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }



                if (gtt.StartDate != null && gtt.EndDate != null)
                {



                    DateTime sd = Convert.ToDateTime(gtt.StartDate);
                    DateTime ed = Convert.ToDateTime(gtt.EndDate);

                    string StartDate = "";
                    string EndDate = "";
                    if (Starttime != "")
                        StartDate = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDate = sd.Date.ToString();

                    if (Endtime != "")
                        EndDate = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDate = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDate = StartDate + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDate = EndDate + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDate);
                    gtt.EndDate = Convert.ToDateTime(EndDate);


                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be equal or greater than Task's start date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "End date must be equal or less than Task's end date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {

                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Time period must be valid", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                        }



                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be lees than end date.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }


                }
                else
                {
                    return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date and end date not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;

                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }
                int c = usertask.Task_Ticket.Max(x => x.Position).GetValueOrDefault();
                gtt.Position = c + 1;

                //Additional attributes
                User_Task ut4 = new User_TaskBL().getUser_TasksById((int)gtt.UserTask_Id);
                gtt.CompanyId = Convert.ToInt32(logedinuser.Company);
                gtt.TaskStartDate = ut4.StartDate;
                gtt.TaskEndDate = ut4.EndDate;
                gtt.DepartmentId = (int)ut4.Task.DepartmentID;
                gtt.DivisionId = (int)ut4.Task.Department.DivisionID;

                new Task_TicketBL().AddTask_Tickets(gtt);
                return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Todo has been added successfully.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplateeditEmployeeTaskTicket(int ticketId, string edit, string name = "", string StartDate = "", string Starttime = "", string EndDate = "", string Endtime = "", string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);

                User_Task usertask = new User_TaskBL().getUser_TasksById(Convert.ToInt32(gtt.UserTask_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;

                int id = logedinuser.Id;
                int role = logedinuser.Role;

                gtt.Name = name + " qqqqaaaa ";

                if (name == "")
                {
                    return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Todo name not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }

                if (StartDate != "" && EndDate != "")
                {
                    DateTime sd = Convert.ToDateTime(StartDate);
                    DateTime ed = Convert.ToDateTime(EndDate);




                    string StartDat = "";
                    string EndDat = "";
                    if (Starttime != "")
                        StartDat = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDat = sd.Date.ToString();

                    if (Endtime != "")
                        EndDat = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDat = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDat = StartDat + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDat = EndDat + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDat);
                    gtt.EndDate = Convert.ToDateTime(EndDat);

                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be equal or greater than Task's start date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "End date must be equal or less than Task's end date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {
                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Time period must be valid", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                        }




                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be lees than end date.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }



                }
                else
                {
                    return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Start date and end date not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;
                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        //Deleting previous file from document manager - Wajeeh
                        Models.File file1 = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                        if (file1 != null)
                        {
                            file1.IsActive = 0;
                            if (new FileBL().UpdateFile(file1) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file1.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file1.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file1.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            gtt.IsDocMFile = null;
                        }
                        //ends

                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }



                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;

                return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), edit, msg = "Your todo has been updated.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplatedeleteEmployeeTaskTicket(int ticketId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;

                //Deleting previous file from document manager - Wajeeh
                Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                if (file != null)
                {
                    file.IsActive = 0;
                    if (new FileBL().UpdateFile(file) != null)
                    {
                        List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                            .Where(x => x.FileId == file.Id).ToList();

                        if (versions.Count() > 0)
                        {
                            foreach (FileVersion o in versions)
                            {
                                o.IsActive = 0;
                                if (new FileVersionBL().UpdateFileVersion(o) == null)
                                {
                                    throw new Exception();
                                }

                            }
                        }
                        DateTime date = DateTime.Now;

                        //File Log entry
                        FileLog filesLog = new FileLog()
                        {
                            UserId = logedinuser.Id,
                            FileId = file.Id,
                            LogTime = date,
                            NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                            Role = logedinuser.Role,
                            IsActive = 1,
                            CreatedAt = date,
                            Type = "File Deleted"
                        };

                        if (new FileLogBL().AddFileLog(filesLog) == null)
                        {
                            throw new Exception();
                        }
                    }
                    else
                    {
                        throw new Exception();
                    }

                    gtt.IsDocMFile = null;
                }
                //ends

                gtt.IsActive = 0;

                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Your To Do has been deleted.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult TemplatecompleteEmployeeTaskTicket(int ticketId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                //if(role==(int)Enums.Role.Cordinator || role==(int)Enums.Role.Manager)
                //{
                gtt.CompletedByUser = id;
                //}
                //else if(role==(int)Enums.Role.Trainee)
                //{
                //    gtt.CompletedByTrainee = id;
                //}
                gtt.CompletionDatetime = DateTime.Now;
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("TemplatesView", new { v = General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "To DO has been completed.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost/*, ValidateInput(false)*/]
        public ActionResult TemplateaddComment(string comment, string taskId, int repcomntid = -1, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int tId = General_Purpose.DecryptId((taskId));
                TaskComment tc = new TaskComment();
                if (repcomntid != -1)
                {
                    tc = new TaskComment() { TaskId = tId, Comment = comment, Date = DateTime.Now.ToString(), UserId = logedinuser.Id, ParentId = (int)repcomntid, IsActive = 1 };
                }
                else
                {
                    tc = new TaskComment() { TaskId = tId, Comment = comment, Date = DateTime.Now.ToString(), UserId = logedinuser.Id, IsActive = 1 };
                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;

                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        tc.FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        tc.File = fileName;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            tc.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }

                User_Task tt = new User_TaskBL().getUser_TasksById(tc.TaskId.Value);

               // Communication.sendMessage(new List<string>() { Messages.taskComment(tt) }, new List<User>() { tt.User1 });
                //data.TaskId = tt.Id.ToString();
                //General_Purpose.SendPushNotification(tt.User1.Player_Id, Messages.taskComment(tt, 1), "Message from Zuptu", data, tt.User1.Id.ToString());

                User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                tc.TaskStartDate = ut5.StartDate;
                tc.TaskEndDate = ut5.EndDate;
                tc.DepartmentId = (int)ut5.Task.DepartmentID;
                tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                tc.CreatedBy = logedinuser.Id;
                new TaskCommentBL().AddTaskComments(tc);
                return RedirectToAction("TemplatesView", "Task", new { v = General_Purpose.EncryptId(tId), isModal = isModal, way = way, message = "Comment has been added", department = department, sid = sid, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplateupdateComment(string comment, int commentId, int taskId, int removeFile, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();

                TaskComment tc = new TaskComment() { TaskId = taskId, Comment = comment, UserId = logedinuser.Id };

                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;
                }
                else
                {
                    int count = Request.Files.Count;
                    string path = null;
                    tc.File = null;
                    if (Request.Files.Count > 0)
                    {
                        var file = Request.Files[0];
                        if (file.ContentLength > 0)
                        {
                            BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                            tc.FileName = file.FileName;
                            string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                            string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                            tc.File = fileName;
                        }
                    }
                }


                TaskCommentBL gtmbl = new TaskCommentBL();
                TaskComment gtm = gtmbl.getTaskCommentsById(commentId, de);
                gtm.Comment = comment;
                if (tc.File != null)
                {
                    //Deleting previous file from document manager - Wajeeh
                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtm.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtm.IsDocMFile = null;
                    }
                    //ends

                    gtm.File = tc.File;
                    gtm.FileName = tc.FileName;

                    //Wajeeh's Code for saving this file in document manager
                    if (customLocPath != "")
                    {
                        gtm.IsDocMFile = 1;

                        Models.File addfile = new Models.File()
                        {
                            Name = tc.FileName,
                            FilePath = tc.File,
                            IsActive = 1,
                            CreatedAt = DateTime.Now,
                            UploadingDate = DateTime.Now,
                            UploadedBy = logedinuser.Id,
                            LastModified = DateTime.Now
                        };
                        if (FolderId != -1)
                        {
                            Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                            addfile.Privacy = folder.FolderPath.ToString();
                            addfile.FolderId = folder.Id;
                        }
                        else
                        {
                            addfile.Privacy = FolderId.ToString();
                        }

                        Models.File mainFileAdd = new Models.File();

                        mainFileAdd = new FileBL().AddFile(addfile);

                        if (mainFileAdd == null)
                        {
                            throw new Exception();
                        }
                        else
                        {
                            FileVersion version = new FileVersion()
                            {
                                Name = mainFileAdd.Name,
                                FilePath = mainFileAdd.FilePath,
                                IsActive = mainFileAdd.IsActive,
                                CreatedAt = mainFileAdd.CreatedAt,
                                UploadingDate = mainFileAdd.UploadingDate,
                                UploadedBy = mainFileAdd.UploadedBy,
                                LastModified = mainFileAdd.LastModified,
                                FileId = mainFileAdd.Id,
                                FolderId = mainFileAdd.FolderId,
                                Privacy = mainFileAdd.Privacy,
                                ArchiveDate = mainFileAdd.ArchiveDate,
                                CheckIn = mainFileAdd.CheckIn,
                                CheckOut = mainFileAdd.CheckOut,
                                CheckOutBy = mainFileAdd.CheckOutBy,
                                CurrentVersion = 1,
                                VersionNo = 1,
                                CheckInTime = mainFileAdd.CheckInTime,
                                CheckOutTime = mainFileAdd.CheckOutTime
                            };

                            if (version.Privacy == null)
                            {
                                version.Privacy = "0";
                            }

                            if (new FileVersionBL().AddFileVersion(version) == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = mainFileAdd.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "New File Uploaded"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                        }
                    }
                }
                else if (removeFile == 1)
                {
                    //Wajeeh's Code for deleting file in document manager

                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtm.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtm.IsDocMFile = null;
                    }

                    //ends

                    gtm.File = null;
                    gtm.FileName = null;
                }
                gtmbl.UpdateTaskComments(gtm, de);



                return RedirectToAction("TemplatesView", "Task", new { v = General_Purpose.EncryptId((taskId)), message = "Comment has been Updated.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TemplatedeleteComment(int commentId, int taskId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                //deleteing comment file from document manager - Wajeeh

                List<TaskComment> comments = new List<TaskComment>();

                TaskComment tm = new TaskCommentBL().getTaskCommentsById(commentId);

                if (tm.File != null)
                {
                    comments.Add(tm);
                }

                List<TaskComment> cms = new TaskCommentBL()
                    .getAllTaskCommentsList()
                    .Where(x => x.ParentId == tm.Id)
                    .ToList();

                if (cms.Count() > 0)
                {
                    foreach (TaskComment taskComment in cms)
                    {
                        if (taskComment.File != null)
                        {
                            comments.Add(taskComment);
                        }
                    }
                }

                if (comments.Count() > 0)
                {
                    foreach (TaskComment t in comments)
                    {
                        Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == t.File).FirstOrDefault();
                        if (file != null)
                        {
                            file.IsActive = 0;
                            if (new FileBL().UpdateFile(file) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            t.IsDocMFile = null;
                        }
                    }
                }

                //ends

                new TaskCommentBL().DeleteTaskComments(commentId);

                return RedirectToAction("TemplatesView", "Task", new { v = General_Purpose.EncryptId((taskId)), isModal = isModal, way = way, message = "Comment has been deleted.", sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        #endregion
        public ActionResult Templates(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                User us = new UserBL().getUsersById(logedinuser.Id);
                if (logedinuser.Role == 1)
                    ViewBag.DivList = new DivisionBL().getDivisionsList().Where(x => x.IsActive == 1).ToList();
                else
                    ViewBag.DivList = new DivisionBL().getDivisionsList().Where(x => x.IsActive == 1 && x.Id == us.DivisionId).ToList();

                ViewBag.message = message;
                return View();
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }

        public ActionResult GetTemplates()
        {
            try
            {
                
                List<User_Task> tasks = new List<User_Task>();

                if(logedinuser.Role == 3)
                {
                    tasks = new User_TaskBL().getUser_TasksList(null, 1).Where(x => x.UserID == null && x.TemplateName != null && x.TemplateCreatedBy == logedinuser.Id).ToList();
                }
                else
                {
                    tasks = new User_TaskBL().getUser_TasksList(null, 1).Where(x => x.UserID == null && x.TemplateName != null).ToList();
                }
                string complettionName = string.Empty;

                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = tasks.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    tasks = tasks.Where(x => x.Task.Name.ToLower().Contains(searchValue.ToLower()) || x.TemplateName.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = tasks.Count();
                //sorting

                // pagination
                tasks = tasks.Skip(start).Take(length).ToList();

                List<EmployeeDTO> mnglist = new List<EmployeeDTO>();

                string priority = "";
                string status = "";
                string AssignedBy = "";
                foreach (User_Task x in tasks)
                {
                    if (x.Status != null)
                    {
                        status = General_Purpose.getStatusValue(x.Status.Value);
                    }
                    else
                    {
                        status = "";
                    }

                    if (x.Priority != null)
                    {
                        if (General_Purpose.getPriorityValue(x.Priority.Value) == "Medium")
                        {
                            priority = "<td><span class='label label-warning'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }
                        else if (General_Purpose.getPriorityValue(x.Priority.Value) == "Low")
                        {
                            priority = "<td><span class='label label-success'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }
                        else
                        {
                            priority = "<td><span class='label label-danger'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }

                    }
                    else
                        priority = "";


                    string TemplateDuration = "";
                    DateTime dt1 = Convert.ToDateTime(x.StartDate).Date;
                    DateTime dt2 = Convert.ToDateTime(x.EndDate).Date;
                    int days = (dt2 - dt1).Days;
                    //   Console.WriteLine(days);

                    double month = (dt2 - dt1).Days / 30;
                    //Console.WriteLine(month);
                    double year = (dt2 - dt1).Days / 365;
                    // Console.WriteLine(year);
                    //Console.Read();
                    month = month - (year * 12);
                    days = Convert.ToInt32(days - (month * 30) - (year * 365));
                    string daystring = "";
                    if(days == 1)
                    {
                        daystring = " Day";
                    }
                    else
                    {
                        daystring = " Days";
                    }
                    if (year > 0)
                    {
                        if (month > 0)
                        {
                            if (days > 0)
                            {
                                TemplateDuration = year + " Year, " + month + " Months, " + days + daystring;

                            }
                            else
                            {
                                TemplateDuration = year + " Year, " + month + " Months";

                            }
                        }
                        else
                        {
                            if (days > 0)
                                TemplateDuration = year + " Year, " + days + daystring;
                            else
                                TemplateDuration = year + " Year ";


                        }


                    }
                    else
                    {
                        if (month > 0)
                        {
                            if (days > 0)
                            {
                                TemplateDuration = month + " Months, " + days + daystring;

                            }
                            else
                            {
                                TemplateDuration = month + " Months";

                            }
                        }
                        else
                        {
                            if (days > 0)
                            {
                                TemplateDuration = days + daystring;

                            }
                            else
                            {
                                TemplateDuration = "1 Day";


                            }
                        }
                    }


                    EmployeeDTO obj = new EmployeeDTO()
                    {

                        Name = x.TemplateName,
                        Task = x.Task.Name,
                        StartDate = TemplateDuration.ToString(),//Template Duration
                        //EndtDate = x.EndDate.Value.ToString("MM/dd/yyyy"),
                        WorkStatus = status,
                        LogedInId = logedinuser.Id,
                        Priority = priority,
                        Id = x.Id,
                        EncryptedId =General_Purpose.EncryptId(x.Id),
                        Role = logedinuser.Role,

                    };
                    mnglist.Add(obj);



                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);



            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult GetTemplateUpdate(int _id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                
                User_Task tasks = new User_TaskBL().getUser_TasksById(_id);
                User_Task ut = new User_Task() {Id = tasks.Id, TemplateName = tasks.TemplateName};

                return Json(ut);
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }

        public ActionResult PostUpdateTemplate(int Id = -1, string Name="")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                if(Id == -1 && Name == "")
                {
                    return RedirectToAction("Templates", "Task", new { message = "Invalide Input Fields" });
                }

                DatabaseEntities de = new DatabaseEntities();
                User_Task ut = new User_TaskBL().getUser_TasksByIdWrapper(Id, de);
                ut.TemplateName = Name;
                bool check = new User_TaskBL().UpdateUser_Tasks(ut, de);
                de.SaveChanges();

                if(check == true)
                {
                    return RedirectToAction("Templates", "Task", new { message = "Template Updated Successfully" });
                }
                else
                {
                    return RedirectToAction("Templates", "Task", new { message = "Updating Error" });
                }
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }


        public ActionResult deleteTemplateTask(int sid)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new User_TaskBL().DeleteUser_Tasks(sid);
                return RedirectToAction("Templates");

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }

        }

        public ActionResult assignments(string message = "", string DivDepID = "", string isModal = "0")
        {
            try
            {
              //  new ErrorController().UpdateUser_Task();

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                if (logedinuser.Role == 3)
                {
                    return Content("Acess Restricted !");
                }



                string complettionName = string.Empty;


                ViewBag.tags = new TagBL().getTagsList();


                ViewBag.departments = new DepartmentBL().getDepartmentsList();

                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                ViewBag.completionIdName = complettionName;


                ViewBag.message = message;
                ViewBag.DivDepID = DivDepID;

                List<User> userslist = new UserBL().getUsersList().Where(x => x.IsActive == 1 && x.Role == 3).ToList();
                ViewBag.FirstLastName = userslist;

                List<Task> taskslist = new TaskBL().getTasksList().Where(x => x.IsActive == 1).ToList();
                ViewBag.TaskName = taskslist;

                //////////////////////////////// Reminder for Dep/ Division
                /// 
                User_Task tt = new User_Task();
                if (DivDepID != "")
                {
                    tt = new User_TaskBL().getUser_TasksList().OrderByDescending(c => c.Id).Where(x => ((x.DivisionID == DivDepID || x.DepartmentID == DivDepID)) && x.IsPrivate == 0 && x.User1.Role == 1).FirstOrDefault();

                }
                DateTime dd = Convert.ToDateTime(tt.EndDate).Date;

                DateTime d7 = DateTime.Now.Date.AddDays(7);
                DateTime d30 = DateTime.Now.Date.AddDays(30);
                ViewBag.DailyRem = -1;
                ViewBag.WeeklyRem = -1;
                ViewBag.MonthlyRem = -1;
                if (dd > DateTime.Now.Date)
                {
                    ViewBag.DailyRem = 1;

                    if (dd > d7)
                    {
                        ViewBag.WeeklyRem = 1;

                        if (dd > d30)
                        {
                            ViewBag.MonthlyRem = 1;
                        }
                    }
                }
                if (tt.DailyReminder != null)
                {
                    ViewBag.DailyReminder = tt.DailyReminder;
                }
                if (tt.BeforeDDateReminder != null)
                {
                    TimeSpan days = Convert.ToDateTime(tt.BeforeDDateReminder) - dd;
                    ViewBag.BeforeDDateReminder = Math.Abs(days.Days);
                }
                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult Getassignments(string startDate = "", string endDate = "", int tag = -1, int department = -1, int division = 0, string tname = "", int taskType = 0, int status = -1, string fname = "", string lname = "", int priority = -1, int completionStatus = -1, int startD = 0, int end = 0, int complete = 0, string DivDepID = "", int isCompleted = -1)
        {
            try
            {
                List<User_Task> tasks = new List<User_Task>();
                if (DivDepID != "")
                {
                    //tasks = new User_TaskBL().getUser_TasksList().OrderByDescending(c => c.Id).Where(x => ((x.DivisionID == DivDepID || x.DepartmentID == DivDepID)) && x.IsPrivate == 0 && x.User1.Role != 1).ToList();
                    if (isCompleted != -1)
                    {
                        tasks = new User_TaskBL().spGetUserTasksByCompany(Convert.ToInt32(logedinuser.Company)).OrderByDescending(c => c.Id).Where(x => ((x.DivisionID == DivDepID || x.DepartmentID == DivDepID)) && x.IsPrivate == 0 && x.User1 != null && x.CompletionDate != null).ToList();
                    }
                    else
                    {
                        tasks = new User_TaskBL().spGetUserTasksByCompany(Convert.ToInt32(logedinuser.Company)).OrderByDescending(c => c.Id).Where(x => ((x.DivisionID == DivDepID || x.DepartmentID == DivDepID)) && x.IsPrivate == 0 && x.User1!=null && x.CompletionDate == null).ToList();
                    }
                    tasks = tasks.Where(x => x.User1.Role != 1).ToList();
                }
                else
                {
                    //  tasks = new User_TaskBL().getUser_TasksList().OrderByDescending(c => c.Id).Where(x => x.User1.Role == 3 && x.IsPrivate == 0).ToList();
                    if (isCompleted != -1)
                    {
                        tasks = new User_TaskBL().spGetUserTasksByRole(3, Convert.ToInt32(logedinuser.Company)).OrderByDescending(c => c.Id).Where(x=>x.CompletionDate!=null).ToList();
                    }
                    else
                    {
                        tasks = new User_TaskBL().spGetUserTasksByRole(3, Convert.ToInt32(logedinuser.Company)).Where(x=>x.CompletionDate == null).OrderByDescending(c => c.Id).ToList();
                    }
                    tasks = tasks.Where(x => x.User1.Role != 1).ToList();

                }
                string complettionName = string.Empty;
                if (logedinuser.Role != 1)
                {
                    User manager = new UserBL().getUsersById(logedinuser.Id);

                    if (logedinuser.Role == 2 || logedinuser.Role == 4)
                        tasks = tasks.Where(x => x.User1.Department.DivisionID == manager.DivisionId).ToList();
                    if (logedinuser.Role == 3)
                        tasks = tasks.Where(x => x.User1.DepartmentId == manager.DepartmentId).ToList();


                }
                if (startD == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        tasks = tasks.Where(x => x.StartDate != null && (x.StartDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        tasks = tasks.Where(x => x.StartDate != null && (x.StartDate <= DateTime.Parse(endDate))).ToList();
                    }

                    ViewBag.sd = 1;
                }
                if (end == 1)
                {
                    if (startDate != "" && startDate != null)
                    {
                        tasks = tasks.Where(x => x.EndDate != null && (x.EndDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        tasks = tasks.Where(x => x.EndDate != null && (x.EndDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.ed = 1;
                }
                if (complete == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        tasks = tasks.Where(x => x.CompletionDate != null && (x.CompletionDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        tasks = tasks.Where(x => x.CompletionDate != null && (x.CompletionDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.cd = 1;
                }
                if (taskType != 0)
                {
                    tasks = tasks.Where(x => x.Task.TaskTypeID == taskType).ToList();
                }
                if (department != -1)
                {
                    tasks = tasks.Where(x => x.User1.Department != null && x.User1.DepartmentId == department).ToList();
                }
                if (tag != -1)
                {
                    tasks = tasks.Where(x => x.Task.TaskTags.Where(z => z.TagId == tag).Count() > 0).ToList();
                }

                if (tname != "")
                {
                    tasks = tasks.Where(x => x.Task.Name.ToUpper().Contains(tname.ToUpper())).ToList();
                }
                if (fname != "")
                {
                    tasks = tasks.Where(x => x.User1.FirstName.ToUpper().Contains(fname.ToUpper())).ToList();
                }
                if (lname != "")
                {
                    tasks = tasks.Where(x => x.User1.LastName.ToUpper().Contains(lname.ToUpper())).ToList();
                }
                if (status != -1)
                {
                    tasks = tasks.Where(x => x.Status == status).ToList();
                }
                if (priority != -1)
                {
                    tasks = tasks.Where(x => x.Priority == priority).ToList();
                }
                if (completionStatus != -1)
                {
                    if (completionStatus == 2)
                    {
                        tasks = tasks.Where(x => x.CompletionDate != null).ToList();
                        complettionName = "Completed";
                    }
                    else if (completionStatus == 3)
                    {
                        tasks = tasks.Where(x => x.EndDate < DateTime.Now && x.CompletionDate == null).ToList();
                        complettionName = "Late";
                    }
                    else if (completionStatus == 1)
                    {
                        tasks = tasks.Where(x => x.CompletionDate == null).ToList();
                        complettionName = "In Process";
                    }
                }


                int start2 = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];


                int totalrows = tasks.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    tasks = tasks.Where(x => x.User1.FirstName.ToLower().Contains(searchValue.ToLower()) || x.User1.LastName.ToLower().Contains(searchValue.ToLower()) || x.Task.Name.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = tasks.Count();
                //sorting

                // pagination
                tasks = tasks.Skip(start2).Take(length).ToList();

                List<EmployeeDTO> mnglist = new List<EmployeeDTO>();

                string priority2 = "";
                string status2 = "";
                string AssignedBy = "";
                foreach (User_Task x in tasks)
                {
                    if (x.Status != null)
                    {
                        status2 = General_Purpose.getStatusValue(x.Status.Value);
                    }
                    else
                    {
                        status2 = "";
                    }

                    if (x.Priority != null)
                    {
                        if (General_Purpose.getPriorityValue(x.Priority.Value) == "Medium")
                        {
                            priority2 = "<td><span class='mediumPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }
                        else if (General_Purpose.getPriorityValue(x.Priority.Value) == "Low")
                        {
                            priority2 = "<td><span class='lowPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }
                        else
                        {
                            priority2 = "<td><span class='highPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span></td>";
                        }

                    }
                    else
                        priority2 = "";


                    if (x.CreatedID == null)
                    {
                        AssignedBy = "Self Assigned";

                    }
                    else if (x.User.Id == logedinuser.Id)
                    {
                        AssignedBy = "You";
                    }
                    else
                    {
                        AssignedBy = x.User.FirstName + " " + x.User.LastName;
                    }


                    EmployeeDTO obj = new EmployeeDTO()
                    {

                        Name = x.User1.FirstName + " " + x.User1.LastName,
                        Task = x.Task.Name,
                        StartDate = x.StartDate.Value.ToString("MM/dd/yyyy"),
                        EndtDate = x.EndDate.Value.ToString("MM/dd/yyyy"),
                        WorkStatus = status2,
                        AssignedBy = AssignedBy,
                        Priority = priority2,
                        Id = x.Id,
                        EncryptedId = General_Purpose.EncryptId(x.Id)

                    };
                    mnglist.Add(obj);



                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);



            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult groupAssignments(string message = "")
        {
            try
            {               
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                ViewBag.tags = new TagBL().getTagsList().OrderBy(s => s.Name).ToList();
                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).ToList();
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                //ViewBag.display = displayType;
                //ViewBag.displayTypes = new List<int>() { 1, 2, 3 }.Where(x => x != displayType);
                ViewBag.priorities = new List<int>() { 0, 1, 2 };


                ViewBag.message = message;
                List<GroupTask_User> leadname = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.LeadRole == 1 && x.User.CompanyID == Convert.ToInt32(logedinuser.Company)).ToList();
                List<TaskDTO> pleadfname = new List<TaskDTO>();
                List<TaskDTO> pleadlname = new List<TaskDTO>();
                foreach (GroupTask_User t in leadname)
                {
                    TaskDTO obj = new TaskDTO()

                    {
                        Name = t.User.FirstName,
                        Id = t.User.Id,


                    };
                    TaskDTO obj2 = new TaskDTO()

                    {
                        Name = t.User.LastName,
                        Id = t.User.Id,


                    };
                    int c = 0;
                    c = pleadfname.Where(x => x.Id == t.User.Id).Count();
                    if (c == 0)
                    {
                        pleadfname.Add(obj);
                        pleadlname.Add(obj2);

                    }


                }
                ViewBag.LeadName = pleadfname;
                ViewBag.LeadLName = pleadlname;
                ViewBag.TaskName = new GroupTaskBL().getGroupTasksList().Where(x => x.IsActive == 1).ToList();

                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

         public ActionResult groupStudyAssignments(string message = "")
        {
            try
            {               
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                ViewBag.tags = new TagBL().getTagsList().OrderBy(s => s.Name).ToList();
                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).ToList();
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                //ViewBag.display = displayType;
                //ViewBag.displayTypes = new List<int>() { 1, 2, 3 }.Where(x => x != displayType);
                ViewBag.priorities = new List<int>() { 0, 1, 2 };


                ViewBag.message = message;
                List<GroupTask_User> leadname = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.LeadRole == 1 && x.User.CompanyID == Convert.ToInt32(logedinuser.Company) && x.GroupTasks_Details.CourseId != null).ToList();
                List<TaskDTO> pleadfname = new List<TaskDTO>();
                List<TaskDTO> pleadlname = new List<TaskDTO>();
                foreach (GroupTask_User t in leadname)
                {
                    TaskDTO obj = new TaskDTO()

                    {
                        Name = t.User.FirstName,
                        Id = t.User.Id,


                    };
                    TaskDTO obj2 = new TaskDTO()

                    {
                        Name = t.User.LastName,
                        Id = t.User.Id,


                    };
                    int c = 0;
                    c = pleadfname.Where(x => x.Id == t.User.Id).Count();
                    if (c == 0)
                    {
                        pleadfname.Add(obj);
                        pleadlname.Add(obj2);

                    }


                }
                ViewBag.LeadName = pleadfname;
                ViewBag.LeadLName = pleadlname;
                ViewBag.TaskName = new GroupTaskBL().getGroupTasksList().Where(x => x.IsActive == 1).ToList();

                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }



        public ActionResult GetgroupAssignments(string startDate = "", string endDate = "", int tag = -1, int department = -1, int division = 0, string taskName = "", int taskType = 0, int status1 = -1, string fname = "", string lname = "", int completionStatus = -1, int displayType = 1, int priority1 = -1, int start1 = 0, int end = 0, int complete = 0, int isCompleted = -1)
        {
            try
            {
                List<GroupTasks_Details> gTasks = null;
                if (isCompleted == 1) // this condition will trigger when we open Completed Groupt Tasks
                {
                    gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x=>x.CompletionDate != null && x.CourseId == null).OrderByDescending(c => c.CompletionDate).ToList();
                }
                else
                {
                    gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x=>x.CompletionDate==null && x.CourseId == null).OrderByDescending(c => c.Id).ToList();
                }
                string complettionName = string.Empty;
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                if (role == 3 || role == 2 || role == 4)
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.IsActive == 1 && y.UserId == id).Count() > 0).ToList();
                }


                if (start1 == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.StartDate != null && (x.StartDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.StartDate != null && (x.StartDate <= DateTime.Parse(endDate))).ToList();
                    }

                    ViewBag.sd = 1;
                }
                if (end == 1)
                {
                    if (startDate != "" && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.EndDate != null && (x.EndDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.EndDate != null && (x.EndDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.ed = 1;
                }
                if (complete == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null && (x.CompletionDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null && (x.CompletionDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.cd = 1;
                }

                if (tag != -1)
                {
                    gTasks = gTasks.Where(x => x.GroupTask.GroupTask_Task.Where(z => z.Task.TaskTags.Where(y => y.TagId == tag).Count() > 0).Count() > 0).ToList();
                }

                if (taskName != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask.Name.ToUpper().Contains(taskName.ToUpper())).ToList();
                }
                if (fname != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.LeadRole == 1 && y.User.FirstName.ToUpper().Contains(fname.ToUpper())).Count() > 0).ToList();
                }
                if (lname != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.LeadRole == 1 && y.User.LastName.ToUpper().Contains(lname.ToUpper())).Count() > 0).ToList();
                }
                if (status1 != -1)
                {
                    gTasks = gTasks.Where(x => x.Status == status1).ToList();
                }
                if (completionStatus != -1)
                {
                    if (completionStatus == 2)
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null).ToList();
                        complettionName = "Completed";
                    }
                    else if (completionStatus == 3)
                    {
                        gTasks = gTasks.Where(x => x.EndDate < DateTime.Now && x.CompletionDate == null).ToList();
                        complettionName = "Late";
                    }
                    else if (completionStatus == 1)
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate == null).ToList();
                        complettionName = "In Process";
                    }
                }
                if (priority1 != -1)
                    gTasks = gTasks.Where(x => x.Priority == priority1).ToList();

                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = gTasks.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    gTasks = gTasks.Where(x => x.GroupTask.Name.ToLower().Contains(searchValue.ToLower()) || x.GroupTask_User.Where(y => y.LeadRole == 1).FirstOrDefault().User.FirstName.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = gTasks.Count();
                //sorting

                // pagination
                gTasks = gTasks.Skip(start).Take(length).ToList();

                List<ManagerDTO> mnglist = new List<ManagerDTO>();

                string priority = "";
                string status = "";
                string LeadName = "";
                string CreatedBy = "";
                int temp = 0;
                foreach (GroupTasks_Details x in gTasks)
                {
                    if (x.Status != null)
                    {
                        status = General_Purpose.getStatusValue(x.Status.Value);
                    }
                    else
                    {
                        status = "";
                    }

                    if (x.Priority != null)
                    {
                        if (General_Purpose.getPriorityValue(x.Priority.Value) == "Medium")
                        {
                            priority = "<span class='mediumPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }
                        else if (General_Purpose.getPriorityValue(x.Priority.Value) == "Low")
                        {
                            priority = "<span class='lowPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }
                        else
                        {
                            priority = "<span class='highPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }

                    }
                    else
                        priority = "";
                    if (x.GroupTask_User.Where(z => z.LeadRole == 1).Count() > 0)
                    {
                        GroupTask_User member;
                        member= x.GroupTask_User.Where(z => z.LeadRole == 1 && z.IsActive==1).FirstOrDefault();
                        if (member == null)
                        {
                            member = x.GroupTask_User.Where(z => z.LeadRole == 1).FirstOrDefault();

                        }
                        if (member.IsActive==0 && member.User.IsActive == 0)
                        {
                            LeadName = member.User.FirstName + " " + member.User.LastName;
                            LeadName = LeadName + " " + "<span class='label label-danger'> (Deleted)</span>";
                        }
                        else
                        {
                            LeadName = member.User.FirstName + " " + member.User.LastName;
                        }
                        
                    }
                    else
                        LeadName = "";


                    if (logedinuser.Role == (int)Enums.Role.Manager || logedinuser.Role == (int)Enums.Role.Cordinator)
                    {
                        if (x.CreatedBy.HasValue && logedinuser.Id == x.CreatedBy.Value)
                        {
                            temp = 1;
                        }
                        else if (x.CreatedBy.HasValue == false && x.GroupTask_User.Count > 0)
                        {
                            if (x.GroupTask_User.Where(y => y.LeadRole == (int)Enums.GroupTaskLead.Primary && y.UserId == logedinuser.Id).Count() > 0)
                            {
                                temp = 2;
                            }
                            else
                            {
                                temp = 4;
                            }


                        }
                        else if (x.CreatedBy.HasValue == true && x.GroupTask_User.Count > 0)
                        {
                            if (x.GroupTask_User.Where(y => y.LeadRole == (int)Enums.GroupTaskLead.Primary && y.UserId == logedinuser.Id).Count() > 0)
                            {
                                temp = 2;
                            }
                            else
                            {
                                temp = 4;
                            }


                        }
                        else
                        {
                            temp = 4;
                        }

                    }
                    else if (logedinuser.Role == (int)Enums.Role.Admin)
                    {
                        temp = 3;
                    }
                    else
                    {
                        temp = 4;
                    }




                    ManagerDTO obj = new ManagerDTO()
                    {

                        Name = x.GroupTask.Name,
                        StartDate = x.StartDate.Value.ToString("MM/dd/yyyy"),
                        EndDate = x.EndDate.Value.ToString("MM/dd/yyyy"),
                        FirstName = LeadName,
                        Priority = priority,
                        WorkStatus = General_Purpose.getStatusValue(x.Status.Value),
                        Temp = temp,
                        Id = x.Id,
                        EncryptedId = General_Purpose.EncryptId(x.Id)

                    };
                    mnglist.Add(obj);
                    LeadName = "";
                    temp = 0;




                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
         public ActionResult GetgroupStudyAssignments(string startDate = "", string endDate = "", int tag = -1, int department = -1, int division = 0, string taskName = "", int taskType = 0, int status1 = -1, string fname = "", string lname = "", int completionStatus = -1, int displayType = 1, int priority1 = -1, int start1 = 0, int end = 0, int complete = 0, int isCompleted = -1)
        {
            try
            {
                List<GroupTasks_Details> gTasks = null;
                if (isCompleted == 1) // this condition will trigger when we open Completed Groupt study
                {
                    gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x=>x.CompletionDate != null && x.CourseId != null).OrderByDescending(c => c.CompletionDate).ToList();
                }
                else
                {
                    gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x=>x.CompletionDate==null && x.CourseId != null).OrderByDescending(c => c.Id).ToList();
                }
                string complettionName = string.Empty;
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                if (role == 3 || role == 2 || role == 4)
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.IsActive == 1 && y.UserId == id).Count() > 0).ToList();
                }


                if (start1 == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.StartDate != null && (x.StartDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.StartDate != null && (x.StartDate <= DateTime.Parse(endDate))).ToList();
                    }

                    ViewBag.sd = 1;
                }
                if (end == 1)
                {
                    if (startDate != "" && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.EndDate != null && (x.EndDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.EndDate != null && (x.EndDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.ed = 1;
                }
                if (complete == 1)
                {
                    if (startDate != null && startDate != "")
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null && (x.CompletionDate >= DateTime.Parse(startDate))).ToList();
                    }

                    if (endDate != null && endDate != "")
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null && (x.CompletionDate <= DateTime.Parse(endDate))).ToList();
                    }
                    ViewBag.cd = 1;
                }

                if (tag != -1)
                {
                    gTasks = gTasks.Where(x => x.GroupTask.GroupTask_Task.Where(z => z.Task.TaskTags.Where(y => y.TagId == tag).Count() > 0).Count() > 0).ToList();
                }

                if (taskName != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask.Name.ToUpper().Contains(taskName.ToUpper())).ToList();
                }
                if (fname != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.LeadRole == 1 && y.User.FirstName.ToUpper().Contains(fname.ToUpper())).Count() > 0).ToList();
                }
                if (lname != "")
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.LeadRole == 1 && y.User.LastName.ToUpper().Contains(lname.ToUpper())).Count() > 0).ToList();
                }
                if (status1 != -1)
                {
                    gTasks = gTasks.Where(x => x.Status == status1).ToList();
                }
                if (completionStatus != -1)
                {
                    if (completionStatus == 2)
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate != null).ToList();
                        complettionName = "Completed";
                    }
                    else if (completionStatus == 3)
                    {
                        gTasks = gTasks.Where(x => x.EndDate < DateTime.Now && x.CompletionDate == null).ToList();
                        complettionName = "Late";
                    }
                    else if (completionStatus == 1)
                    {
                        gTasks = gTasks.Where(x => x.CompletionDate == null).ToList();
                        complettionName = "In Process";
                    }
                }
                if (priority1 != -1)
                    gTasks = gTasks.Where(x => x.Priority == priority1).ToList();

                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = gTasks.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    gTasks = gTasks.Where(x => x.GroupTask.Name.ToLower().Contains(searchValue.ToLower()) || x.GroupTask_User.Where(y => y.LeadRole == 1).FirstOrDefault().User.FirstName.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = gTasks.Count();
                //sorting

                // pagination
                gTasks = gTasks.Skip(start).Take(length).ToList();

                List<ManagerDTO> mnglist = new List<ManagerDTO>();

                string priority = "";
                string status = "";
                string LeadName = "";
                string CreatedBy = "";
                int temp = 0;
                foreach (GroupTasks_Details x in gTasks)
                {
                    if (x.Status != null)
                    {
                        status = General_Purpose.getStatusValue(x.Status.Value);
                    }
                    else
                    {
                        status = "";
                    }

                    if (x.Priority != null)
                    {
                        if (General_Purpose.getPriorityValue(x.Priority.Value) == "Medium")
                        {
                            priority = "<span class='mediumPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }
                        else if (General_Purpose.getPriorityValue(x.Priority.Value) == "Low")
                        {
                            priority = "<span class='lowPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }
                        else
                        {
                            priority = "<span class='highPriorityButton'>" + General_Purpose.getPriorityValue(x.Priority.Value) + "</span>";
                        }

                    }
                    else
                        priority = "";
                    if (x.GroupTask_User.Where(z => z.LeadRole == 1).Count() > 0)
                    {
                        GroupTask_User member;
                        member= x.GroupTask_User.Where(z => z.LeadRole == 1 && z.IsActive==1).FirstOrDefault();
                        if (member == null)
                        {
                            member = x.GroupTask_User.Where(z => z.LeadRole == 1).FirstOrDefault();

                        }
                        if (member.IsActive==0 && member.User.IsActive == 0)
                        {
                            LeadName = member.User.FirstName + " " + member.User.LastName;
                            LeadName = LeadName + " " + "<span class='label label-danger'> (Deleted)</span>";
                        }
                        else
                        {
                            LeadName = member.User.FirstName + " " + member.User.LastName;
                        }
                        
                    }
                    else
                        LeadName = "";


                    if (logedinuser.Role == (int)Enums.Role.Manager || logedinuser.Role == (int)Enums.Role.Cordinator)
                    {
                        if (x.CreatedBy.HasValue && logedinuser.Id == x.CreatedBy.Value)
                        {
                            temp = 1;
                        }
                        else if (x.CreatedBy.HasValue == false && x.GroupTask_User.Count > 0)
                        {
                            if (x.GroupTask_User.Where(y => y.LeadRole == (int)Enums.GroupTaskLead.Primary && y.UserId == logedinuser.Id).Count() > 0)
                            {
                                temp = 2;
                            }
                            else
                            {
                                temp = 4;
                            }


                        }
                        else if (x.CreatedBy.HasValue == true && x.GroupTask_User.Count > 0)
                        {
                            if (x.GroupTask_User.Where(y => y.LeadRole == (int)Enums.GroupTaskLead.Primary && y.UserId == logedinuser.Id).Count() > 0)
                            {
                                temp = 2;
                            }
                            else
                            {
                                temp = 4;
                            }


                        }
                        else
                        {
                            temp = 4;
                        }

                    }
                    else if (logedinuser.Role == (int)Enums.Role.Admin)
                    {
                        temp = 3;
                    }
                    else
                    {
                        temp = 4;
                    }




                    ManagerDTO obj = new ManagerDTO()
                    {

                        Name = x.GroupTask.Name,
                        StartDate = x.StartDate.Value.ToString("MM/dd/yyyy"),
                        EndDate = x.EndDate.Value.ToString("MM/dd/yyyy"),
                        FirstName = LeadName,
                        Priority = priority,
                        WorkStatus = General_Purpose.getStatusValue(x.Status.Value),
                        Temp = temp,
                        Id = x.Id,
                        EncryptedId = General_Purpose.EncryptId(x.Id)

                    };
                    mnglist.Add(obj);
                    LeadName = "";
                    temp = 0;




                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteAssignment()
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                List<User_Task> tasks = new User_TaskBL().getUser_TasksList();
                List<GroupTasks_Details> gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList();

                User_TaskBL ttbl = new User_TaskBL();
                GroupTasks_DetailsBL gtbl = new GroupTasks_DetailsBL();
                bool check = false;
                foreach (var item in gTasks)
                {
                    string temp = "gt" + item.Id;
                    if (Request.Form[temp] != null)
                    {
                        check = true;
                        gtbl.DeleteGroupTasks_Detailss(item.Id);
                    }
                }
                if (check)
                {
                    return RedirectToAction("groupAssignments");
                }

                foreach (var item in tasks)
                {
                    string temp = "t" + item.Id;
                    if (Request.Form[temp] != null)
                    {
                        ttbl.DeleteUser_Tasks(item.Id);
                    }
                }

                return RedirectToAction("assignments");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult deletegroupTaskFunction(int sid, int way = -1, int isGroupStudy=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new GroupTasks_DetailsBL().DeleteGroupTasks_Detailss(sid);

                if (way != -1)
                {
                    if(isGroupStudy!=-1)
                    return RedirectToAction("CompletedgroupStudyAssignments", new { message = "Group Study Assignment has been deleted." });
                    else
                    return RedirectToAction("CompletedgroupAssignments", new { message = "Group Assignment has been deleted." });
                }
                else
                {
                    if(isGroupStudy!=-1)
                    return RedirectToAction("GroupStudyassignments", new { message = "Group Study Assignment has been deleted." });
                    else
                    return RedirectToAction("Groupassignments", new { message = "Group Assignment has been deleted." });
                }

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult assignTome(string Time, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, DateTime? startDate, DateTime? endDate,int? CanvasCourseId, int days = -1, string notes = null, string FeqEndingDate = "",string sid=null, string way="",int DReminder=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                List<User> email = new List<User>();
                List<string> content = new List<string>();

                int role = logedinuser.Role;
                int id = logedinuser.Id;

                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays.Value;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }
                }

                User_Task tt = new User_Task()
                {
                    TaskID = taskId,
                    Cost = cost,
                    CEU = ceu,
                    Hours = hours,
                    Grad = Grad,
                    StartDate = startDate,
                    Notes = notes,
                    IsActive = 1,
                    Status = 0,
                    UserID = id,
                    Priority = priority,
                    CanvasCourseId= CanvasCourseId
                };
                if (Request["IsPrivate"] != null)
                {
                    tt.IsPrivate = 1;
                }
                else
                    tt.IsPrivate = 0;
                if (days != -1)
                {
                    tt.EndDate = tt.StartDate;
                    tt.RepeatTime = days;
                }
                else

                {
                    tt.EndDate = endDate.Value;
                    DateTime dateTime = DateTime.Now;
                    DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                    if (Time != null)
                    {
                        timeValue = Convert.ToDateTime(Time);
                    }

                    DateTime drt = new DateTime(endDate.Value.Year, endDate.Value.Month, endDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                    tt.EndDate = drt;
                }
                User traine = new UserBL().getUsersById(tt.UserID.Value);
                if (days == -1)
                {
                    if (DReminder != -1)
                    {
                        tt.DailyReminder = DReminder;
                    }
                    tt = new User_TaskBL().AddUser_Tasks(tt);
                    if (CanvasCourseId != null)
                    {
                        General_Purpose.AssignLMSCourse(tt.Id, (int)CanvasCourseId);
                    }
                }
                if (days != -1)
                {
                    if (FeqEndingDate == "")
                    {
                        return RedirectToAction("displayAddTask", "Task", new {sid= sid, message = "Task has not been assigned because you have not set frequency ending date.", way = way });
                    }
                    DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                    if (FEndingDate < Convert.ToDateTime(tt.StartDate))
                    {
                        return RedirectToAction("displayAddTask", "Task", new { sid = sid, message = "Task has not been assigned because task's start date must be greater than frequency ending date.", way = way });
                    }
                    if (DReminder != -1)
                    {
                        tt.DailyReminder = DReminder;
                    }
                    tt = new User_TaskBL().AddUser_Tasks(tt);
                    if (CanvasCourseId != null)
                    {
                        General_Purpose.AssignLMSCourse(tt.Id, (int)CanvasCourseId);
                    }
                    DateTime starDate = tt.StartDate.Value;
                    DateTime dt = tt.StartDate.Value.AddDays(days);
                    while (FEndingDate.AddDays(1) > dt)
                    {
                        User_Task ut = new User_Task()
                        {
                            IsActive = 1,
                            IsPrivate = tt.IsPrivate,
                            StartDate = dt,
                            EndDate = dt,
                            Cost = tt.Cost,
                            CEU = tt.CEU,
                            Grad = tt.Grad,
                            UserID = tt.UserID,
                            TaskID = tt.TaskID,
                            CreatedID = tt.CreatedID,
                            CompletionDate = tt.CompletionDate,
                            File = tt.File,
                            RepeatDeadline = tt.RepeatDeadline,
                            Priority = tt.Priority,
                            CanvasCourseId = tt.CanvasCourseId,
                            Status = 0,
                            RepeatTime = tt.RepeatTime,
                            ParentID = tt.Id,




                        };
                        if (DReminder != -1)
                        {
                            ut.DailyReminder = DReminder;
                        }
                        ut =  new User_TaskBL().AddUser_Tasks(ut);
                        if (CanvasCourseId != null)
                        {
                            General_Purpose.AssignLMSCourse(ut.Id, (int)CanvasCourseId);
                        }
                        if (days == 30)
                            dt = dt.AddMonths(1);
                        else if (days == 365)
                            dt = dt.AddYears(1);
                        else
                            dt = dt.AddDays(days);
                        //dt = dt.AddDays(days);


                    }

                }

                email.Add(traine);
                tt.User1 = traine;
                tt.Task = new TaskBL().getTasksById(tt.TaskID.Value);
                content.Add(Messages.taskAward(tt));


                Communication.sendMessage(content, email);

                data.TaskId = tt.Id.ToString();
                General_Purpose.SendPushNotification(traine.Player_Id, Messages.taskAward(tt, 1), "Message from Zuptu", data, traine.Id.ToString());

                return RedirectToAction("displayAddTask", new { sid = sid, message = "You have assigned task to yourself.", way = way });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        #endregion Task


        #region GroupTask
        public ActionResult deleteGroupTask(int id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new GroupTaskBL().DeleteGroupTasks(id);
                return RedirectToAction("DisplayGroupTask", new { message = "Group Assignment has been deleted." });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult updategroupTaskObject(GroupTask groupTask, int divisionId = -1,string way="")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                GroupTaskBL gtbl = new GroupTaskBL();
                GroupTask oldObj = new GroupTaskBL().getGroupTasksById(groupTask.Id);

                if (way != "")
                {
                    GroupTask obj = new GroupTask()
                    {
                        Id = oldObj.Id,
                        IsActive = oldObj.IsActive,
                        IsPrivate = oldObj.IsPrivate,
                        CreatedAt = oldObj.CreatedAt,
                        Name = groupTask.Name,
                        UserId = oldObj.UserId,
                        DivisionId = oldObj.DivisionId
                    };
                    if (oldObj.Name != groupTask.Name)
                    {
                        User man = new UserBL().getUsersById((int)oldObj.UserId);
                        if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == groupTask.Name.ToLower() && x.User.DivisionId == man.DivisionId).ToList().Count() > 0)
                        {
                            if (way != "")
                            {
                                return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't update the group task." });

                            }

                        }
                    }
                    obj.CompanyId = Convert.ToInt32(logedinuser.Company);
                    new GroupTaskBL().UpdateGroupTasks(obj);

                    return RedirectToAction("displayGroupTask", new { message = "Group task has been updated" });

                }
                if (divisionId != -1)
                {
                    User man = new UserBL().getManagerList().Where(x => x.DivisionId.HasValue && x.IsActive == 1 && x.DivisionId == divisionId).FirstOrDefault();
                    if (man == null)
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "There is no Manager exists in this division"});

                    }
                    groupTask.IsActive = 1;
                    groupTask.UserId = man.Id;
                    if (oldObj.Name != groupTask.Name)
                        if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == groupTask.Name.ToLower() && x.User.DivisionId == man.DivisionId).ToList().Count() > 0)
                    {
                            return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Name already exists. Couldn't update the group task." });

                    }
                    groupTask.CompanyId = Convert.ToInt32(logedinuser.Company);
                    if (!groupTask.DivisionId.HasValue)
                        groupTask.DivisionId = man.DivisionId;
                    new GroupTaskBL().UpdateGroupTasks(groupTask);
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task has been updated" });

                }

                int id = logedinuser.Id;
                User manager = new UserBL().getUsersById(id);

                groupTask.IsActive = 1;
                groupTask.UserId = manager.Id;
                if (oldObj.Name != groupTask.Name)
                {
                    //User man = new UserBL().getUsersById((int)oldObj.UserId);
                    if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == groupTask.Name.ToLower() && x.User.DivisionId == manager.DivisionId).ToList().Count() > 0)
                    {
                       
                            return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't update the group task." });
                    }
                }
                groupTask.CompanyId = Convert.ToInt32(logedinuser.Company);
                if (!groupTask.DivisionId.HasValue)
                    groupTask.DivisionId = manager.DivisionId;
                new GroupTaskBL().UpdateGroupTasks(groupTask);

                return RedirectToAction("displayGroupTask", new { message = "Group task updated" });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult updateGroupTask(int id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                GroupTaskBL gtbl = new GroupTaskBL();

                List<Task> tasks = new List<Task>();

                List<Task> task = new TaskBL().getTasksList().OrderBy(s => s.Name).ToList();
                foreach (var item in task)
                {
                    if (Request.Form[item.Id.ToString()] != null)
                    {
                        new GroupTask_TaskBL().AddGroupTask_Tasks(new GroupTask_Task() { IsActive = 1, TaskId = item.Id, GroupTaskId = id });
                    }
                }

                return RedirectToAction("displayAddTask");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult addGroupTask(string name, string message = "", int divisionId = -1,string way="")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                GroupTaskBL gtbl = new GroupTaskBL();
                int adminid = logedinuser.Role;

                
                    //return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't add the group task." });
                
                
                    if (divisionId != -1)
                    {
                        GroupTask groupTask = new GroupTask();
                        User man = new UserBL().getManagerList().Where(x => x.DivisionId.HasValue && x.IsActive == 1 && x.DivisionId == divisionId).FirstOrDefault();
                        groupTask.IsActive = 1;
                        if (man == null)
                        {
                        if (way != "")
                        {
                            return RedirectToAction("DisplayGroupTask", new { message = "Group task couldn't be created because there is no Manager exists in this Division" });

                        }
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task couldn't be created because there is no Manager exists in this Division" });

                        }
                    if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == name.ToLower() && x.User.DivisionId==man.DivisionId).ToList().Count() > 0)
                    {
                        if (way != "")
                        {
                            return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't add the group task." });

                        }
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Name already exists. Couldn't add the group task." });

                    }

                    groupTask.UserId = man.Id;
                        groupTask.Name = name;
                    groupTask.DivisionId = man.DivisionId;
                        new GroupTaskBL().AddGroupTasks(groupTask);
                    if (way != "")
                    {
                        return RedirectToAction("DisplayGroupTask", new { message = "Group task has been added Successfully" });

                    }
                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task has been added Successfully" });

                    }




                    if (adminid == (int)Enums.Role.Cordinator || adminid == (int)Enums.Role.Manager)
                    {
                        int id = logedinuser.Id;
                        User manager = new UserBL().getUsersById(id);

                    if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == name.ToLower() && x.User.DivisionId == manager.DivisionId).ToList().Count() > 0)
                    {
                        return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't add the group task." });
                        
                    }

                    int _id = gtbl.AddGroupTasks(new GroupTask() { Name = name, IsActive = 1, UserId = manager.Id ,DivisionId =manager.DivisionId });
                    }

                    return RedirectToAction("DisplayGroupTask", new { message = "Group Task has been added Successfully." });

                
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult DisplayGroupTask(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                int role = logedinuser.Role;

                if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int managerId = logedinuser.Id;
                    User manager = new UserBL().getUsersById(managerId);

                }
                else if (role == (int)Enums.Role.Trainee)
                    return Content("Unauthorised");

                ViewBag.message = message;
                ViewBag.role = role;

                return View("GroupTask");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult GetDisplayGroupTask()
        {
            try
            {
                List<GroupTask> gt = new GroupTaskBL().getGroupTasksList().OrderByDescending(s => s.Id).Where(w=>w.User.DivisionId!=null).ToList();

                int role = logedinuser.Role;

                if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int managerId = logedinuser.Id;
                    User manager = new UserBL().getUsersById(managerId);

                    gt = gt.Where(x => x.User.DivisionId == manager.DivisionId).ToList();
                }
                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];




                int totalrows = gt.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    gt = gt.Where(x => x.Name.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = gt.Count();
                //sorting

                // pagination
                gt = gt.Skip(start).Take(length).ToList();

                List<ManagerDTO> mnglist = new List<ManagerDTO>();
                int c = 0;
                string input = "";
                foreach (GroupTask x in gt)
                {
                    if (logedinuser.Role != 1)
                    {
                        x.IsActive = 11;
                    }
                    //User us = new UserBL().getUsersById((int)x.UserId);

                    Division div = new Division();
                    if(x.DivisionId.HasValue)
                    div =new DivisionBL().getDivisionsById((int)x.DivisionId);
                    input = "<input type = 'checkbox' class='fancytree-checkbox deleteCheck' id='check " + x.Id + "'value='" + x.Id + "' name='" + x.Name + "' />";
                    ManagerDTO obj = new ManagerDTO()
                    {
                        FirstName = input, //check box
                        Name = x.Name, // division Name
                        IsActive = (int)x.IsActive,
                        DivisionName=div.Name,
                        Id = x.Id

                    };
                    mnglist.Add(obj);
                    c++;


                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);


            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult deleteMultipleGroupTask()
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                GroupTaskBL gbl = new GroupTaskBL();

                List<GroupTask> list = gbl.getGroupTasksList();
                foreach (var item in list)
                {
                    if (Request.Form[item.Id.ToString()] != null)
                    {
                        gbl.DeleteGroupTasks(item.Id);
                    }
                }
                return RedirectToAction("DisplayGroupTask");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteGroupTaskId(int divisionId, int gt)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new GroupTaskBL().DeleteGroupTasks(gt);
                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task has been deleted" });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult addTraineeGroupTask(string Time, GroupTasks_Details groupTasks_Details, int? SecondaryLead, int? PrimaryLead, double? cost, int? freqDays, int deptId = -1, int divisionId = -1, int days = -1, string FeqEndingDate = "", string way = "",string NewGroupTask="",int DivId=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (groupTasks_Details.GroupTaskId==0)
                {
                    GroupTaskBL gtbl = new GroupTaskBL();
                    int adminid = logedinuser.Role;

                    if (DivId != -1)
                    {
                        GroupTask groupTask = new GroupTask();
                        User man = new UserBL().getManagerList().Where(x => x.DivisionId.HasValue && x.IsActive == 1 && x.DivisionId == DivId).FirstOrDefault();
                        groupTask.IsActive = 1;
                        if (man == null)
                        {
                            
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task couldn't be created because there is no Manager exists in this Division" });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Group task couldn't be created because there is no Manager exists in this Division.", way = way });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Group task couldn't be created because there is no Manager exists in this Division" });

                        }
                        if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == NewGroupTask.ToLower() && x.User.DivisionId == man.DivisionId).ToList().Count() > 0)
                        {
                          
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Name already exists. Couldn't add the group task." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Name already exists. Couldn't add the group task." });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Name already exists. Couldn't add the group task." });

                        }

                        groupTask.UserId = man.Id;
                        groupTask.Name = NewGroupTask;
                        groupTask.DivisionId = man.DivisionId;
                        groupTasks_Details.GroupTaskId =  new GroupTaskBL().AddGroupTasks(groupTask);
                        
                    }
                }

                List<User> emails = new List<User>();
                List<string> content = new List<string>();
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays.Value;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }
                }


                GroupTask tasks = new GroupTaskBL().getGroupTasksList().Where(x => x.Id == groupTasks_Details.GroupTaskId.Value).FirstOrDefault();// task.GroupTask;

                double ceu = 0;
                double hours = 0;
                double totalCost = 0;


                int role = logedinuser.Role;
                if (role == (int)Enums.Role.Manager || role == (int)Enums.Role.Cordinator || role == (int)(Enums.Role.Admin))
                {
                    int id = logedinuser.Id;
                    GroupTasks_DetailsBL gtdl = new GroupTasks_DetailsBL();
                    GroupTask_UserBL gttl = new GroupTask_UserBL();

                    DatabaseEntities de = new DatabaseEntities();
                    //if (role != (int)(Enums.Role.Admin))
                    groupTasks_Details.CreatedBy = id;
                    groupTasks_Details.IsActive = 1;
                    groupTasks_Details.Status = 0;

                    if (tasks.GroupTask_Task.Count > 0)
                        foreach (var item in tasks.GroupTask_Task)
                        {
                            ceu = item.Task.CEU != null ? item.Task.CEU.Value : 0;
                            hours = item.Task.Hours != null ? item.Task.Hours.Value : 0;
                            totalCost = item.Task.Cost_ != null ? item.Task.Cost_.Value : 0;
                        }

                    if (groupTasks_Details.Hours == null)
                    {
                        groupTasks_Details.Hours = hours;
                    }
                    if (groupTasks_Details.CEU == null)
                    {
                        groupTasks_Details.CEU = ceu;
                    }
                    if (groupTasks_Details.Cost == null)
                    {
                        groupTasks_Details.Cost = totalCost;
                    }
                    if (cost.HasValue)
                    {
                        groupTasks_Details.Cost = cost.Value;
                    }
                    ////////////////////////
                    if (days != -1)
                    {
                        groupTasks_Details.EndDate = groupTasks_Details.StartDate;
                        groupTasks_Details.RepeatTime = days;
                    }
                    else
                    {
                        if (groupTasks_Details.EndDate == null)
                        {
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group Task couldn't be assigned because End date was not entered." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Group Task couldn't be assigned because End date was not entered.", way = way });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Group Task couldn't be assigned because End date was not entered." });

                        }
                        groupTasks_Details.EndDate = groupTasks_Details.EndDate.Value;
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                        }

                        DateTime drt = new DateTime(groupTasks_Details.EndDate.Value.Year, groupTasks_Details.EndDate.Value.Month, groupTasks_Details.EndDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                        groupTasks_Details.EndDate = drt;
                    }
                    if (days == -1)
                    {
                        groupTasks_Details.CreatedAt = DateTime.Now;
                        groupTasks_Details.Id = gtdl.AddGroupTasks_Detailss(groupTasks_Details);

                        groupTasks_Details.GroupTask = new GroupTaskBL().getGroupTasksById(groupTasks_Details.GroupTaskId.Value);

                        if (PrimaryLead.HasValue)
                        {
                            User primary = new UserBL().getUsersById(PrimaryLead.Value);
                            emails.Add(primary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, primary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = PrimaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Primary
                            }, de);
                        }
                        if (SecondaryLead.HasValue)
                        {
                            User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                            emails.Add(secondary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, secondary));
                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = SecondaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Secondary
                            }, de);
                        }
                        de.SaveChanges();
                        if (groupTasks_Details.EndDate < groupTasks_Details.StartDate)
                        {
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Enddate must be greater than Startdate." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Enddate must be greater than Startdate.", way = way });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Enddate must be greater than Startdate." });

                        }
                        int flag = 0;
                        List<User> trainee = new UserBL().getTraineesList();

                        foreach (var item in trainee)
                        {
                            if (Request.Form[item.Id.ToString()] != null)
                            {
                                flag++;

                                emails.Add(item);
                                content.Add(Messages.groupTaskAddition(groupTasks_Details, item));

                                data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                                General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());


                                gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });
                            }
                        }
                    }
                    else
                    {
                        if (FeqEndingDate == "")
                        {
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group Task has not been assigned because you have not set frequency ending date." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Group Task has not been assigned because you have not set frequency ending date.", way = way });
                            }

                        }
                        DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                        if (FEndingDate < Convert.ToDateTime(groupTasks_Details.StartDate))
                        {
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group Task has not been assigned because frequency ending date must be greater than  task's start." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Group Task has not been assigned because frequency ending date must be greater than  task's start.", way = way });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Group Task has not been assigned because frequency ending date must be greater than  task's start." });

                        }
                        groupTasks_Details.CreatedAt = DateTime.Now;
                        int grptaskdetId = gtdl.AddGroupTasks_Detailss(groupTasks_Details);

                        groupTasks_Details.GroupTask = new GroupTaskBL().getGroupTasksById(groupTasks_Details.GroupTaskId.Value);

                        if (PrimaryLead.HasValue)
                        {
                            User primary = new UserBL().getUsersById(PrimaryLead.Value);
                            emails.Add(primary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, primary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());


                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = PrimaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Primary
                            }, de);
                        }
                        if (SecondaryLead.HasValue)
                        {
                            User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                            emails.Add(secondary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, secondary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());


                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = SecondaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Secondary
                            }, de);
                        }
                        de.SaveChanges();
                        if (groupTasks_Details.EndDate < groupTasks_Details.StartDate)
                        {
                            if (divisionId != -1)
                            {
                                return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Enddate must be greater than Startdate." });

                            }

                            if (deptId != -1)
                            {
                                return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Enddate must be greater than Startdate.", way = way });
                            }
                            return RedirectToAction("displayEmployee", "Utilities", new { message = "Enddate must be greater than Startdate." });

                        }
                        int flag = 0;
                        List<User> trainee = new UserBL().getTraineesList();

                        foreach (var item in trainee)
                        {
                            if (Request.Form[item.Id.ToString()] != null)
                            {
                                flag++;

                                emails.Add(item);
                                content.Add(Messages.groupTaskAddition(groupTasks_Details, item));

                                data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                                General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());

                                gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });
                            }
                        }

                        DateTime startDate1 = groupTasks_Details.StartDate.Value;
                        DateTime dt = groupTasks_Details.StartDate.Value.AddDays(days);
                        int grptskid = (int)groupTasks_Details.GroupTaskId;
                        while (FEndingDate.AddDays(1) > dt)
                        {
                            GroupTasks_Details newobj = new GroupTasks_Details()
                            {
                                Hours = groupTasks_Details.Hours,
                                CEU = groupTasks_Details.CEU,
                                StartDate = dt,
                                EndDate = dt,
                                Grade = groupTasks_Details.Grade,
                                CompletionDate = groupTasks_Details.CompletionDate,
                                IsActive = groupTasks_Details.IsActive,
                                Notes = groupTasks_Details.Notes,
                                GroupTaskId = groupTasks_Details.GroupTaskId,
                                Status = groupTasks_Details.Status,
                                Cost = groupTasks_Details.Cost,
                                Priority = groupTasks_Details.Priority,
                                SlackChannel = groupTasks_Details.SlackChannel,
                                CreatedBy = groupTasks_Details.CreatedBy,
                                TicketSortBy = groupTasks_Details.TicketSortBy,
                                ParentID = grptaskdetId,
                                RepeatTime = groupTasks_Details.RepeatTime,
                                RepeatDeadline = groupTasks_Details.RepeatDeadline,
                                CreatedAt = DateTime.Now



                            };

                            new GroupTasks_DetailsBL().AddGroupTasks_Detailss(newobj);
                            // new GroupTasks_DetailsBL().AddGroupTasks_Detailss(groupTasks_Details);

                            newobj.GroupTask = new GroupTaskBL().getGroupTasksById(newobj.GroupTaskId.Value);

                            if (PrimaryLead.HasValue)
                            {
                                User primary = new UserBL().getUsersById(PrimaryLead.Value);
                               // emails.Add(primary);
                               // content.Add(Messages.groupTaskAddition(newobj, primary));
                                data.GroupTaskDetailsId = newobj.Id.ToString();
                                General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());

                                gttl.AddGroupTask_Users(new GroupTask_User()
                                {
                                    UserId = PrimaryLead.Value,
                                    GroupTaskDetailsId = newobj.Id,
                                    IsActive = 1,
                                    LeadRole = (int)Enums.GroupTaskLead.Primary
                                }, de);
                            }
                            if (SecondaryLead.HasValue)
                            {
                                User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                              //  emails.Add(secondary);
                              //  content.Add(Messages.groupTaskAddition(newobj, secondary));

                                data.GroupTaskDetailsId = newobj.Id.ToString();
                                General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());

                                gttl.AddGroupTask_Users(new GroupTask_User()
                                {
                                    UserId = SecondaryLead.Value,
                                    GroupTaskDetailsId = newobj.Id,
                                    IsActive = 1,
                                    LeadRole = (int)Enums.GroupTaskLead.Secondary
                                }, de);
                            }
                            de.SaveChanges();
                            if (newobj.EndDate < newobj.StartDate)
                            {
                                if (divisionId != -1)
                                {
                                    return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Enddate must be greater than Startdate." });

                                }

                                if (deptId != -1)
                                {
                                    return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Enddate must be greater than Startdate.", way = way });
                                }
                                return RedirectToAction("displayEmployee", "Utilities", new { message = "Enddate must be greater than Startdate." });

                            }
                            int flag1 = 0;
                            List<User> trainee1 = new UserBL().getTraineesList();

                            foreach (var item in trainee1)
                            {
                                if (Request.Form[item.Id.ToString()] != null)
                                {
                                    flag1++;

                                  // emails.Add(item);
                                  // content.Add(Messages.groupTaskAddition(newobj, item));
                                    data.GroupTaskDetailsId = newobj.Id.ToString();
                                    General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());


                                    gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = newobj.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });
                                }
                            }

                            if (days == 30)
                                dt = dt.AddMonths(1);
                            else if (days == 365)
                                dt = dt.AddYears(1);
                            else
                                dt = dt.AddDays(days);
                            //dt = dt.AddDays(days);


                        }

                    }

                    //if (flag == 0)
                    //{
                    //    if (divisionId != -1)
                    //    {
                    //        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid =General_Purpose.EncryptId((divisionId)), message = "No Employee selected.Group task has not been assigned" });

                    //    }

                    //    if (deptId != -1)
                    //    {
                    //        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid =General_Purpose.EncryptId((deptId)), message = "No Employee selected.Group task has not been assigned" });
                    //    }
                    //    return RedirectToAction("displayEmployee", "Utilities", new { message = "No Employee selected.Group task has not been assigned" });
                    //}

                    Communication.sendMessage(content, emails, Messages.groupTaskSlackMessage(groupTasks_Details.GroupTask.Name), groupTasks_Details.SlackChannel);
                    if (divisionId != -1)
                    {
                        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid = General_Purpose.EncryptId(divisionId), message = "Group task has been assigned successfully." });

                    }

                    if (deptId != -1)
                    {
                        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid = General_Purpose.EncryptId(deptId), message = "Group task has been assigned successfully.", way = way });
                    }
                    return RedirectToAction("displayEmployee", "Utilities", new { message = "Group task has been assigned successfully." });

                }
                return Content("Permission Denied");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult addTraineeGroupTaskFromIndex(string Time, GroupTasks_Details groupTasks_Details, int? SecondaryLead, int? PrimaryLead, double? cost, int? freqDays, int departmentId = -1, int divisionId = -1, int days = -1, string FeqEndingDate = "", List<string> Employees = null, string NewGroupTask = "", int DivId = -1,string GroupStudyName="",int CourseId=-1,int TaskId=-1)
        {
            try
            {
                if (Request.Form["GroupStudy"] != null)
                {
                    if (string.IsNullOrEmpty(GroupStudyName))
                    {
                        return RedirectToAction("Index", "Auth", new { message = "Group Study Name is required to create Group Study " });
                    }
                    else if (CourseId==-1)
                    {
                        return RedirectToAction("Index", "Auth", new { message = "Course must be selected to create Group Study " });
                    }else if (TaskId == -1)
                    {
                        return RedirectToAction("Index", "Auth", new { message = "Task must be selected to create Group Study " });
                    }
                }
                    //DatabaseEntities de = new DatabaseEntities();
                    if (Employees == null)
                    Employees = new List<string>();
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (groupTasks_Details.GroupTaskId == 0)
                {
                    GroupTaskBL gtbl = new GroupTaskBL();
                    int adminid = logedinuser.Role;

                    if (DivId != -1)
                    {
                        GroupTask groupTask = new GroupTask();
                        User man = new UserBL().getManagerList().Where(x => x.DivisionId.HasValue && x.IsActive == 1 && x.DivisionId == DivId).FirstOrDefault();
                        groupTask.IsActive = 1;
                        if (man == null)
                        {

                            
                            return RedirectToAction("Index", "Auth", new { message = "Group task couldn't be created because there is no Manager exists in this Division" });

                        }
                        if (gtbl.getGroupTasksList().Where(x => x.Name.ToLower() == NewGroupTask.ToLower() && x.User.DivisionId == man.DivisionId).ToList().Count() > 0)
                        {

                            
                            return RedirectToAction("Index", "Auth", new { message = "Name already exists. Couldn't add the group task." });

                        }

                        groupTask.UserId = man.Id;
                        groupTask.Name = NewGroupTask;
                        groupTask.DivisionId = man.DivisionId;
                        groupTasks_Details.GroupTaskId = new GroupTaskBL().AddGroupTasks(groupTask);

                    }
                }

                List<User> emails = new List<User>();
                List<string> content = new List<string>();
                //if (AuthenticateUser() == false)
                //{
                //    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                //}
                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays.Value;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }
                }


                GroupTask tasks = new GroupTaskBL().getGroupTasksList().Where(x => x.Id == groupTasks_Details.GroupTaskId.Value).FirstOrDefault();// task.GroupTask;

                double ceu = 0;
                double hours = 0;
                double totalCost = 0;


                int role = logedinuser.Role;
                if (role == (int)Enums.Role.Manager || role == (int)Enums.Role.Cordinator || role == (int)(Enums.Role.Admin))
                {
                    int id = logedinuser.Id;
                    GroupTasks_DetailsBL gtdl = new GroupTasks_DetailsBL();
                    GroupTask_UserBL gttl = new GroupTask_UserBL();

                    DatabaseEntities de = new DatabaseEntities();
                    //if (role != (int)(Enums.Role.Admin))
                    groupTasks_Details.CreatedBy = id;
                    groupTasks_Details.IsActive = 1;
                    groupTasks_Details.Status = 0;

                    if (tasks.GroupTask_Task.Count > 0)
                        foreach (var item in tasks.GroupTask_Task)
                        {
                            ceu = item.Task.CEU != null ? item.Task.CEU.Value : 0;
                            hours = item.Task.Hours != null ? item.Task.Hours.Value : 0;
                            totalCost = item.Task.Cost_ != null ? item.Task.Cost_.Value : 0;
                        }

                    if (groupTasks_Details.Hours == null)
                    {
                        groupTasks_Details.Hours = hours;
                    }
                    if (groupTasks_Details.CEU == null)
                    {
                        groupTasks_Details.CEU = ceu;
                    }
                    if (groupTasks_Details.Cost == null)
                    {
                        groupTasks_Details.Cost = totalCost;
                    }
                    if (cost.HasValue)
                    {
                        groupTasks_Details.Cost = cost.Value;
                    }
                    ////////////////////////
                    if (days != -1)
                    {
                        groupTasks_Details.EndDate = groupTasks_Details.StartDate;
                        groupTasks_Details.RepeatTime = days;
                    }
                    else
                    {
                        if (groupTasks_Details.EndDate == null)
                        {

                            return RedirectToAction("Index", "Auth", new { message = "Group Task couldn't be assigned because End date was not entered." });

                        }
                        groupTasks_Details.EndDate = groupTasks_Details.EndDate.Value;
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                        }

                        DateTime drt = new DateTime(groupTasks_Details.EndDate.Value.Year, groupTasks_Details.EndDate.Value.Month, groupTasks_Details.EndDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                        groupTasks_Details.EndDate = drt;
                    }
                    if (days == -1)
                    {
                        groupTasks_Details.CreatedAt = DateTime.Now;
                        groupTasks_Details.Id = gtdl.AddGroupTasks_Detailss(groupTasks_Details);

                       

                        groupTasks_Details.GroupTask = new GroupTaskBL().getGroupTasksById(groupTasks_Details.GroupTaskId.Value);

                        if (PrimaryLead.HasValue)
                        {
                            User primary = new UserBL().getUsersById(PrimaryLead.Value);

                            //Make Group Task a Group Study
                            if (Request.Form["GroupStudy"] != null)
                            {
                                General_Purpose.CreateGroupStudy(groupTasks_Details.Id, GroupStudyName, primary.Id, CourseId, TaskId, de);

                            }
                            //Ends

                            emails.Add(primary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, primary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = PrimaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Primary
                            }, de);
                        }
                        if (SecondaryLead.HasValue)
                        {
                            User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                            emails.Add(secondary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, secondary));
                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = SecondaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Secondary
                            }, de);
                        }
                        de.SaveChanges();
                        if (groupTasks_Details.EndDate < groupTasks_Details.StartDate)
                        {

                            return RedirectToAction("Index", "Auth", new { message = "End date must be greater than Startdate." });

                        }
                        int flag = 0;
                        // List<User> trainee = new UserBL().getTraineesList();

                        foreach (var obj in Employees)
                        {
                            User item = new UserBL().getUsersById(Convert.ToInt32(obj));

                            flag++;

                            emails.Add(item);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, item));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());


                            gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });

                        }
                    }
                    else
                    {
                        if (FeqEndingDate == "")
                        {

                            return RedirectToAction("Index", "Auth", new { message = "Group Task has not been assigned because you have not set frequency ending date." });

                        }
                        DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                        if (FEndingDate < Convert.ToDateTime(groupTasks_Details.StartDate))
                        {

                            return RedirectToAction("Index", "Auth", new { message = "Group Task has not been assigned because frequency ending date must be greater than  task's start." });

                        }
                        groupTasks_Details.CreatedAt = DateTime.Now;


                        //Make Group Task a Group Study
                        if (Request.Form["GroupStudy"] != null)
                        {
                            groupTasks_Details.CourseId = CourseId;
                        }



                        int grptaskdetId = gtdl.AddGroupTasks_Detailss(groupTasks_Details);

                        groupTasks_Details.GroupTask = new GroupTaskBL().getGroupTasksById(groupTasks_Details.GroupTaskId.Value);

                        if (PrimaryLead.HasValue)
                        {
                            User primary = new UserBL().getUsersById(PrimaryLead.Value);
                            //Make Group Task a Group Study
                            if (Request.Form["GroupStudy"] != null)
                            {
                                General_Purpose.CreateGroupStudy(grptaskdetId, GroupStudyName, primary.Id, CourseId, TaskId, de);

                            }
                            //Ends
                            emails.Add(primary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, primary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());


                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = PrimaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Primary
                            }, de);
                        }
                        if (SecondaryLead.HasValue)
                        {
                            User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                            emails.Add(secondary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, secondary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());


                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = SecondaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Secondary
                            }, de);
                        }
                        de.SaveChanges();
                        if (groupTasks_Details.EndDate < groupTasks_Details.StartDate)
                        {

                            return RedirectToAction("Index", "Auth", new { message = "Enddate must be greater than Startdate." });

                        }
                        int flag = 0;
                        //List<User> trainee = new UserBL().getTraineesList();

                        foreach (var obj in Employees)
                        {
                            User item = new UserBL().getUsersById(Convert.ToInt32(obj));
                            flag++;

                            emails.Add(item);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, item));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });

                        }

                        DateTime startDate1 = groupTasks_Details.StartDate.Value;
                        DateTime dt = groupTasks_Details.StartDate.Value.AddDays(days);
                        int grptskid = (int)groupTasks_Details.GroupTaskId;
                        while (FEndingDate.AddDays(1) > dt)
                        {
                            GroupTasks_Details newobj = new GroupTasks_Details()
                            {
                                Hours = groupTasks_Details.Hours,
                                CEU = groupTasks_Details.CEU,
                                StartDate = dt,
                                EndDate = dt,
                                Grade = groupTasks_Details.Grade,
                                CompletionDate = groupTasks_Details.CompletionDate,
                                IsActive = groupTasks_Details.IsActive,
                                Notes = groupTasks_Details.Notes,
                                GroupTaskId = groupTasks_Details.GroupTaskId,
                                Status = groupTasks_Details.Status,
                                Cost = groupTasks_Details.Cost,
                                Priority = groupTasks_Details.Priority,
                                SlackChannel = groupTasks_Details.SlackChannel,
                                CreatedBy = groupTasks_Details.CreatedBy,
                                TicketSortBy = groupTasks_Details.TicketSortBy,
                                ParentID = grptaskdetId,
                                RepeatTime = groupTasks_Details.RepeatTime,
                                RepeatDeadline = groupTasks_Details.RepeatDeadline,
                                CreatedAt = DateTime.Now



                            };
                            //Make Group Task a Group Study
                            if (Request.Form["GroupStudy"] != null)
                            {
                                newobj.CourseId = CourseId;
                            }
                            new GroupTasks_DetailsBL().AddGroupTasks_Detailss(newobj);
                            // new GroupTasks_DetailsBL().AddGroupTasks_Detailss(groupTasks_Details);

                            newobj.GroupTask = new GroupTaskBL().getGroupTasksById(newobj.GroupTaskId.Value);

                            if (PrimaryLead.HasValue)
                            {
                                User primary = new UserBL().getUsersById(PrimaryLead.Value);
                                //Make Group Task a Group Study
                                if (Request.Form["GroupStudy"] != null)
                                {
                                    General_Purpose.CreateGroupStudy(newobj.Id, GroupStudyName, primary.Id, CourseId, TaskId, de);

                                }
                                //Ends
                                // emails.Add(primary);
                                // content.Add(Messages.groupTaskAddition(newobj, primary));
                                data.GroupTaskDetailsId = newobj.Id.ToString();
                                General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());

                                gttl.AddGroupTask_Users(new GroupTask_User()
                                {
                                    UserId = PrimaryLead.Value,
                                    GroupTaskDetailsId = newobj.Id,
                                    IsActive = 1,
                                    LeadRole = (int)Enums.GroupTaskLead.Primary
                                }, de);
                            }
                            if (SecondaryLead.HasValue)
                            {
                                User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                                //  emails.Add(secondary);
                                //  content.Add(Messages.groupTaskAddition(newobj, secondary));

                                data.GroupTaskDetailsId = newobj.Id.ToString();
                                General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());

                                gttl.AddGroupTask_Users(new GroupTask_User()
                                {
                                    UserId = SecondaryLead.Value,
                                    GroupTaskDetailsId = newobj.Id,
                                    IsActive = 1,
                                    LeadRole = (int)Enums.GroupTaskLead.Secondary
                                }, de);
                            }
                            de.SaveChanges();
                            if (newobj.EndDate < newobj.StartDate)
                            {

                                return RedirectToAction("Index", "Auth", new { message = "Enddate must be greater than Startdate." });

                            }
                            int flag1 = 0;
                          //  List<User> trainee1 = new UserBL().getTraineesList();

                            foreach (var obj in Employees)
                            {
                                User item = new UserBL().getUsersById(Convert.ToInt32(obj));
                                flag1++;

                                    // emails.Add(item);
                                    // content.Add(Messages.groupTaskAddition(newobj, item));
                                    data.GroupTaskDetailsId = newobj.Id.ToString();
                                    General_Purpose.SendPushNotification(item.Player_Id, Messages.groupTaskAddition(groupTasks_Details, item, 1), "Message from zuptu", data, item.Id.ToString());


                                    gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = newobj.Id, UserId = item.Id, LeadRole = 3, IsActive = 1 });
                                
                            }

                            if (days == 30)
                                dt = dt.AddMonths(1);
                            else if (days == 365)
                                dt = dt.AddYears(1);
                            else
                                dt = dt.AddDays(days);
                            //dt = dt.AddDays(days);


                        }

                    }

                    //if (flag == 0)
                    //{
                    //    if (divisionId != -1)
                    //    {
                    //        return RedirectToAction("displayDivisionDetails", "Utilities", new { sid =General_Purpose.EncryptId((divisionId)), message = "No Employee selected.Group task has not been assigned" });

                    //    }

                    //    if (deptId != -1)
                    //    {
                    //        return RedirectToAction("displayDepartmentDetails", "Utilities", new { sid =General_Purpose.EncryptId((deptId)), message = "No Employee selected.Group task has not been assigned" });
                    //    }
                    //    return RedirectToAction("displayEmployee", "Utilities", new { message = "No Employee selected.Group task has not been assigned" });
                    //}

                    Communication.sendMessage(content, emails, Messages.groupTaskSlackMessage(groupTasks_Details.GroupTask.Name), groupTasks_Details.SlackChannel);

                    return RedirectToAction("Index", "Auth", new { message = "Group task has been assigned successfully." });

                }
                return Content("Permission Denied");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult TaskToGroupTask(int Status, string Time, int uId, string taskname, string Notes, string StartDate, string EndDate, int? Cost, int? Hours, int? CEU, int? Priority, int? SecondaryLead, int? PrimaryLead, int deptId = -1, string message = "", int divisionId = -1, string v = "", string way = "", string SlackChannel = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                int grptaskid = 0;
                GroupTaskBL gtbl = new GroupTaskBL();
                int adminid = logedinuser.Role;

                if (gtbl.getGroupTasksList().Where(x => x.Name == taskname).ToList().Count() > 0)
                {
                    return RedirectToAction("DisplayGroupTask", new { message = "Name already exists. Couldn't add the group task." });
                }
                else
                {
                    if (divisionId != -1)
                    {
                        GroupTask groupTask = new GroupTask();
                        User man = new UserBL().getManagerList().Where(x => x.DivisionId.HasValue && x.IsActive == 1 && x.DivisionId == divisionId).FirstOrDefault();
                        groupTask.IsActive = 1;
                        if (man == null)
                        {
                            User itmu = new UserBL().getUsersById(uId);
                            if (itmu.Role == 3)
                            {
                                return RedirectToAction("taskDetails", "Task", new { v = v, isModal = "01", message = "Group task couldn't be created because there is no Manager exists in this Division" });

                            }
                            else
                            {
                                return RedirectToAction("taskDetails", "Manager", new { v = v, isModal = "01", message = "Group task couldn't be created because there is no Manager exists in this Division" });

                            }

                        }
                        groupTask.UserId = man.Id;
                        groupTask.Name = taskname;
                        groupTask.DivisionId = man.DivisionId;
                        grptaskid = new GroupTaskBL().AddGroupTasks(groupTask);
                        // return RedirectToAction("displayDivisionDetails", "Utilities", new { sid =General_Purpose.EncryptId((divisionId)), message = "Group task has been added Successfully" });

                    }
                    GroupTasks_Details groupTasks_Details = new GroupTasks_Details()
                    {
                        CEU = CEU,
                        Cost = Cost,
                        EndDate = Convert.ToDateTime(EndDate),
                        Hours = Hours,
                        Notes = Notes,
                        Priority = Priority,
                        StartDate = Convert.ToDateTime(StartDate),
                        SlackChannel = SlackChannel

                    };
                    if (grptaskid != 0)
                        groupTasks_Details.GroupTaskId = grptaskid;



                    List<User> emails = new List<User>();
                    List<string> content = new List<string>();
                    if (AuthenticateUser() == false)
                    {
                        return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                    }



                    GroupTask tasks = new GroupTaskBL().getGroupTasksList().Where(x => x.Id == groupTasks_Details.GroupTaskId.Value).FirstOrDefault();// task.GroupTask;

                    double ceu = 0;
                    double hours = 0;
                    double totalCost = 0;


                    int role = logedinuser.Role;
                    if (role == (int)Enums.Role.Manager || role == (int)Enums.Role.Cordinator || role == (int)(Enums.Role.Admin))
                    {
                        int id = logedinuser.Id;
                        GroupTasks_DetailsBL gtdl = new GroupTasks_DetailsBL();
                        GroupTask_UserBL gttl = new GroupTask_UserBL();


                        DatabaseEntities de = new DatabaseEntities();
                       // if (role != (int)(Enums.Role.Admin))
                            groupTasks_Details.CreatedBy = id;
                        groupTasks_Details.IsActive = 1;
                        groupTasks_Details.Status = Status;

                        if (tasks.GroupTask_Task.Count > 0)
                            foreach (var item in tasks.GroupTask_Task)
                            {
                                ceu = item.Task.CEU != null ? item.Task.CEU.Value : 0;
                                hours = item.Task.Hours != null ? item.Task.Hours.Value : 0;
                                totalCost = item.Task.Cost_ != null ? item.Task.Cost_.Value : 0;
                            }

                        if (groupTasks_Details.Hours == null)
                        {
                            groupTasks_Details.Hours = hours;
                        }
                        if (groupTasks_Details.CEU == null)
                        {
                            groupTasks_Details.CEU = ceu;
                        }
                        if (groupTasks_Details.Cost == null)
                        {
                            groupTasks_Details.Cost = totalCost;
                        }
                        if (Cost.HasValue)
                        {
                            groupTasks_Details.Cost = Cost.Value;
                        }

                        groupTasks_Details.EndDate = groupTasks_Details.EndDate.Value;
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                        }

                        DateTime drt = new DateTime(groupTasks_Details.EndDate.Value.Year, groupTasks_Details.EndDate.Value.Month, groupTasks_Details.EndDate.Value.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                        groupTasks_Details.EndDate = drt;
                        groupTasks_Details.CreatedAt = DateTime.Now;
                        groupTasks_Details.Id = gtdl.AddGroupTasks_Detailss(groupTasks_Details);
                        groupTasks_Details.GroupTask = new GroupTaskBL().getGroupTasksById(groupTasks_Details.GroupTaskId.Value);

                        if (PrimaryLead.HasValue)
                        {
                            User primary = new UserBL().getUsersById(PrimaryLead.Value);
                            emails.Add(primary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, primary));
                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(primary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, primary, 1), "Message from zuptu", data, primary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = PrimaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Primary
                            }, de);
                        }
                        if (SecondaryLead.HasValue)
                        {
                            User secondary = new UserBL().getUsersById(SecondaryLead.Value);
                            emails.Add(secondary);
                            content.Add(Messages.groupTaskAddition(groupTasks_Details, secondary));

                            data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                            General_Purpose.SendPushNotification(secondary.Player_Id, Messages.groupTaskAddition(groupTasks_Details, secondary, 1), "Message from zuptu", data, secondary.Id.ToString());

                            gttl.AddGroupTask_Users(new GroupTask_User()
                            {
                                UserId = SecondaryLead.Value,
                                GroupTaskDetailsId = groupTasks_Details.Id,
                                IsActive = 1,
                                LeadRole = (int)Enums.GroupTaskLead.Secondary
                            }, de);
                        }
                        de.SaveChanges();
                        //List<User> trainee = new UserBL().getTraineesList();
                        User itemu = new UserBL().getUsersById(uId);



                        if (itemu.Id.ToString() != null)
                        {
                            if (itemu.Role != 3)
                            {
                                emails.Add(itemu);
                                content.Add(Messages.groupTaskAddition(groupTasks_Details, itemu));
                                data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                                General_Purpose.SendPushNotification(itemu.Player_Id, Messages.groupTaskAddition(groupTasks_Details, itemu, 1), "Message from zuptu", data, itemu.Id.ToString());


                                gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = itemu.Id, LeadRole = 2, IsActive = 1 });

                            }
                            else
                            {
                                emails.Add(itemu);
                                content.Add(Messages.groupTaskAddition(groupTasks_Details, itemu));

                                data.GroupTaskDetailsId = groupTasks_Details.Id.ToString();
                                General_Purpose.SendPushNotification(itemu.Player_Id, Messages.groupTaskAddition(groupTasks_Details, itemu, 1), "Message from zuptu", data, itemu.Id.ToString());


                                gttl.AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = groupTasks_Details.Id, UserId = itemu.Id, LeadRole = 3, IsActive = 1 });

                            }
                        }

                        Communication.sendMessage(content, emails, Messages.groupTaskSlackMessage(groupTasks_Details.GroupTask.Name), groupTasks_Details.SlackChannel);



                        int taskId;
                        string str = "";
                        taskId = General_Purpose.DecryptId((v));
                        if (taskId == 0)
                        {
                            str = HttpUtility.UrlEncode(v);
                            taskId = General_Purpose.DecryptId((str));
                        }
                        User_Task task = new User_TaskBL().getUser_TasksById(taskId);

                        foreach (var item in task.TaskComments)
                        {
                            if (item.ParentId == null)
                            {


                                List<TaskComment> teskcomnt = new TaskCommentBL().getTaskCommentsList().Where(x => x.ParentId == item.Id).ToList();

                                if (teskcomnt.Count() > 0)
                                {
                                    GroupTaskComment grpcmnt1 = new GroupTaskComment()
                                    {
                                        Comment = item.Comment,
                                        Date = item.Date,
                                        IsActive = item.IsActive,
                                        File = item.File,
                                        FileName = item.FileName,
                                        UserId = item.UserId,
                                        GroupTaskDetailsId = groupTasks_Details.Id,

                                    };
                                    //Additional
                                    GroupTasks_Details gtd5 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)grpcmnt1.GroupTaskDetailsId);
                                    GroupTask gt5 = new GroupTaskBL().getGroupTasksById((int)gtd5.GroupTaskId);
                                    User us5 = new UserBL().getUsersById((int)gt5.UserId);
                                    grpcmnt1.CompanyId = Convert.ToInt32(logedinuser.Company);
                                    grpcmnt1.GTaskStartDate = gtd5.StartDate;
                                    grpcmnt1.GTaskEndDate = gtd5.EndDate;
                                    //  grpcmnt1.DepartmentId = (int)gtd5.GroupTask.User.DivisionId;
                                    grpcmnt1.DivisionId = (int)us5.DivisionId;
                                    grpcmnt1.CreatedBy = logedinuser.Id;
                                    new GroupTaskCommentBL().AddGroupTaskComments(grpcmnt1);

                                    foreach (var item2 in teskcomnt)
                                    {
                                        GroupTaskComment grpcmnt = new GroupTaskComment()
                                        {
                                            Comment = item2.Comment,
                                            Date = item2.Date,
                                            IsActive = item2.IsActive,
                                            File = item2.File,
                                            FileName = item2.FileName,
                                            UserId = item2.UserId,
                                            GroupTaskDetailsId = groupTasks_Details.Id,
                                            ParentId = grpcmnt1.Id

                                        };
                                        //Additional
                                        GroupTasks_Details gtd6 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)grpcmnt.GroupTaskDetailsId);
                                        GroupTask gt6 = new GroupTaskBL().getGroupTasksById((int)gtd6.GroupTaskId);
                                        User us6 = new UserBL().getUsersById((int)gt6.UserId);
                                        grpcmnt.CompanyId = Convert.ToInt32(logedinuser.Company);
                                        grpcmnt.GTaskStartDate = gtd6.StartDate;
                                        grpcmnt.GTaskEndDate = gtd6.EndDate;
                                        //  grpcmnt.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                                        grpcmnt.DivisionId = (int)us6.DivisionId;
                                        grpcmnt.CreatedBy = logedinuser.Id;
                                        new GroupTaskCommentBL().AddGroupTaskComments(grpcmnt);
                                    }
                                }
                                else
                                {
                                    GroupTaskComment grpcmnt = new GroupTaskComment()
                                    {
                                        Comment = item.Comment,
                                        Date = item.Date,
                                        IsActive = item.IsActive,
                                        File = item.File,
                                        FileName = item.FileName,
                                        UserId = item.UserId,
                                        GroupTaskDetailsId = groupTasks_Details.Id,
                                        ParentId = item.ParentId
                                    };
                                    //Additional
                                    GroupTasks_Details gtd7 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)grpcmnt.GroupTaskDetailsId);
                                    GroupTask gt7 = new GroupTaskBL().getGroupTasksById((int)gtd7.GroupTaskId);
                                    User us7 = new UserBL().getUsersById((int)gt7.UserId);
                                    grpcmnt.CompanyId = Convert.ToInt32(logedinuser.Company);
                                    grpcmnt.GTaskStartDate = gtd7.StartDate;
                                    grpcmnt.GTaskEndDate = gtd7.EndDate;
                                    //  grpcmnt.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                                    grpcmnt.DivisionId = (int)us7.DivisionId;
                                    grpcmnt.CreatedBy = logedinuser.Id;
                                    new GroupTaskCommentBL().AddGroupTaskComments(grpcmnt);
                                }

                            }
                        }

                        foreach (var tsktodo in task.Task_Ticket)
                        {
                            GroupTask_Ticket grptck1 = new GroupTask_Ticket()
                            {
                                Name = tsktodo.Name,
                                CreationDatetime = tsktodo.CreationDatetime,
                                CreatedBy = tsktodo.CreatedBy,
                                GroupTaskDetails_Id = groupTasks_Details.Id,
                                CompletionDatetime = tsktodo.CompletionDatetime,
                                CompletedByUser = tsktodo.CompletedByUser,
                                IsActive = tsktodo.IsActive,
                                StartDate = tsktodo.StartDate,
                                EndDate = tsktodo.EndDate,
                                Ticket_File = tsktodo.Ticket_File,
                                Ticket_FileName = tsktodo.Ticket_FileName,
                                Position = tsktodo.Position,


                            };
                            //Additional
                            GroupTasks_Details gtd5 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)grptck1.GroupTaskDetails_Id);
                            GroupTask gt5 = new GroupTaskBL().getGroupTasksById((int)gtd5.GroupTaskId);
                            User us5 = new UserBL().getUsersById((int)gt5.UserId);
                            grptck1.CompanyId = Convert.ToInt32(logedinuser.Company);
                            grptck1.GTaskStartDate = gtd5.StartDate;
                            grptck1.GTaskEndDate = gtd5.EndDate;
                          //  grptck1.DepartmentId = (int)gtd5.GroupTask.User.DivisionId;
                            grptck1.DivisionId = (int)us5.DivisionId;
                            new GroupTask_TicketBL().AddGroupTask_Tickets(grptck1);

                        }

                        User_Task usertask = new User_TaskBL().getUser_TasksById(taskId);
                        new User_TaskBL().DeleteUser_Tasks(usertask.Id);



                        return RedirectToAction("grouptaskDetails", new { v = General_Purpose.EncryptId(groupTasks_Details.Id), isModal = "0", message = "Group Task has been added." });
                    }
                    return Content("Permission Denied");


                }
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        #endregion GroupTask


        #region Ajax

        [HttpPost]
        public string GetDocMFiles()
        {
            List<Models.File> files = new FileBL().getFileListByLogedinUser();
            List<FileDTO> lst = new List<FileDTO>();
            foreach (var x in files)
            {
                FileDTO obj = new FileDTO()
                {
                    Id = x.Id,
                    FilePath = x.FilePath, 
                    Name = x.Name
                };

                lst.Add(obj);
            }
            return JsonConvert.SerializeObject(lst, Formatting.Indented,
                          new JsonSerializerSettings()
                          {
                              ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                          });
        }



        [HttpPost]
        public String GetUserProfileModalDTOs(int Id, int active = -1)
        {
            User user = new User();
            if (active == -1)
            {
                user = new UserBL().getUsersById(Id);
            }
            else //work done by Waqas, this condition will triggered whenever there is an ajax call from ViewStructure.schtml page, in order to show users details
            {
                user = new UserBL().GetAllUserById(Id);
            }

            if(user == null)
            {
                return JsonConvert.SerializeObject(null, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
            }

            string division = "";
            string designation = "";

            if (user.Role == 1)
            {
                designation = "Administrator";
                division = "null";
            }
            else if (user.Role == 2)
            {
                designation = "Manager";
                division = user.Division.Name;
            }
            else
            {
                designation = "Employee";
                division = user.Department.Name;
            }

            if (user.Image == null || user.Image == "")
            {
                user.Image = "../Content/Images/ig.png";
            }
            else
            {
                user.Image = General_Purpose.RefreshImageSignature(user.Id);
            }

            if (user.PhoneNumber == null || user.PhoneNumber == "")
            {
                user.PhoneNumber = "null";
            }

            if (user.Email == null || user.Email == "")
            {
                user.Email = "null";
            }

            UserDTO udto = new UserDTO()
            {
                Id = user.Id,
                Company = user.Company.Name,
                Designation = designation,
                Profile = user.Image,
                Name = user.FirstName + " " + user.LastName,
                Division = division,
                Contact = user.PhoneNumber,
                Email = user.Email,
                IsActive = (int)user.IsActive
            };

            return JsonConvert.SerializeObject(udto, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        [HttpPost]
        public string getModalDTOs()
        {
            return JsonConvert.SerializeObject(logedinuser.Role, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        [HttpPost]
        public string getDivisionDTOs()
        {
            List<Division> alldivisions = new List<Division>();
            List<DivisionDTO> alldivisionDTOs = new List<DivisionDTO>();

            if (logedinuser.Role == 1)
            {
                alldivisions = new DivisionBL().getDivisionsList().ToList();

            }
            else if (logedinuser.Role == 2)
            {
                User user = new UserBL().getUsersById(logedinuser.Id);
                Division div = new DivisionBL().getDivisionsById((int)user.DivisionId);
                alldivisions.Add(div);
            }
           
            
            foreach (Division d in alldivisions)
            {
                DivisionDTO dTo = new DivisionDTO()
                {
                    Id = d.Id,
                    Name = d.Name,
                    CompanyID = d.CompanyID,
                    IsActive = d.IsActive,
                    SessionRole = logedinuser.Role
                };
                alldivisionDTOs.Add(dTo);
            }

            return JsonConvert.SerializeObject(alldivisionDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }



        [HttpPost]
        public string getWorktypeDTOs(int DivisionID = -1, string EnDivisionID = "", int DepartmentID = -1)
        {

            List<Worktype> wt = new List<Worktype>();
            if (DivisionID != -1)
            {
                wt = new WorktypeBL().getWorktypesList().Where(x => x.DivisionID == DivisionID).ToList();
            }
            if (EnDivisionID != "")
            {
                wt = new WorktypeBL().getWorktypesList().Where(x => x.DivisionID == General_Purpose.DecryptId((EnDivisionID))).ToList();
            }
            if (DepartmentID != -1)
            {
                Department dep = new DepartmentBL().getDepartmentsById(DepartmentID);
                wt = new WorktypeBL().getWorktypesList().Where(x => x.DivisionID == dep.DivisionID).ToList();
            }


            List<TaskDTO> wtype = new List<TaskDTO>();

            foreach (Worktype d in wt)
            {
                TaskDTO dTo = new TaskDTO()
                {
                    Id = d.Id,
                    Name = d.Name,
                    SessionRole = logedinuser.Role

                };
                wtype.Add(dTo);
            }

            return JsonConvert.SerializeObject(wtype, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }





        [HttpPost]
        public string getDepartmentDTOs(string divisionId)
        {
            

                List<Department> alldepartments = new List<Department>();
            if (divisionId != "")
                alldepartments = new DepartmentBL().getDepartmentsList().Where(x => x.DivisionID == Convert.ToInt32(divisionId)).ToList();
            List<DepartmentDTO> alldepartmentDTOs = new List<DepartmentDTO>();

            foreach (Department d in alldepartments)
            {
                DepartmentDTO dTo = new DepartmentDTO()
                {
                    Id = d.Id,
                    Name = d.Name,
                    DivisionID = d.DivisionID,
                    IsActive = d.IsActive,
                    SessionRole = logedinuser.Role
                };
                alldepartmentDTOs.Add(dTo);
            }

            return JsonConvert.SerializeObject(alldepartmentDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        [HttpPost]
        public string getTaskDTOs(string departmentId)
        {
            List<TaskDTO> alltaskDTOs = new List<TaskDTO>();
            if (departmentId == "" || departmentId == null)
            {
                return JsonConvert.SerializeObject(alltaskDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
            }
            if (departmentId == "-196")
            {
                List<Department> alldept = new DepartmentBL().getDepartmentsList();
                foreach (Department dep in alldept)
                {
                    List<Task> alltasks = new TaskBL().getAllTasksList().Where(x => x.DepartmentID == Convert.ToInt32(dep.Id) && x.IsPrivate == 0 && x.IsActive == 1).ToList();


                    foreach (Task d in alltasks)
                    {
                        TaskDTO dTo = new TaskDTO()
                        {
                            Id = d.Id,
                            Name = d.Name,
                            TaskTypeID = d.TaskTypeID,
                            IsActive = d.IsActive,
                            DivisionId = d.DivisionId,
                            Description = d.Description,
                            Cost_ = d.Cost_,
                            Hours = d.Hours,
                            CEU = d.CEU,
                            DepartmentID = d.DepartmentID,
                            File = d.File,
                            UserId = d.UserId,
                            IsPrivate = d.IsPrivate,
                            SessionRole = logedinuser.Role
                        };
                        alltaskDTOs.Add(dTo);
                    }
                }
            }
            else
            {
                List<Task> alltasks = new TaskBL().getAllTasksList().Where(x => x.DepartmentID == Convert.ToInt32(departmentId) && x.IsPrivate == 0 && x.IsActive == 1).ToList();


                foreach (Task d in alltasks.OrderBy(x => x.Name))
                {
                    TaskDTO dTo = new TaskDTO()
                    {
                        Id = d.Id,
                        Name = d.Name,
                        TaskTypeID = d.TaskTypeID,
                        IsActive = d.IsActive,
                        DivisionId = d.DivisionId,
                        Description = d.Description,
                        Cost_ = d.Cost_,
                        Hours = d.Hours,
                        CEU = d.CEU,
                        DepartmentID = d.DepartmentID,
                        File = d.File,
                        UserId = d.UserId,
                        IsPrivate = d.IsPrivate,
                        SessionRole = logedinuser.Role
                    };
                    alltaskDTOs.Add(dTo);
                }
            }


            return JsonConvert.SerializeObject(alltaskDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }
          [HttpPost]
        public string getGtTaskDTOs(string divisionId="")
        {
            List<TaskDTO> alltaskDTOs = new List<TaskDTO>();
            if (string.IsNullOrEmpty(divisionId))
            {
                return JsonConvert.SerializeObject(alltaskDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
            }
            
                List<Task> alltasks = new TaskBL().getAllTasksList().Where(x => x.Department.DivisionID==Convert.ToInt32(divisionId) && x.IsPrivate == 0 && x.IsActive == 1).ToList();


                foreach (Task d in alltasks.OrderBy(x => x.Id))
                {
                    TaskDTO dTo = new TaskDTO()
                    {
                        Id = d.Id,
                        Name = d.Name,
                        TaskTypeID = d.TaskTypeID,
                        IsActive = d.IsActive,
                        DivisionId = d.DivisionId,
                        Description = d.Description,
                        Cost_ = d.Cost_,
                        Hours = d.Hours,
                        CEU = d.CEU,
                        DepartmentID = d.DepartmentID,
                        File = d.File,
                        UserId = d.UserId,
                        IsPrivate = d.IsPrivate,
                        SessionRole = logedinuser.Role
                    };
                    alltaskDTOs.Add(dTo);
                }
            


            return JsonConvert.SerializeObject(alltaskDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }


        [HttpPost]
        public string getTaskForDivisinDTOs(string DivisionId)
        {
            List<TaskDTO> alltaskDTOs = new List<TaskDTO>();

            if (DivisionId == "-173")
            {
                List<Division> alldiv = new DivisionBL().getDivisionsList();
                foreach (Division div in alldiv)
                {
                    foreach (Department department in div.Departments.Where(x => x.IsActive == 1).ToList())
                    {
                        foreach (var d in department.Tasks.Where(x => x.IsPrivate == 0 && x.IsActive == 1).ToList())
                        {
                            TaskDTO dTo = new TaskDTO()
                            {
                                Id = d.Id,
                                Name = d.Name,
                                TaskTypeID = d.TaskTypeID,
                                IsActive = d.IsActive,
                                DivisionId = d.DivisionId,
                                Description = d.Description,
                                Cost_ = d.Cost_,
                                Hours = d.Hours,
                                CEU = d.CEU,
                                DepartmentID = d.DepartmentID,
                                File = d.File,
                                UserId = d.UserId,
                                IsPrivate = d.IsPrivate,
                                SessionRole = logedinuser.Role
                            };
                            alltaskDTOs.Add(dTo);
                        }
                    }
                }

            }
            else
            {
                Division div = new DivisionBL().getDivisionsById(Convert.ToInt32(DivisionId));

                foreach (Department department in div.Departments.Where(x => x.IsActive == 1).ToList())
                {
                    foreach (var d in department.Tasks.Where(x => x.IsPrivate == 0 && x.IsActive == 1).ToList())
                    {
                        TaskDTO dTo = new TaskDTO()
                        {
                            Id = d.Id,
                            Name = d.Name,
                            TaskTypeID = d.TaskTypeID,
                            IsActive = d.IsActive,
                            DivisionId = d.DivisionId,
                            Description = d.Description,
                            Cost_ = d.Cost_,
                            Hours = d.Hours,
                            CEU = d.CEU,
                            DepartmentID = d.DepartmentID,
                            File = d.File,
                            UserId = d.UserId,
                            IsPrivate = d.IsPrivate,
                            SessionRole = logedinuser.Role
                        };
                        alltaskDTOs.Add(dTo);
                    }
                }
            }


            return JsonConvert.SerializeObject(alltaskDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        [HttpPost]
        public string getEmployeeDTOs(int DepartmentId=-1, List<int> Worktype = null)
        {
            List<UserDTO> allemplDTOs = new List<UserDTO>();

            List<User> Empllist = new List<User>();
            if (Worktype != null)
            {
                foreach (int t in Worktype)
                {
                    List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DepartmentId == Convert.ToInt32(DepartmentId) && (x.User.Role == 3) && x.IsActive == 1)).ToList();
                    foreach (User_Worktype wt in user_wt)
                    {
                        int c = 0;
                        c = Empllist.Where(x => x.Id == wt.User.Id).Count();
                        if (c == 0)
                        {
                            Empllist.Add(wt.User);
                        }

                    }
                }


            }
            else
            {
                Empllist = new UserBL().getTraineesList().Where(x => x.DepartmentId == Convert.ToInt32(DepartmentId)).ToList();
            }

            foreach (User item in Empllist)
            {
                UserDTO obj = new UserDTO()
                {
                    Id=item.Id,
                    Name=item.FirstName +" "+item.LastName,
                    
                };
                allemplDTOs.Add(obj);
            }
            return JsonConvert.SerializeObject(allemplDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        [HttpPost]
        public string getUserDTO(string UType="",int DivisionId=-1, int DepartmentId = -1)
        {
            List<UserDTO> allemplDTOs = new List<UserDTO>();
            List<User> Userlist = new List<User>();
            if (UType == "1")
            {
                Userlist = new UserBL().getAdminList().ToList();
                
            }else if (UType == "2")
            {
                if(DivisionId!=-1)
                    Userlist = new UserBL().getManagerList().Where(x => x.DivisionId ==DivisionId).ToList();
            }else if (UType == "3")
            {
                if(DepartmentId!=-1)
                    Userlist = new UserBL().getTraineesList().Where(x=>x.DepartmentId==DepartmentId).ToList();
            }

            foreach (User item in Userlist)
            {
                UserDTO obj = new UserDTO()
                {
                    Id = item.Id,
                    Name = item.FirstName + " " + item.LastName,

                };
                allemplDTOs.Add(obj);
            }
            return JsonConvert.SerializeObject(allemplDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }



        [HttpPost]
        public string getPrimeLeadDTOs(int DivisionId=-1 , List<int> Worktype = null)
        {
            List<UserDTO> allemplDTOs = new List<UserDTO>();
            List<User> Empllist = new List<User>();

            if (Worktype != null)
            {
                foreach (int t in Worktype)
                {
                    List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DivisionId == Convert.ToInt32(DivisionId) && x.IsActive == 1 && x.User.IsActive==1)).ToList();
                    foreach (User_Worktype wt in user_wt)
                    {
                        int c = 0;
                        c = Empllist.Where(x => x.Id == wt.User.Id).Count();
                        if (c == 0)
                        {
                            Empllist.Add(wt.User);
                        }

                    }
                }


            }
            else
            {
                Empllist = new UserBL().getUsersList().Where(x => x.Role == 1 || x.DivisionId == Convert.ToInt32(DivisionId)).ToList();

            }
            string role = "";
            
            foreach (User item in Empllist)
            {
                if (item.Role == 1)
                {
                    role = "(Admin)";
                }
                else
                {
                    role = "(Manager)";
                }
                UserDTO obj = new UserDTO()
                {
                    Id = item.Id,
                    Name = item.FirstName + " " + item.LastName +" "+role,
                    SessionRole=item.Role

                };
                allemplDTOs.Add(obj);
            }
            return JsonConvert.SerializeObject(allemplDTOs, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }
        [HttpPost]
        public string getUserDTOs(string divisionId, string departmentId, string taskId, string assignmentvalue, List<int> Worktype = null)
        {
            List<UserDTO> alluserDTOs2 = new List<UserDTO>();
            if (taskId != "0")
            {
                Task task = new TaskBL().getTasksById(Convert.ToInt32(taskId));




                if (assignmentvalue == "assignManager")
                {
                    List<User> allmanagers = new List<User>();
                    if (Worktype != null)
                    {
                        foreach (int t in Worktype)
                        {
                            List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DivisionId == Convert.ToInt32(divisionId) && (x.User.Role == 2 || x.User.Role == 4) && x.IsActive == 1)).ToList();
                            foreach (User_Worktype wt in user_wt)
                            {
                                int c = 0;
                                c = allmanagers.Where(x => x.Id == wt.User.Id).Count();
                                if (c == 0)
                                {
                                    allmanagers.Add(wt.User);
                                }

                            }
                        }


                    }
                    else
                    {
                        allmanagers = new UserBL().getAllUsersList().Where(x => x.DivisionId == Convert.ToInt32(divisionId) && (x.Role == 2 || x.Role == 4) && x.IsActive == 1).ToList();

                    }
                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allmanagers.Where(x => x.IsActive == 1))
                    {
                        if (d.Id != task.UserId)
                        {
                            UserDTO dTo = new UserDTO()
                            {
                                Id = d.Id,
                                Name = d.FirstName + ' ' + d.LastName,
                                SessionRole = logedinuser.Role,
                                AssignUserRole = "Manager"
                            };
                            alluserDTOs.Add(dTo);
                        }

                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignAdmin")
                {
                    List<User> allmanagers = new List<User>();
                  
                        allmanagers = new UserBL().getUsersList().Where(x =>x.Role == 1 && x.IsActive == 1 && x.Id!=logedinuser.Id).ToList();

                    
                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allmanagers.Where(x => x.IsActive == 1))
                    {
                        if (d.Id != task.UserId)
                        {
                            UserDTO dTo = new UserDTO()
                            {
                                Id = d.Id,
                                Name = d.FirstName + ' ' + d.LastName,
                                SessionRole = logedinuser.Role,
                                AssignUserRole = "Admin"
                            };
                            alluserDTOs.Add(dTo);
                        }

                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignEmployee")
                {
                    List<User> allemployees = new List<User>();
                    if (Worktype != null)
                    {
                        foreach (int t in Worktype)
                        {
                            List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DepartmentId == Convert.ToInt32(departmentId) && x.User.Role == 3 && x.IsActive == 1)).ToList();
                            foreach (User_Worktype wt in user_wt)
                            {
                                int c = 0;
                                c = allemployees.Where(x => x.Id == wt.User.Id).Count();
                                if (c == 0)
                                {
                                    allemployees.Add(wt.User);
                                }


                            }
                        }


                    }
                    else
                    {
                        allemployees = new UserBL().getAllUsersList().Where(x => x.DepartmentId == Convert.ToInt32(departmentId) && x.Role == 3 && x.IsActive == 1).ToList();

                    }
                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allemployees.Where(x => x.IsActive == 1))
                    {
                        if (d.Id != task.UserId)
                        {
                            UserDTO dTo = new UserDTO()
                            {
                                Id = d.Id,
                                Name = d.FirstName + ' ' + d.LastName,
                                SessionRole = logedinuser.Role,
                                AssignUserRole = "Employee"
                            };
                            alluserDTOs.Add(dTo);
                        }
                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignToDepartment")
                {
                    TaskDTO dTo = new TaskDTO()
                    {
                        Id = task.Id,
                        Name = task.Name,
                        TaskTypeID = task.TaskTypeID,
                        IsActive = task.IsActive,
                        DivisionId = task.DivisionId,
                        Description = task.Description,
                        Cost_ = task.Cost_,
                        Hours = task.Hours,
                        CEU = task.CEU,
                        DepartmentID = task.DepartmentID,
                        File = "To Department",
                        UserId = task.UserId,
                        IsPrivate = task.IsPrivate,
                        SessionRole = logedinuser.Role,
                       // CourseId = Convert.ToInt32(task.CourseId)
                    };

                    return JsonConvert.SerializeObject(dTo, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignToDivision")
                {
                    TaskDTO dTo = new TaskDTO()
                    {
                        Id = task.Id,
                        Name = task.Name,
                        TaskTypeID = task.TaskTypeID,
                        IsActive = task.IsActive,
                        DivisionId = task.DivisionId,
                        Description = task.Description,
                        Cost_ = task.Cost_,
                        Hours = task.Hours,
                        CEU = task.CEU,
                        DepartmentID = task.DepartmentID,
                        File = "To Division",
                        UserId = task.UserId,
                        IsPrivate = task.IsPrivate,
                        SessionRole = logedinuser.Role,
                       // CourseId = Convert.ToInt32(task.CourseId)
                    };

                    return JsonConvert.SerializeObject(dTo, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else
                {
                    TaskDTO dTo = new TaskDTO()
                    {
                        Id = task.Id,
                        Name = task.Name,
                        TaskTypeID = task.TaskTypeID,
                        IsActive = task.IsActive,
                        DivisionId = task.DivisionId,
                        Description = task.Description,
                        Cost_ = task.Cost_,
                        Hours = task.Hours,
                        CEU = task.CEU,
                        DepartmentID = task.DepartmentID,
                        File = "No User",
                        UserId = task.UserId,
                        IsPrivate = task.IsPrivate,
                        SessionRole = logedinuser.Role,
                      //  CourseId = Convert.ToInt32(task.CourseId)
                    };

                    return JsonConvert.SerializeObject(dTo, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }

            }
            else
            {

                if (assignmentvalue == "assignManager")
                {

                    List<User> allmanagers = new List<User>();
                    if (Worktype != null)
                    {
                        foreach (int t in Worktype)
                        {
                            List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DivisionId == Convert.ToInt32(divisionId) && (x.User.Role == 2 || x.User.Role == 4) && x.IsActive == 1 && x.User.IsActive==1)).ToList();
                            foreach (User_Worktype wt in user_wt)
                            {
                                int c = 0;
                                c = allmanagers.Where(x => x.Id == wt.User.Id).Count();
                                if (c == 0)
                                {
                                    allmanagers.Add(wt.User);
                                }

                            }
                        }


                    }
                    else
                    {
                        allmanagers = new UserBL().getAllUsersList().Where(x => x.DivisionId == Convert.ToInt32(divisionId) && (x.Role == 2 || x.Role == 4) && x.IsActive == 1).ToList();

                    }
                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allmanagers.Where(x => x.IsActive == 1))
                    {

                        UserDTO dTo = new UserDTO()
                        {
                            Id = d.Id,
                            Name = d.FirstName + ' ' + d.LastName,
                            SessionRole = logedinuser.Role,
                            AssignUserRole = "Manager"
                        };
                        alluserDTOs.Add(dTo);


                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignEmployee")
                {
                    List<User> allemployees = new List<User>();
                    if (Worktype != null)
                    {
                        foreach (int t in Worktype)
                        {
                            List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DepartmentId == Convert.ToInt32(departmentId) && x.User.Role == 3 && x.IsActive == 1 && x.User.IsActive == 1)).ToList();
                            foreach (User_Worktype wt in user_wt)
                            {
                                int c = 0;
                                c = allemployees.Where(x => x.Id == wt.User.Id).Count();
                                if (c == 0)
                                {
                                    allemployees.Add(wt.User);
                                }

                            }
                        }


                    }
                    else
                    {
                        allemployees = new UserBL().getAllUsersList().Where(x => x.DepartmentId == Convert.ToInt32(departmentId) && x.Role == 3 && x.IsActive == 1).ToList();

                    }
                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allemployees.Where(x => x.IsActive == 1))
                    {

                        UserDTO dTo = new UserDTO()
                        {
                            Id = d.Id,
                            Name = d.FirstName + ' ' + d.LastName,
                            SessionRole = logedinuser.Role,
                            AssignUserRole = "Employee"
                        };
                        alluserDTOs.Add(dTo);

                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
                else if (assignmentvalue == "assignAdmin")
                {
                    List<User> allmanagers = new List<User>();

                    allmanagers = new UserBL().getUsersList().Where(x => x.Role == 1 && x.IsActive == 1 && x.Id != logedinuser.Id).ToList();


                    List<UserDTO> alluserDTOs = new List<UserDTO>();

                    foreach (User d in allmanagers.Where(x => x.IsActive == 1))
                    {
                        
                            UserDTO dTo = new UserDTO()
                            {
                                Id = d.Id,
                                Name = d.FirstName + ' ' + d.LastName,
                                SessionRole = logedinuser.Role,
                                AssignUserRole = "Admin"
                            };
                            alluserDTOs.Add(dTo);
                        

                    }

                    return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }

            }
            return JsonConvert.SerializeObject(alluserDTOs2, Formatting.Indented,
                 new JsonSerializerSettings()
                 {
                     ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                 });

        }

        public string getManagersDTO(string CurrentMangerId)
        {
            User Cuser = new UserBL().getUsersById(Convert.ToInt32(CurrentMangerId));
            List<User> MangerList = new UserBL().getManagerList().Where(x => x.DivisionId == Cuser.DivisionId).ToList();
            List<UserDTO> alluserDTOs = new List<UserDTO>();

            foreach (User d in MangerList.Where(x => x.IsActive == 1))
            {
                if (d.Id != Cuser.Id)
                {
                    UserDTO dTo = new UserDTO()
                    {
                        Id = d.Id,
                        Name = d.FirstName + ' ' + d.LastName,
                        SessionRole = logedinuser.Role,
                        
                    };
                    alluserDTOs.Add(dTo);
                }

            }
            return JsonConvert.SerializeObject(alluserDTOs, Formatting.Indented,
                 new JsonSerializerSettings()
                 {
                     ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                 });
        }

        public string getAssignTaskDTO(string taskId)
        {
            TaskDTO dTo2 = new TaskDTO();
            if (taskId != "0")
            {
                Task d = new TaskBL().getTasksById(Convert.ToInt32(taskId));

                TaskDTO dTo = new TaskDTO()
                {
                    Id = d.Id,
                    Name = d.Name,
                    TaskTypeID = d.TaskTypeID,
                    IsActive = d.IsActive,
                    DivisionId = d.DivisionId,
                    Description = d.Description,
                    Cost_ = d.Cost_,
                    Hours = d.Hours,
                    CEU = d.CEU,
                    DepartmentID = d.DepartmentID,
                    File = d.File,
                    UserId = d.UserId,
                    IsPrivate = d.IsPrivate,
                    SessionRole = logedinuser.Role,
                   // CourseId = Convert.ToInt32(d.CourseId)
                };

                return JsonConvert.SerializeObject(dTo, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
            }
            return JsonConvert.SerializeObject(dTo2, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        public string getTaskTypes()
        {

            List<TaskType> taskType = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
            List<TaskDTO> dTo = new List<TaskDTO>();
            if (taskType.Count() > 0)
            {
                foreach (TaskType tsktyp in taskType)
                {
                    TaskDTO d = new TaskDTO()
                    {
                        Id = tsktyp.Id,
                        Name = tsktyp.Name
                    };

                    dTo.Add(d);

                }

            }

            return JsonConvert.SerializeObject(dTo, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="timelineDate">haider</param>
        /// <param name="taskId"></param>
        /// <param name="priority"></param>
        /// <param name="cost"></param>
        /// <param name="freqDays"></param>
        /// <param name="ceu"></param>
        /// <param name="hours"></param>
        /// <param name="Grad"></param>
        /// <param name="CanvasCourseId"></param>
        /// <param name="days"></param>
        /// <param name="notes"></param>
        /// <param name="depatmentID"></param>
        /// <param name="WorktypeId"></param>
        /// <returns></returns>
        public List<int> AssignTaskToDepartmentFromIndex(string timelineDate, int taskId, int? priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, int days = -1, string notes = null, int depatmentID = -1, List<int> WorktypeId = null, List<int> taskidlist = null, string Time ="", string StartDate = "", string Endate = "", int DReminder = -1)
        {



            List<int> Idlist = new List<int>(); // List to get parent tasks IDs
            int role = logedinuser.Role;
            int id = logedinuser.Id;





            Department department = new DepartmentBL().getDepartmentsById(depatmentID);

            List<User> empusers = new List<User>();
            if (WorktypeId != null)
            {
                foreach (int t in WorktypeId)
                {
                    List<User_Worktype> listwt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && x.User.DepartmentId == department.Id).ToList();
                    foreach (User_Worktype wt in listwt)
                    {
                        int c = 0;
                        c = empusers.Where(x => x.Id == wt.User.Id).Count();
                        if (c == 0)
                        {
                            empusers.Add(wt.User);
                        }

                    }
                }

            }
            else
            {
                empusers = new UserBL().getUsersList().Where(x => x.DepartmentId == department.Id).ToList();
            }

            if (empusers.Count() == 0)
            {
                return Idlist = null;

            }
            User logedin = new UserBL().getUsersById(id);
            empusers.Add(logedin);
            int flag = 0;
            string tik = "";
            int Idcounter = 0;
            int flag1 = 0;
            foreach (User trainee in empusers.Where(x => x.IsActive == 1))
            {

                List<User> email = new List<User>();
                List<string> content = new List<string>();

                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays.Value;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }
                }

                if (flag == 0)
                {
                    tik = DateTime.Now.Ticks.ToString();
                    flag++;
                }
                if(StartDate=="" && Endate == "")
                {
                    StartDate = timelineDate;
                    Endate = timelineDate;
                }
                DateTime STimelineDate = Convert.ToDateTime(StartDate);//Custom Date
                DateTime ETimelineDate = Convert.ToDateTime(Endate).AddDays(1);// CustomDate
                ETimelineDate = ETimelineDate.AddMinutes(-1);
                DateTime dateTime = DateTime.Now;
                DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
                if (Time != null && Time != "")
                {
                    timeValue = Convert.ToDateTime(Time);
                    DateTime drt = new DateTime(ETimelineDate.Year, ETimelineDate.Month, ETimelineDate.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                    ETimelineDate = drt;
                }
                
                User_Task tm = new User_Task();
                if (taskidlist != null)
                {
                    tm.TaskID = taskId;
                    tm.UserID = trainee.Id;
                    tm.Cost = cost;
                    tm.CEU = ceu;
                    tm.Hours = hours;
                    tm.Grad = Grad;
                    tm.StartDate = STimelineDate;
                    tm.Notes = notes;
                    tm.IsActive = 1;
                    tm.Status = 0;

                    tm.Priority = priority;
                    tm.CanvasCourseId = CanvasCourseId;
                    tm.DepartmentID = tik;
                    tm.ParentID = taskidlist[Idcounter];


                }
                else
                {
                    tm.TaskID = taskId;
                    tm.UserID = trainee.Id;
                    tm.Cost = cost;
                    tm.CEU = ceu;
                    tm.Hours = hours;
                    tm.Grad = Grad;
                    tm.StartDate = STimelineDate;
                    tm.Notes = notes;
                    tm.IsActive = 1;
                    tm.Status = 0;

                    tm.Priority = priority;
                    tm.CanvasCourseId = CanvasCourseId;
                    tm.DepartmentID = tik;
                }

                if (id != trainee.Id)
                    tm.CreatedID = id;
                if (Request["IsPrivate"] != null)
                {
                    tm.IsPrivate = 1;
                }
                else
                    tm.IsPrivate = 0;
                if (days != -1)
                {
                    tm.RepeatTime = days;
                    tm.EndDate = tm.StartDate;
                }
                else

                {
                    tm.EndDate = ETimelineDate;
                }

                DatabaseEntities de = new DatabaseEntities();
                User User = new UserBL().getUsersById(tm.UserID.Value, de);
                email.Add(trainee);

                // tm.UserID = trainee.Id;

                User_Task uutask = new User_Task();
                uutask = new User_TaskBL().AddUser_Tasks(tm);
                if (CanvasCourseId != null)
                {
                    General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                }
                Idcounter++;

                Idlist.Add(uutask.Id);

                tm.User1 = trainee;
                //Canvas Course Assinging mail
                //if (CanvasCourseId != null)
                //{
                //    User admin = new UserBL().getUsersById(id);
                //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                //    string rle = "";
                //    if (User.Role == 3)
                //        rle = "Employee";
                //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                //        rle = "Admin";
                //    else if (User.Role == 1 && User.IsMasterAdmin == 1)
                //        rle = "Master Admin";
                //    else
                //        rle = "Yourself";

                //    string maiil = "";
                //    if (User.CanvasLoginId != null)
                //        maiil = User.CanvasLoginId;
                //    else
                //    {
                //        maiil = User.Email;
                //        User.CanvasLoginId = User.Email;
                //    }



                //    new UserBL().UpdateUsers(User, de);

                //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                //   maiil + "\n\n Thanks\n Team Zuptu";
                //    string title = "Canvas Course Assigning";
                //    MainMailClass mail = new MainMailClass();
                //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                //    if (cour == null)
                //    {
                //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                //        if (canvasuser == null)
                //        {
                //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                //        }
                //        else
                //        {
                //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                //            if (response == "OK")
                //            {
                //                ViewBag.msg = "Task Assigned Successfully";
                //            }
                //            else
                //            {
                //                ViewBag.msg = "Oops! Something went wrong.";
                //            }
                //        }
                //    }






                //}

                tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);
                if (tm.User1.Role != 1)
                {
                    content.Add(Messages.taskAward(tm));
                    Communication.sendMessage(content, email);
                    data.TaskId = tm.Id.ToString();
                    General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, trainee.Id.ToString());
                }

            }




            return Idlist;
        }

        public List<int> AssignTaskToDivisionFromIndex(string timelineDate, int taskId, int priority, int? cost, int? freqDays, float? ceu, float? hours, int Grad, int? CanvasCourseId, int days = -1, string notes = null, int divID = -1, List<int> WorktypeId = null, List<int> taskidlist = null,string Time ="",string StartDate="", string Endate="", int DReminder=-1)
        {



            List<int> Idlist = new List<int>(); // List to get parent tasks IDs
            int role = logedinuser.Role;
            int id = logedinuser.Id;

            List<User> users = new List<User>();

            if (WorktypeId != null)
            {
                foreach (int t in WorktypeId)
                {
                    List<User_Worktype> listwt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && x.User.DivisionId == divID).ToList();
                    foreach (User_Worktype wt in listwt)
                    {
                        int c = 0;
                        c = users.Where(x => x.Id == wt.User.Id).Count();
                        if (c == 0)
                        {
                            users.Add(wt.User);
                        }


                    }
                }

            }
            else
            {
                users = new UserBL().getAllActiveUsersList().Where(x => x.DivisionId == divID).ToList();
            }


            User logedin = new UserBL().getUsersById(id);
            users.Add(logedin);
            if(StartDate=="" && Endate == "")
            {
                StartDate = timelineDate;
                Endate = timelineDate;
            }
            DateTime STimelineDate = Convert.ToDateTime(StartDate);//Custom Date
            DateTime ETimelineDate = Convert.ToDateTime(Endate).AddDays(1);//Custom Date
            ETimelineDate = ETimelineDate.AddMinutes(-1);
            DateTime dateTime = DateTime.Now;
            DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
            if (Time != null && Time!="")
            {
                timeValue = Convert.ToDateTime(Time);
                DateTime drt = new DateTime(ETimelineDate.Year, ETimelineDate.Month, ETimelineDate.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                ETimelineDate = drt;
            }
            
            int flag = 0;
            string tik = "";
            int Idcounter = 0;
            int flag1 = 0;
            foreach (User trainee in users.Where(x => x.IsActive == 1))
            {
                List<User> email = new List<User>();
                List<string> content = new List<string>();

                if (flag == 0)
                {
                    tik = DateTime.Now.Ticks.ToString();
                    flag++;
                }
                if (days != -1)
                {
                    switch (days)
                    {
                        case 1:
                            days = 1;
                            break;

                        case 2:
                            days = 7;

                            break;

                        case 3:
                            days = 30;
                            break;

                        case 4:
                            days = 365;
                            break;

                        case 5:
                            days = 730;
                            break;

                        case 6:
                            days = freqDays.Value;
                            break;

                        default:
                            Console.WriteLine("Default case");
                            break;
                    }
                }
                User_Task tm = new User_Task();
                if (taskidlist != null)
                {

                    tm.TaskID = taskId;
                    tm.UserID = trainee.Id;
                    tm.Cost = cost;
                    tm.CEU = ceu;
                    tm.Hours = hours;
                    tm.Grad = Grad;
                    tm.StartDate = STimelineDate;
                    tm.Notes = notes;
                    tm.IsActive = 1;
                    tm.Status = 0;
                    tm.CreatedID = logedinuser.Id;
                    tm.DivisionID = tik;

                    tm.Priority = priority;
                    tm.CanvasCourseId = CanvasCourseId;
                    tm.ParentID = taskidlist[Idcounter];

                }
                else
                {
                    tm.TaskID = taskId;
                    tm.UserID = trainee.Id;
                    tm.Cost = cost;
                    tm.CEU = ceu;
                    tm.Hours = hours;
                    tm.Grad = Grad;
                    tm.StartDate = STimelineDate;
                    tm.Notes = notes;
                    tm.IsActive = 1;
                    tm.Status = 0;
                    tm.CreatedID = logedinuser.Id;
                    tm.DivisionID = tik;

                    tm.Priority = priority;
                    tm.CanvasCourseId = CanvasCourseId;
                    // tm.ParentID = Idlist[Idcounter];
                }



                if (Request["IsPrivate"] != null)
                {
                    tm.IsPrivate = 1;
                }
                else
                    tm.IsPrivate = 0;
                if (days != -1)
                {
                    tm.RepeatTime = days;
                    tm.EndDate = tm.StartDate;

                }
                else

                {
                    tm.EndDate = ETimelineDate;
                }

                DatabaseEntities de = new DatabaseEntities();
                User User = new UserBL().getUsersById(tm.UserID.Value, de);

                email.Add(trainee);



                //  tm.UserID = trainee.Id;
                User_Task uutask = new User_Task();
                if (DReminder != -1)
                {
                    tm.DailyReminder = DReminder;
                }
                uutask = new User_TaskBL().AddUser_Tasks(tm);
                if (CanvasCourseId != null)
                {
                    General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                }
                Idcounter++;

                Idlist.Add(uutask.Id);
                tm.User1 = trainee;

                //Canvas Course Assinging mail
                //if (CanvasCourseId != null)
                //{
                //    User admin = new UserBL().getUsersById(id);
                //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                //    string rle = "";
                //    if (User.Role == 3)
                //        rle = "Employee";
                //    else if (User.Role == 2 || User.Role == 4)
                //        rle = "Manager";
                //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                //        rle = "Admin";
                //    else
                //        rle = "Yourself";

                //    string maiil = "";
                //    if (User.CanvasLoginId != null)
                //        maiil = User.CanvasLoginId;
                //    else
                //    {
                //        maiil = User.Email;
                //        User.CanvasLoginId = User.Email;
                //    }



                //    new UserBL().UpdateUsers(User, de);

                //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                //   maiil + "\n\n Thanks\n Team Zuptu";
                //    string title = "Canvas Course Assigning";
                //    MainMailClass mail = new MainMailClass();
                //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                //    if (cour == null)
                //    {
                //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                //        if (canvasuser == null)
                //        {
                //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                //        }
                //        else
                //        {
                //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                //            if (response == "OK")
                //            {
                //                ViewBag.msg = "Task Assigned Successfully";
                //            }
                //            else
                //            {
                //                ViewBag.msg = "Oops! Something went wrong.";
                //            }
                //        }
                //    }






                //}

                tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);
                if (tm.User1.Role != 1)
                {
                    content.Add(Messages.taskAward(tm));
                    Communication.sendMessage(content, email);
                    data.TaskId = tm.Id.ToString();
                    General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, trainee.Id.ToString());

                }

            }
            List<Department> departments = new DepartmentBL().getDepartmentsList().Where(x => x.DivisionID == divID).ToList();
            foreach (Department department in departments)
            {
                List<User> empusers = new List<User>();
                if (WorktypeId != null)
                {
                    foreach (int t in WorktypeId)
                    {
                        List<User_Worktype> listwt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && x.User.DepartmentId == department.Id).ToList();
                        foreach (User_Worktype wt in listwt)
                        {
                            int c = 0;
                            c = empusers.Where(x => x.Id == wt.User.Id).Count();
                            if (c == 0)
                            {
                                empusers.Add(wt.User);
                            }

                        }
                    }

                }
                else
                {
                    empusers = new UserBL().getAllActiveUsersList().Where(x => x.DepartmentId == department.Id).ToList();
                }
                int flag2 = 0;
                foreach (User trainee in empusers.Where(x => x.IsActive == 1))
                {
                    List<User> email = new List<User>();
                    List<string> content = new List<string>();

                    if (flag == 0)
                    {
                        tik = DateTime.Now.Ticks.ToString();
                        flag++;
                    }
                    if (days != -1)
                    {
                        switch (days)
                        {
                            case 1:
                                days = 1;
                                break;

                            case 2:
                                days = 7;

                                break;

                            case 3:
                                days = 30;
                                break;

                            case 4:
                                days = 365;
                                break;

                            case 5:
                                days = 730;
                                break;

                            case 6:
                                days = freqDays.Value;
                                break;

                            default:
                                Console.WriteLine("Default case");
                                break;
                        }
                    }


                    User_Task tm = new User_Task();

                    if (taskidlist != null)
                    {
                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = STimelineDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;
                        tm.CreatedID = logedinuser.Id;
                        tm.Priority = priority;
                        tm.CanvasCourseId = CanvasCourseId;
                        tm.DivisionID = tik;
                        tm.ParentID = taskidlist[Idcounter];
                    }
                    else
                    {
                        tm.TaskID = taskId;
                        tm.UserID = trainee.Id;
                        tm.Cost = cost;
                        tm.CEU = ceu;
                        tm.Hours = hours;
                        tm.Grad = Grad;
                        tm.StartDate = STimelineDate;
                        tm.Notes = notes;
                        tm.IsActive = 1;
                        tm.Status = 0;
                        tm.CreatedID = logedinuser.Id;
                        tm.Priority = priority;
                        tm.CanvasCourseId = CanvasCourseId;
                        tm.DivisionID = tik;
                    }



                    if (id != trainee.Id)
                        tm.CreatedID = id;

                    if (Request["IsPrivate"] != null)
                    {
                        tm.IsPrivate = 1;
                    }
                    else
                        tm.IsPrivate = 0;
                    if (days != -1)
                    {
                        tm.RepeatTime = days;
                        tm.EndDate = tm.StartDate;
                        //DateTime dt = new DateTime();
                        //if (flag2 == 0)
                        //{
                        //    dt = tm.StartDate.Value;
                        //    flag2++;
                        //}
                        //else
                        //{
                        //    dt = tm.StartDate.Value.AddDays(days);
                        //}
                        //tm.StartDate = dt;
                        //tm.EndDate = dt;
                        //tm.RepeatTime = days;
                    }
                    else

                    {
                        tm.EndDate = ETimelineDate;
                    }

                    DatabaseEntities de = new DatabaseEntities();
                    User User = new UserBL().getUsersById(tm.UserID.Value, de);

                    email.Add(trainee);

                    // tm.UserID = trainee.Id;
                    User_Task uutask = new User_Task();
                    if (DReminder != -1)
                    {
                        tm.DailyReminder = DReminder;
                    }
                    uutask = new User_TaskBL().AddUser_Tasks(tm);
                    if (CanvasCourseId != null)
                    {
                        General_Purpose.AssignLMSCourse(uutask.Id, (int)CanvasCourseId);
                    }
                    Idlist.Add(uutask.Id);
                    Idcounter++;
                    //new User_TaskBL().AddUser_Tasks(tm);

                    tm.User1 = trainee;
                    //Canvas Course Assinging mail
                    //if (CanvasCourseId != null)
                    //{
                    //    User admin = new UserBL().getUsersById(id);
                    //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    string rle = "";
                    //    if (User.Role == 3)
                    //        rle = "Employee";
                    //    else if (User.Role == 2 || User.Role == 4)
                    //        rle = "Manager";
                    //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                    //        rle = "Admin";
                    //    else
                    //        rle = "Yourself";

                    //    string maiil = "";
                    //    if (User.CanvasLoginId != null)
                    //        maiil = User.CanvasLoginId;
                    //    else
                    //    {
                    //        maiil = User.Email;
                    //        User.CanvasLoginId = User.Email;
                    //    }



                    //    new UserBL().UpdateUsers(User, de);

                    //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please ask your Admin to send Course assigning invitation from his Canvas Account on this Email " +
                    //   maiil + "\n\n Thanks\n Team Zuptu";
                    //    string title = "Canvas Course Assigning";
                    //    MainMailClass mail = new MainMailClass();
                    //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    if (cour == null)
                    //    {
                    //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                    //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                    //        if (canvasuser == null)
                    //        {
                    //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                    //        }
                    //        else
                    //        {
                    //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                    //            if (response == "OK")
                    //            {
                    //                ViewBag.msg = "Task Assigned Successfully";
                    //            }
                    //            else
                    //            {
                    //                ViewBag.msg = "Oops! Something went wrong.";
                    //            }
                    //        }
                    //    }






                    //}

                    tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);
                    if (tm.User1.Role != 1)
                    {
                        content.Add(Messages.taskAward(tm));
                        Communication.sendMessage(content, email);
                        data.TaskId = tm.Id.ToString();
                        General_Purpose.SendPushNotification(trainee.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, trainee.Id.ToString());

                    }

                }

            }

            return Idlist;
        }


        public ActionResult assigntaskAdmin(string Time, int? priority, int? cost, int? freqDays, float? ceu, float? hours, int? Grad, int? CanvasCourseId, string timelineDate = "", string vqa = "", string StartDate = "", string EndDate = "", int taskId = -1, int divisionId = -1, int days = -1, string notes = null, string SimpleAdminId = null, string adminId = null, string managerId = null, string employeeId = null, string newtaskname = "", int newtasktype = -1, int departmentId = -1, List<int> WorktypeId = null, string ToDepartment = null, string ToDivision = null, string FeqEndingDate = "", string newtasktypename = "", string AssignTo = "", int DReminder=-1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (divisionId == -1)
                {
                    return RedirectToAction("Index", "Auth", new { message = "Division Name not be null.Task didn't assign successfully." });

                }
                if (taskId == -1)
                {
                    return RedirectToAction("Index", "Auth", new { message = "Task must be selected.Task didn't assign successfully." });

                }
                if (taskId == 0)
                {




                    Department dept = new DepartmentBL().getDepartmentsById(departmentId);
                    if (newtasktype == -1)
                    {
                        return RedirectToAction("Index", "Auth", new { message = "Task Type not be null.Task didn't add successfully." });
                    }

                    if (newtasktype == 0)
                    {
                        int company = Convert.ToInt32(logedinuser.Company);
                        if (newtasktypename == "")
                            return RedirectToAction("Index", "Auth", new { message = "Task Type name not be null.Task didn't add successfully." });
                        else
                        {
                            newtasktypename = newtasktypename.Trim();

                            int value = Convert.ToInt32((new TaskTypeBL().getTaskTypesList().Where(x => x.Name.ToUpper().Equals(newtasktypename.ToUpper())).Count() > 0));

                            if (value != 0)
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task type name already exists in the system." });

                            }
                        }
                        TaskType obj = new TaskType() { Name = newtasktypename, CompanyID = company, IsActive = 1 };
                        new TaskTypeBL().AddTaskTypes(obj);
                        newtasktype = obj.Id;
                    }



                    int taskcount = 0;
                    if (newtaskname != "")
                    {
                        taskcount = dept.Tasks.Where(x => x.IsActive == 1 && x.Name.ToUpper().Equals(newtaskname.ToUpper())).Count();

                    }
                    else
                    {
                        return RedirectToAction("Index", "Auth", new { message = "Task name not be null.Task didn't add successfully." });
                    }




                    if (taskcount > 0)
                    {

                        return RedirectToAction("Index", "Auth", new { message = "Task name already exists in the department. Task didn't add successfully." });

                    }
                    else
                    {


                        int idu = logedinuser.Id;


                        Task obj = new Task()
                        {
                            IsPrivate = 0,
                            IsActive = 1,
                            UserId = idu,
                            DepartmentID = departmentId,
                            TaskTypeID = newtasktype,
                            Name = newtaskname,
                            CEU = ceu,
                            Cost_ = cost,
                            Hours = hours,
                            Description = notes,
                            // CourseId = CanvasCourseId

                        };


                        taskId = new TaskBL().AddTasks(obj);


                    }


                }



                if (employeeId == "-33" || managerId == "-66" || SimpleAdminId == "-99")
                {
                    List<User> userlistt = new List<User>();

                    if (managerId != "" && managerId != null)
                    {
                        List<User> allmanagers = new List<User>();
                        if (WorktypeId != null)
                        {
                            foreach (int t in WorktypeId)
                            {
                                List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DivisionId == Convert.ToInt32(divisionId) && (x.User.Role == 2 || x.User.Role == 4) && x.IsActive == 1)).ToList();
                                foreach (User_Worktype wt in user_wt)
                                {
                                    int c = 0;
                                    c = allmanagers.Where(x => x.Id == wt.User.Id).Count();
                                    if (c == 0)
                                    {
                                        allmanagers.Add(wt.User);
                                    }

                                }
                            }


                        }
                        else
                        {
                            allmanagers = new UserBL().getAllUsersList().Where(x => x.DivisionId == Convert.ToInt32(divisionId) && (x.Role == 2 || x.Role == 4) && x.IsActive == 1).ToList();

                        }
                        userlistt = allmanagers;
                    }
                    else if (SimpleAdminId != "" && SimpleAdminId != null)
                    {
                        List<User> allmanagers = new List<User>();

                        allmanagers = new UserBL().getUsersList().Where(x => x.Role == 1 && x.IsActive == 1 && x.Id != logedinuser.Id).ToList();


                        userlistt = allmanagers;
                    }
                    else
                    {
                        List<User> allemployees = new List<User>();
                        if (WorktypeId != null)
                        {
                            foreach (int t in WorktypeId)
                            {
                                List<User_Worktype> user_wt = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.WorktypeId == t && (x.User.DepartmentId == Convert.ToInt32(departmentId) && x.User.Role == 3 && x.IsActive == 1)).ToList();
                                foreach (User_Worktype wt in user_wt)
                                {
                                    int c = 0;
                                    c = allemployees.Where(x => x.Id == wt.User.Id).Count();
                                    if (c == 0)
                                    {
                                        allemployees.Add(wt.User);
                                    }


                                }
                            }


                        }
                        else
                        {
                            allemployees = new UserBL().getAllUsersList().Where(x => x.DepartmentId == Convert.ToInt32(departmentId) && x.Role == 3 && x.IsActive == 1).ToList();

                        }
                        userlistt = allemployees;
                    }

                    foreach (User xt in userlistt)
                    {
                        if (employeeId != "" && employeeId != null)
                        {
                            employeeId = Convert.ToString(xt.Id);
                        }
                        else if (SimpleAdminId != "" && SimpleAdminId != null)
                        {
                            SimpleAdminId = Convert.ToString(xt.Id);
                        }
                        else
                        {
                            managerId = Convert.ToString(xt.Id);
                        }

                        if (days != -1)
                        {
                            switch (days)
                            {
                                case 1:
                                    days = 1;
                                    break;

                                case 2:
                                    days = 7;

                                    break;

                                case 3:
                                    days = 30;
                                    break;

                                case 4:
                                    days = 365;
                                    break;

                                case 5:
                                    days = 730;
                                    break;

                                case 6:
                                    days = freqDays.Value;
                                    break;

                                default:
                                    Console.WriteLine("Default case");
                                    break;
                            }
                        }

                        List<User> email = new List<User>();
                        List<string> content = new List<string>();

                        int role = logedinuser.Role;
                        int id = logedinuser.Id;

                        DateTime STimelineDate = Convert.ToDateTime(StartDate);//custom Start date
                        DateTime ETimelineDate = Convert.ToDateTime(EndDate).AddDays(1);//Custom End Date
                        ETimelineDate = ETimelineDate.AddMinutes(-1);
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0); ;
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                            DateTime drt = new DateTime(ETimelineDate.Year, ETimelineDate.Month, ETimelineDate.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                            ETimelineDate = drt;
                        }

                        

                        User_Task tm = new User_Task()
                        {
                            TaskID = taskId,
                            Priority = priority,
                            Cost = cost,
                            CEU = ceu,
                            Hours = hours,
                            Grad = Grad,
                            Notes = notes,
                            StartDate = STimelineDate,
                            // EndDate = ETimelineDate,
                            IsActive = 1,
                            Status = 0,
                            CanvasCourseId=CanvasCourseId
                        };
                        //if (CanvasCourseId != null)
                        //{
                        //    tm.CanvasCourseId = CanvasCourseId;

                        //}
                        if (days != -1)
                        {

                            tm.RepeatTime = days;
                            tm.EndDate = tm.StartDate;
                        }
                        else
                        {
                            tm.EndDate = ETimelineDate;
                        }

                        if (employeeId != "" && employeeId != null)
                        {
                            if (id != Convert.ToInt32(employeeId))
                                tm.CreatedID = id;
                        }

                        if (managerId != "" && managerId != null)
                        {
                            if (id != Convert.ToInt32(managerId))
                                tm.CreatedID = id;
                        }
                        if (SimpleAdminId != "" && SimpleAdminId != null)
                        {
                            if (id != Convert.ToInt32(SimpleAdminId))
                                tm.CreatedID = id;
                        }



                        if (SimpleAdminId != null && SimpleAdminId != "")
                        {
                            tm.UserID = Convert.ToInt32(SimpleAdminId);
                        }
                        if (managerId != null && managerId != "")
                        {
                            tm.UserID = Convert.ToInt32(managerId);
                        }
                        if (employeeId != null && employeeId != "")
                        {
                            tm.UserID = Convert.ToInt32(employeeId);
                        }

                        if ((adminId == "" || adminId == null) && (employeeId == "" || employeeId == null) && (managerId == "" || managerId == null) && (ToDepartment == "" || ToDepartment == null) && (ToDivision == "" || ToDivision == null) && (SimpleAdminId == "" || SimpleAdminId == null))
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Something went wrong!" });
                        }
                        if (Request["IsPrivate"] != null)
                        {
                            tm.IsPrivate = 1;
                        }
                        else
                        {
                            tm.IsPrivate = 0;
                        }



                        DatabaseEntities de = new DatabaseEntities();
                        User User = new UserBL().getUsersById(tm.UserID.Value, de);
                        email.Add(User);
                        User_TaskBL ubl = new User_TaskBL();
                        tm.CreatedID = id;
                        tm.CreatedID = logedinuser.Id;
                        if (days == -1)
                        {
                            if (DReminder != -1)
                            {
                                tm.DailyReminder = DReminder;
                            }
                            
                            tm = ubl.AddUser_Tasks(tm);
                            if (CanvasCourseId != null)
                                General_Purpose.AssignLMSCourse(tm.Id, (int)CanvasCourseId);
                        }
                        if (days != -1)
                        {
                            if (FeqEndingDate == "")
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because you have not set frequency ending date." });
                            }
                            DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                            if (FEndingDate < Convert.ToDateTime(tm.StartDate))
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                            }

                            if (DReminder != -1)
                            {
                                tm.DailyReminder = DReminder;
                            }
                            tm = ubl.AddUser_Tasks(tm);
                            if (CanvasCourseId != null)
                                General_Purpose.AssignLMSCourse(tm.Id, (int)CanvasCourseId);
                            DateTime startDate = tm.StartDate.Value;
                            DateTime dt = tm.StartDate.Value.AddDays(days);
                            while (FEndingDate.AddDays(1) > dt)
                            {
                                User_Task ut = new User_Task()
                                {
                                    IsActive = 1,
                                    IsPrivate = tm.IsPrivate,
                                    StartDate = dt,
                                    EndDate = dt,
                                    Cost = tm.Cost,
                                    CEU = tm.CEU,
                                    Grad = tm.Grad,
                                    UserID = tm.UserID,
                                    TaskID = tm.TaskID,
                                    CreatedID = tm.CreatedID,
                                    CompletionDate = tm.CompletionDate,
                                    File = tm.File,
                                    RepeatDeadline = tm.RepeatDeadline,
                                    Priority = tm.Priority,
                                    CanvasCourseId = tm.CanvasCourseId,
                                    Status = 0,
                                    RepeatTime = tm.RepeatTime,
                                    ParentID = tm.Id,
                                    CreatedAt=DateTime.Now




                                };
                                if (DReminder != -1)
                                {
                                    ut.DailyReminder = DReminder;
                                }
                                ut = ubl.AddUser_Tasks(ut);
                                if (CanvasCourseId != null)
                                    General_Purpose.AssignLMSCourse(ut.Id, (int)CanvasCourseId);

                                if (days == 30)
                                    dt = dt.AddMonths(1);
                                else if (days == 365)
                                    dt = dt.AddYears(1);
                                else
                                    dt = dt.AddDays(days);
                                //dt = dt.AddDays(days);


                            }

                        }



                        tm.User1 = User;
                        //Canvas Course Assinging mail
                        //if (CanvasCourseId != null)
                        //{
                        //    User admin = new UserBL().getUsersById(id);
                        //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    string rle = "";
                        //    if (User.Role == 3)
                        //        rle = "Employee";
                        //    else if (User.Role == 2 || User.Role == 4)
                        //        rle = "Manager";
                        //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                        //        rle = "Admin";
                        //    else
                        //        rle = "Yourself";

                        //    string maiil = "";
                        //    if (User.CanvasLoginId != null)
                        //        maiil = User.CanvasLoginId;
                        //    else
                        //    {
                        //        maiil = User.Email;
                        //        User.CanvasLoginId = User.Email;
                        //    }



                        //    new UserBL().UpdateUsers(User, de);

                        //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please send him Course assigning invitation from your Canvas Account on his Email " +
                        //     maiil + "\n\n Thanks\n Team Zuptu";
                        //    string title = "Canvas Course Assigning";
                        //    MainMailClass mail = new MainMailClass();
                        //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                        //    if (cour == null)
                        //    {
                        //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                        //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                        //        if (canvasuser == null)
                        //        {
                        //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                        //        }
                        //        else
                        //        {
                        //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                        //            if (response == "OK")
                        //            {
                        //                ViewBag.msg = "Task Assigned Successfully";
                        //            }
                        //            else
                        //            {
                        //                ViewBag.msg = "Oops! Something went wrong.";
                        //            }
                        //        }

                        //    }






                        //}
                        tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);
                        content.Add(Messages.taskAward(tm));

                        Communication.sendMessage(content, email);

                        data.TaskId = tm.Id.ToString();
                        General_Purpose.SendPushNotification(User.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, User.Id.ToString());


                    }
                }
                else
                {

                    if (days != -1)
                    {
                        switch (days)
                        {
                            case 1:
                                days = 1;
                                break;

                            case 2:
                                days = 7;

                                break;

                            case 3:
                                days = 30;
                                break;

                            case 4:
                                days = 365;
                                break;

                            case 5:
                                days = 730;
                                break;

                            case 6:
                                days = freqDays.Value;
                                break;

                            default:
                                Console.WriteLine("Default case");
                                break;
                        }
                    }

                    List<User> email = new List<User>();
                    List<string> content = new List<string>();

                    int role = logedinuser.Role;
                    int id = logedinuser.Id;



                    DateTime STimelineDate = new DateTime();
                    DateTime ETimelineDate = new DateTime();
                    if (vqa != "")
                    {
                        if (FeqEndingDate != "")
                        {
                            if (StartDate == "")
                                return RedirectToAction("DisplayAdmin", "Utilities", new { message = "Start Date must have value." });


                            STimelineDate = Convert.ToDateTime(StartDate);
                            ETimelineDate = Convert.ToDateTime(StartDate).AddDays(1);
                            ETimelineDate = ETimelineDate.AddMinutes(-1);
                        }
                        else
                        {
                            if (StartDate == "" || EndDate == "")
                                return RedirectToAction("DisplayAdmin", "Utilities", new { message = "Start and End Date must have value." });


                            STimelineDate = Convert.ToDateTime(StartDate);
                            ETimelineDate = Convert.ToDateTime(EndDate).AddDays(1);
                            ETimelineDate = ETimelineDate.AddMinutes(-1);
                        }


                    }
                    else
                    {
                        STimelineDate = Convert.ToDateTime(StartDate);//Custom Start Date
                        ETimelineDate = Convert.ToDateTime(EndDate).AddDays(1);//Custom End Date
                        ETimelineDate = ETimelineDate.AddMinutes(-1);
                        DateTime dateTime = DateTime.Now;
                        DateTime timeValue = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
                        if (Time != null)
                        {
                            timeValue = Convert.ToDateTime(Time);
                            DateTime drt = new DateTime(ETimelineDate.Year, ETimelineDate.Month, ETimelineDate.Day, timeValue.Hour, timeValue.Minute, timeValue.Second);
                            ETimelineDate = drt;
                        }

                       
                    }


                    User_Task tm = new User_Task()
                    {
                        TaskID = taskId,
                        Priority = priority,
                        Cost = cost,
                        CEU = ceu,
                        Hours = hours,
                        Grad = Grad,
                        Notes = notes,
                        StartDate = STimelineDate,
                        // EndDate = ETimelineDate,
                        IsActive = 1,
                        Status = 0,
                        CanvasCourseId=CanvasCourseId
                    };
                    //if (CanvasCourseId != null)
                    //{
                    //    tm.CanvasCourseId = CanvasCourseId;

                    //}
                    if (days != -1)
                    {

                        tm.RepeatTime = days;
                        tm.EndDate = tm.StartDate;
                    }
                    else
                    {
                        tm.EndDate = ETimelineDate;
                    }

                    if (employeeId != "" && employeeId != null)
                    {
                        if (id != Convert.ToInt32(employeeId))
                            tm.CreatedID = id;
                    }
                    if (SimpleAdminId != "" && SimpleAdminId != null)
                    {
                        if (id != Convert.ToInt32(SimpleAdminId))
                            tm.CreatedID = id;
                    }

                    if (managerId != null && managerId != "")
                    {
                        if (id != Convert.ToInt32(managerId))
                            tm.CreatedID = id;
                    }

                    if (ToDivision != null && ToDivision != "")
                    {

                        List<int> response = AssignTaskToDivisionFromIndex(timelineDate, taskId, Convert.ToInt32(priority), cost, freqDays, ceu, hours, Convert.ToInt32(Grad), CanvasCourseId, days, notes, divisionId, WorktypeId,null,Time,StartDate,EndDate);
                        List<int> result = response;
                        if (days != -1)
                        {
                            if (FeqEndingDate == "")
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because you have not set frequency ending date." });
                            }
                            DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                            if (FEndingDate < Convert.ToDateTime(tm.StartDate))
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                            }
                            DateTime startDate = tm.StartDate.Value;
                            DateTime dt1 = tm.StartDate.Value.AddDays(days);
                            while (FEndingDate.AddDays(1) > dt1)
                            {

                                response = AssignTaskToDivisionFromIndex(dt1.ToString(), taskId, Convert.ToInt32(priority), cost, freqDays, ceu, hours, Convert.ToInt32(Grad), CanvasCourseId, days, notes, divisionId, WorktypeId, result,Time, "", "");

                                if (days == 30)
                                    dt1 = dt1.AddMonths(1);
                                else if (days == 365)
                                    dt1 = dt1.AddYears(1);
                                else
                                    dt1 = dt1.AddDays(days);
                                //  dt1 = dt1.AddDays(days);


                            }

                        }
                        if (response != null)
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Task has been assigned to whole Division." });
                        }
                        else
                        {
                            return RedirectToAction("Index", "Auth", new { message = "There is no employee in this Division." });

                        }


                    }

                    if (ToDepartment != null && ToDepartment != "")
                    {
                        List<int> response = AssignTaskToDepartmentFromIndex(timelineDate, taskId, priority, cost, freqDays, ceu, hours, Grad, CanvasCourseId, days, notes, departmentId, WorktypeId,null,Time,StartDate, EndDate);
                        List<int> result = response;
                        if (days != -1)
                        {
                            if (FeqEndingDate == "")
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because you have not set frequency ending date." });
                            }
                            DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                            if (FEndingDate < Convert.ToDateTime(tm.StartDate))
                            {
                                return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                            }
                            DateTime startDate = tm.StartDate.Value;
                            DateTime dt1 = tm.StartDate.Value.AddDays(days);

                            while (FEndingDate.AddDays(1) > dt1)
                            {

                                response = AssignTaskToDepartmentFromIndex(dt1.ToString(), taskId, Convert.ToInt32(priority), cost, freqDays, ceu, hours, Convert.ToInt32(Grad), CanvasCourseId, days, notes, departmentId, WorktypeId, result,Time,"","");

                                if (days == 30)
                                    dt1 = dt1.AddMonths(1);
                                else if (days == 365)
                                    dt1 = dt1.AddYears(1);
                                else
                                    dt1 = dt1.AddDays(days);
                                //  dt1 = dt1.AddDays(days);


                            }

                        }


                        if (response != null)
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Task has been assigned to whole department." });
                        }
                        else
                        {
                            return RedirectToAction("Index", "Auth", new { message = "There is no employee in this Department." });

                        }
                    }

                    if (SimpleAdminId != null && SimpleAdminId != "")
                    {
                        tm.UserID = Convert.ToInt32(SimpleAdminId);
                    }
                    if (managerId != null && managerId != "")
                    {
                        tm.UserID = Convert.ToInt32(managerId);
                    }
                    if (employeeId != null && employeeId != "")
                    {
                        tm.UserID = Convert.ToInt32(employeeId);
                    }

                    if (adminId != null && adminId != "")
                    {
                        if (vqa != "")
                        {
                            tm.UserID = Convert.ToInt32(adminId);

                        }
                        else
                        {
                            tm.UserID = logedinuser.Id;

                        }
                    }
                    if ((SimpleAdminId == "" || SimpleAdminId == null) && (adminId == "" || adminId == null) && (employeeId == "" || employeeId == null) && (managerId == "" || managerId == null) && (ToDepartment == "" || ToDepartment == null) && (ToDivision == "" || ToDivision == null))
                    {
                        if (AssignTo == "assignAdmin")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Admin must be selected. Task not assigned successfully." });

                        }
                        else if (AssignTo == "assignManager")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Manager must be selected. Task not assigned successfully." });

                        }
                        else if (AssignTo == "assignEmployee")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Employee must be selected. Task not assigned successfully." });

                        }
                        else if (AssignTo == "assignToDepartment")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Department must be selected. Task not assigned successfully." });

                        }
                        else if (AssignTo == "assignToDivision")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Division must be selected. Task not assigned successfully." });

                        }
                        else
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Something went wrong!" });

                        }

                    }
                    if (Request["IsPrivate"] != null)
                    {
                        tm.IsPrivate = 1;
                    }
                    else
                    {
                        tm.IsPrivate = 0;
                    }



                    DatabaseEntities de = new DatabaseEntities();
                    User User = new UserBL().getUsersById(tm.UserID.Value, de);
                    email.Add(User);

                    User_TaskBL ubl = new User_TaskBL();
                    if (days == -1)
                    {
                        if (DReminder != -1)
                        {
                            tm.DailyReminder = DReminder;
                        }
                        tm = ubl.AddUser_Tasks(tm);
                        if (CanvasCourseId != null)
                            General_Purpose.AssignLMSCourse(tm.Id, (int)CanvasCourseId);
                    }
                    if (days != -1)
                    {
                        if (FeqEndingDate == "")
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because you have not set frequency ending date." });
                        }
                        DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                        if (FEndingDate < Convert.ToDateTime(tm.StartDate))
                        {
                            return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                        }
                        if (DReminder != -1)
                        {
                            tm.DailyReminder = DReminder;
                        }
                        tm = ubl.AddUser_Tasks(tm);
                        if (CanvasCourseId != null)
                            General_Purpose.AssignLMSCourse(tm.Id, (int)CanvasCourseId);
                        DateTime startDate = tm.StartDate.Value;
                        DateTime dt = tm.StartDate.Value.AddDays(days);
                        while (FEndingDate.AddDays(1) > dt)
                        {
                            User_Task ut = new User_Task()
                            {
                                IsActive = 1,
                                IsPrivate = tm.IsPrivate,
                                StartDate = dt,
                                EndDate = dt,
                                Cost = tm.Cost,
                                CEU = tm.CEU,
                                Grad = tm.Grad,
                                UserID = tm.UserID,
                                TaskID = tm.TaskID,
                                CreatedID = tm.CreatedID,
                                CompletionDate = tm.CompletionDate,
                                File = tm.File,
                                RepeatDeadline = tm.RepeatDeadline,
                                Priority = tm.Priority,
                                CanvasCourseId = tm.CanvasCourseId,
                                Status = 0,
                                RepeatTime = tm.RepeatTime,
                                ParentID = tm.Id,
                                CreatedAt=DateTime.Now




                            };
                            if (DReminder != -1)
                            {
                                ut.DailyReminder = DReminder;
                            }
                            ut = ubl.AddUser_Tasks(ut);
                            if (CanvasCourseId != null)
                                General_Purpose.AssignLMSCourse(ut.Id, (int)CanvasCourseId);

                            if (days == 30)
                                dt = dt.AddMonths(1);
                            else if (days == 365)
                                dt = dt.AddYears(1);
                            else
                                dt = dt.AddDays(days);
                            //dt = dt.AddDays(days);


                        }

                    }
                    else
                    {
                        if (vqa != "")
                            if (StartDate == "" || EndDate == "")
                            {
                                return RedirectToAction("DisplayAdmin", "Utilities", new { message = "Start and End Date must have value." });

                            }
                    }





                    tm.User1 = User;
                    //Canvas Course Assinging mail
                    //if (CanvasCourseId != null)
                    //{
                    //    User admin = new UserBL().getUsersById(id);
                    //    Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    string rle = "";
                    //    if (User.Role == 3)
                    //        rle = "Employee";
                    //    else if (User.Role == 2 || User.Role == 4)
                    //        rle = "Manager";
                    //    else if (User.Role == 1 && User.IsMasterAdmin == 0)
                    //        rle = "Admin";
                    //    else
                    //        rle = "Yourself";

                    //    string maiil = "";
                    //    if (User.CanvasLoginId != null)
                    //        maiil = User.CanvasLoginId;
                    //    else
                    //    {
                    //        maiil = User.Email;
                    //        User.CanvasLoginId = User.Email;
                    //    }



                    //    new UserBL().UpdateUsers(User, de);

                    //    string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You assigned Canvas Course " + '"' + cr.name + '"' + " to " + rle + " " + '(' + User.FirstName + " " + User.LastName + ')' + " please send him Course assigning invitation from your Canvas Account on his Email " +
                    //     maiil + "\n\n Thanks\n Team Zuptu";
                    //    string title = "Canvas Course Assigning";
                    //    MainMailClass mail = new MainMailClass();
                    //    Course cour = General_Purpose.GetCanvasUserCoursesById(User.Id).Where(x => x.id == CanvasCourseId).FirstOrDefault();
                    //    if (cour == null)
                    //    {
                    //        List<Course> Courses = General_Purpose.GetCanvasCourse();
                    //        CanvasUser canvasuser = General_Purpose.IsUserInCanvasSystem(User.Id, Courses);
                    //        if (canvasuser == null)
                    //        {
                    //            mail.CanvasCourseAssingingMail(admin.Email, content1, title);
                    //        }
                    //        else
                    //        {
                    //            string response = General_Purpose.UserEnrollmentInCanvas(canvasuser.id, Convert.ToInt32(CanvasCourseId));
                    //            if (response == "OK")
                    //            {
                    //                ViewBag.msg = "Task Assigned Successfully";
                    //            }
                    //            else
                    //            {
                    //                ViewBag.msg = "Oops! Something went wrong.";
                    //            }
                    //        }

                    //    }






                    //}
                    tm.Task = new TaskBL().getTasksById(tm.TaskID.Value);

                    content.Add(Messages.taskAward(tm));


                    Communication.sendMessage(content, email);

                    data.TaskId = tm.Id.ToString();
                    General_Purpose.SendPushNotification(User.Player_Id, Messages.taskAward(tm, 1), "Message from Zuptu", data, User.Id.ToString());


                }
                if (vqa != "")
                    return RedirectToAction("DisplayAdmin", "Utilities", new { message = "Task has been assigned." });
                return RedirectToAction("Index", "Auth", new { message = "Task has been assigned." });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult getTasks()
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int role = logedinuser.Role;
                List<Task> tasks = new TaskBL().getTasksList().Where(x => x.IsPrivate == 0).OrderBy(s => s.Name).ToList();
                if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int managerId = logedinuser.Id;
                    User manager = new UserBL().getUsersById(managerId);
                    tasks = tasks.Where(x => x.Department.DivisionID == manager.DivisionId).OrderBy(s => s.Name).ToList();
                }

                List<Task> updatedTask = new List<Task>();
                foreach (Task item in tasks)
                {
                    Task t = new Task();
                    t.Name = item.Name;
                    t.Id = item.Id;
                    updatedTask.Add(t);
                }
                return Json(updatedTask);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        /// <summary>
        /// This method will return task names and details of all the tasks which will then be loaded on the index of the homepage
        /// </summary>
        /// <returns></returns>

        [HttpPost]
        public ActionResult getTaskNames()
        {
            try
            {


                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int role = logedinuser.Role;
                List<Task> tasks = new TaskBL().getTasksList().Where(x => x.IsPrivate == 0).OrderBy(s => s.Name).ToList();
                if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int managerId = logedinuser.Id;
                    User User = new UserBL().getUsersById(managerId);
                    tasks = tasks.Where(x => x.DivisionId == User.DivisionId).OrderBy(s => s.Name).ToList();
                }

                List<Task> updatedTask = new List<Task>();
                foreach (Task item in tasks)
                {
                    Task t = new Task();
                    t.Name = item.Name;
                    t.Id = item.Id;
                    updatedTask.Add(t);
                }
                return Json(updatedTask);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult getGroupTasksDetails(int DivisionId = -1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                List<GroupTask> tasks = new GroupTaskBL().getGroupTasksList().OrderBy(s => s.Name).ToList();
                List<GroupTask> updatedTask = new List<GroupTask>();
                int role = logedinuser.Role;

                if (role == (int)Enums.Role.Cordinator || role == (int)Enums.Role.Manager)
                {
                    int managerId = logedinuser.Id;
                    User User = new UserBL().getUsersById(managerId);
                    tasks = tasks.Where(x => x.User.DivisionId == User.DivisionId).OrderBy(s => s.Name).ToList();
                }
                else
                {
                    if (DivisionId != -1)
                    {


                        int managerId = logedinuser.Id;
                        User User = new UserBL().getUsersById(managerId);
                        tasks = tasks.Where(x => x.User.DivisionId == DivisionId).OrderBy(s => s.Name).ToList();
                    }
                }
                foreach (GroupTask item in tasks)
                {
                    GroupTask t = new GroupTask();
                    t.Name = item.Name;
                    t.Id = item.Id;
                    updatedTask.Add(t);
                }
                return Json(updatedTask);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult getGroupDivisionTasksDetails(int divisionId)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                List<GroupTask> tasks = new GroupTaskBL().getGroupTasksList().Where(x => x.User.DivisionId == divisionId && x.IsActive == 1).OrderBy(s => s.Name).ToList();
                List<GroupTask> updatedTask = new List<GroupTask>();
                int role = logedinuser.Role;


                foreach (GroupTask item in tasks)
                {
                    GroupTask t = new GroupTask();
                    t.Name = item.Name;
                    t.Id = item.Id;
                    updatedTask.Add(t);
                }
                return Json(updatedTask);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        /// <summary>
        /// ajax method when the manager clicks on group task, it populates groups in select field
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public async System.Threading.Tasks.Task<ActionResult> getTaskCalendars(CancellationToken cancellationToken, string Start = "", string End = "")
        {

            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }


                string[] startList = Start.Split('/');
                string[] endList = End.Split('/');

                string startDate = startList[2] + "-" + startList[0] + "-" + startList[1];
                string endDate = endList[2] + "-" + endList[0] + "-" + endList[1];

                DateTime sd = Convert.ToDateTime(startDate);
                DateTime ed = Convert.ToDateTime(endDate);

                //DateTime sd = Convert.ToDateTime(Start);
                //DateTime ed = Convert.ToDateTime(End);

                int id = logedinuser.Id;
                int role = logedinuser.Role;
                User user = new DatabaseEntities().Users.Where(x => x.IsActive == 1 && x.Id == id).FirstOrDefault();
                string loginuser = user.FirstName + " " + user.LastName;
                List<TaskCalendarDTO> googleTasks = new List<TaskCalendarDTO>();
                User u = new UserBL().getUsersById(logedinuser.Id);


                List<TaskCalendarDTO> task = new List<TaskCalendarDTO>();

                List<User_Task> tm;
                List<GroupTasks_Details> gtdl;
                if (role == 1)
                {
                    //tm = new User_TaskBL().getUser_TasksList().Where(x => x.CompletionDate == null && x.User1 != null).ToList();
                    //tm = tm.Where(x => x.StartDate >= sd && x.EndDate <= ed || (x.EndDate >= sd && x.StartDate < sd) || (x.StartDate <= ed && x.EndDate > ed)).ToList();
                    if (Start != "" && End != "")
                    {

                        tm = new User_TaskBL().spGetUserTasksByDate(Convert.ToInt32(logedinuser.Company), sd, ed).Where(x => x.CompletionDate == null && x.User1 != null).ToList();

                    }
                    else
                    {
                        tm = new User_TaskBL().spGetUserTasksByCompany(Convert.ToInt32(logedinuser.Company)).Where(x => x.CompletionDate == null && x.User1 != null).ToList();

                    }

                    if (user.SearchByPriority == "0" || user.SearchByPriority == "1" || user.SearchByPriority == "2")
                    {
                        tm = tm.Where(x => x.Priority == Convert.ToInt32(user.SearchByPriority)).ToList();
                    }

                    if (user.SearchByPrivate == "0" || user.SearchByPrivate == "1")
                    {
                        tm = tm.Where(x => x.IsPrivate == Convert.ToInt32(user.SearchByPrivate)).ToList();
                    }

                    //if (user.SearchByDepartment != null || user.SearchByDepartment != "")
                    //{
                    //    tm = tm.Where(x => x.D == Convert.ToInt32(user.SearchByPrivate)).ToList();
                    //}

                    if (user.SearchByUserType == "1" || user.SearchByUserType == "2" || user.SearchByUserType == "3")
                    {
                        tm = tm.Where(x => x.User1.Role == Convert.ToInt32(user.SearchByUserType)).ToList();
                    }

                    tm = tm.OrderByDescending(x => x.EndDate).ToList();
                }
                else if (user.Role == 2 || user.Role == 4)
                {
                    //List<User_Task> listemptask = new User_TaskBL().getUser_TasksList().Where(x => x.CompletionDate == null && x.User1 != null && x.User1.Role == 3).ToList();
                    //listemptask = listemptask.Where(x => x.StartDate >= sd && x.EndDate <= ed || (x.EndDate >= sd && x.StartDate < sd) || (x.StartDate <= ed && x.EndDate > ed)).ToList();

                    //listemptask = listemptask.Where(x => x.User1.Department.DivisionID == user.DivisionId).ToList();

                    //tm = new User_TaskBL().getUser_TasksList().Where(x => x.UserID == id && x.CompletionDate == null).ToList();
                    //tm = tm.Where(x => x.StartDate >= sd && x.EndDate <= ed || (x.EndDate >= sd && x.StartDate < sd) || (x.StartDate <= ed && x.EndDate > ed)).ToList();

                    //tm = tm.Concat(listemptask).ToList();

                    List<User_Task> listemptask2 = new User_TaskBL().spGetUserTasksByDateAndRole(3, Convert.ToInt32(logedinuser.Company), sd, ed).Where(x => x.CompletionDate == null && x.User1 != null && x.User1.Role == 3).ToList();
                    listemptask2 = listemptask2.Where(x => x.User1.Department.DivisionID == user.DivisionId).ToList();


                    tm = new User_TaskBL().spGetUserTasksByDateAndRole(2, Convert.ToInt32(logedinuser.Company), sd, ed).Where(x => x.UserID == id && x.CompletionDate == null && x.User1 != null).ToList();
                    tm = tm.Concat(listemptask2).ToList();
                    if (user.SearchByPriority == "0" || user.SearchByPriority == "1" || user.SearchByPriority == "2")
                    {
                        tm = tm.Where(x => x.Priority == Convert.ToInt32(user.SearchByPriority)).ToList();
                    }

                    if (user.SearchByPrivate == "0" || user.SearchByPrivate == "1")
                    {
                        tm = tm.Where(x => x.IsPrivate == Convert.ToInt32(user.SearchByPrivate)).ToList();
                    }

                    tm = tm.OrderByDescending(x => x.EndDate).ToList();
                }
                else
                {
                    //tm = new User_TaskBL().getUser_TasksList().Where(x => x.UserID == id && x.CompletionDate == null && x.UserID != null).ToList();
                    //tm = tm.Where(x => x.StartDate >= sd && x.EndDate <= ed || (x.EndDate >= sd && x.StartDate < sd) || (x.StartDate <= ed && x.EndDate > ed)).ToList();

                    tm = new User_TaskBL().spGetUserTasksByDateAndRole(3, Convert.ToInt32(logedinuser.Company), sd, ed).Where(x => x.UserID == id && x.CompletionDate == null && x.UserID != null).ToList();

                    if (user.SearchByPriority == "0" || user.SearchByPriority == "1" || user.SearchByPriority == "2")
                    {
                        tm = tm.Where(x => x.Priority == Convert.ToInt32(user.SearchByPriority)).ToList();
                    }

                    if (user.SearchByPrivate == "0" || user.SearchByPrivate == "1")
                    {
                        tm = tm.Where(x => x.IsPrivate == Convert.ToInt32(user.SearchByPrivate)).ToList();
                    }

                    tm = tm.OrderByDescending(x => x.EndDate).ToList();
                }
                if (user.OutlookToken != null)
                {
                    try
                    {
                        List<TaskCalendarDTO> tasks = await Calendar(user.OutlookToken);
                        if (tasks != null)

                            task.AddRange(tasks);
                    }
                    catch (Exception ex)
                    {

                    }



                }

                int flag = 0;
                List<string> departments = new List<string>();
                List<string> divisionlist = new List<string>();
                List<User_Task> taskslist = new List<User_Task>();
                if (logedinuser.Role == 1)
                {
                    foreach (User_Task i in tm)
                    {
                        if (i.DepartmentID != null)
                        {
                            if (i.User1.Role == 1)
                                if (!departments.Contains(i.DepartmentID))
                                {
                                    departments.Add(i.DepartmentID);
                                    taskslist.Add(i);
                                }
                        }
                        else if (i.DivisionID != null)
                        {
                            if (i.User1.Role == 1)
                                if (!divisionlist.Contains(i.DivisionID))
                                {
                                    divisionlist.Add(i.DivisionID);
                                    taskslist.Add(i);
                                }
                        }
                        else
                        {
                            taskslist.Add(i);
                        }
                    }
                }
                else
                {
                    taskslist = tm;
                }


                //tm = tm.Select(x =>x.DivisionID).Distinct().ToList();
                foreach (User_Task item in taskslist)
                {
                    bool editable;
                    int tasktype = -1;
                    if (logedinuser.Role == 3 && item.CreatedID == null)
                    {
                        editable = true;
                    }
                    else if (logedinuser.Role == 1 || logedinuser.Role == 2)
                    {
                        editable = true;
                    }
                    else
                    {
                        editable = false;
                    }


                    DateTime sdate = Convert.ToDateTime(item.StartDate);
                    DateTime edate = Convert.ToDateTime(item.EndDate);


                    string tooltipstartdate1 = item.StartDate.Value.ToString("MM/dd/yyyy");
                    string tooltipenddate1 = item.EndDate.Value.ToString("MM/dd/yyyy");


                    if (sdate < DateTime.Now.AddYears(1))
                    {



                        int daysleft = Convert.ToInt32((edate - sdate).TotalDays);



                        if (daysleft > 30)
                        {
                            sdate = edate.AddDays(-30);
                            item.StartDate = sdate;
                        }
                        string taskusername = item.User1.FirstName + " " + item.User1.LastName;
                        string personname = "";
                        if (loginuser == taskusername)
                        {
                            personname = "";
                        }
                        else
                        {
                            personname = "(" + taskusername + ")";
                        }

                        int uRole = 1;
                        if (item.User1.Role == 1)
                        {
                            uRole = 2;
                        }
                        else if (item.User1.Role == 3)
                        {
                            uRole = 0;
                        }
                        else
                        {
                            uRole = 1;
                        }
                        string DivorDep = "";

                        if (logedinuser.Role == 1)
                        {

                            if (item.DepartmentID != null && item.User1.Role == 1)
                            {
                                int c = new User_TaskBL().getUser_TasksList().Where(x => x.DepartmentID == item.DepartmentID && x.User1.Id != logedinuser.Id).Count();
                                if (c == 0)
                                {

                                    //new User_TaskBL().DeleteUser_Tasks(item.Id);
                                    continue;
                                }
                                int i = new User_TaskBL().getUser_TasksList().Where(x => x.DepartmentID == item.DepartmentID && x.User1.Id != logedinuser.Id && x.CompletionDate == null).Count();
                                if (i == 0)
                                {

                                    //   new User_TaskBL().DeleteUser_Tasks(item.Id);
                                    continue;
                                }
                                DivorDep = "(Department Task)";
                                tasktype = 3;
                                personname = "";
                            }
                            else if (item.DivisionID != null && item.User1.Role == 1)
                            {
                                int c = new User_TaskBL().getUser_TasksList().Where(x => x.DivisionID == item.DivisionID && x.User1.Id != logedinuser.Id).Count();
                                if (c == 0)
                                {
                                    continue;
                                }
                                int i = new User_TaskBL().getUser_TasksList().Where(x => x.DivisionID == item.DivisionID && x.User1.Id != logedinuser.Id && x.CompletionDate == null).Count();
                                if (i == 0)
                                {
                                    continue;
                                }
                                DivorDep = "(Division Task)";
                                tasktype = 4;
                                personname = "";
                            }
                            else
                            {
                                DivorDep = "";
                                tasktype = 1;
                            }
                        }
                        else
                        {
                            if(editable == true)
                            {
                                tasktype = 1;
                            }
                        }
                        

                        
                        string datestring1 = @"<b>Start: </b>" + tooltipstartdate1 + "<br> <b>End: </b>" + tooltipenddate1 + "";

                        string TReminder = "";
                        string DReminder = "";
                        if(item.BeforeDDateReminder!=null)
                        TReminder = @"<hr><b>Reminder 1: </b>" + item.BeforeDDateReminder.Value.ToString("MM-dd-yyyy") + "";

                        if (item.DailyReminder != null)
                        {
                            if (item.DailyReminder == 1)
                                DReminder = "Daily";
                            else if (item.DailyReminder == 2)
                                DReminder = "Weekly";
                            else
                                DReminder = "Monthly";
                            if(TReminder=="")
                            DReminder = @"<hr><b>Reminder 2: </b>" + DReminder + "";
                            else
                            DReminder = @"<br><b>Reminder 2: </b>" + DReminder + "";
                        }
                        int UserRole = (int)item.User1.Role;


                        if (item.Priority == 0)
                        {
                            if (u.LowPriorityColor != null && u.LowPriorityColor != "")
                            {

                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {


                                    task.Add(
                                        new TaskCalendarDTO()
                                        {
                                            TaskId = item.Id,
                                            start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                            title = DivorDep + item.Task.Name + " " + personname,
                                            end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                            color = u.LowPriorityColor,
                                            url = General_Purpose.generateUrl(item.Id, uRole, 1,1, UserRole),
                                            OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                            editable = editable,
                                            DepartmentID = item.DepartmentID,
                                            DivisionID = item.DivisionID,
                                            EDate = datestring1,
                                            TaskPriority = Convert.ToInt32(item.Priority),
                                            PrimaryLead = "",
                                            SecondaryLead = "",
                                            TReminder=TReminder,
                                            DReminder=DReminder,
                                            TaskType = tasktype,
                                            TaskStatus = Convert.ToInt32(item.Status)
                                            //description= DivorDep + item.Task.Name + " " + personname,
                                        });
                                }
                                else
                                {
                                    task.Add(
                                            new TaskCalendarDTO()
                                            {
                                                TaskId = item.Id,
                                                start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                title = DivorDep + item.Task.Name + " " + personname,
                                                end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                                color = u.LowPriorityColor,
                                                url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                editable = editable,
                                                DepartmentID = item.DepartmentID,
                                                DivisionID = item.DivisionID,
                                                EDate = datestring1,
                                                TaskPriority = Convert.ToInt32(item.Priority),
                                                PrimaryLead = "",
                                                SecondaryLead = "",
                                                TReminder = TReminder,
                                                DReminder = DReminder,
                                                TaskType = tasktype,
                                                TaskStatus = Convert.ToInt32(item.Status)
                                                //description = DivorDep + item.Task.Name + " " + personname,
                                            });
                                }

                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(
                                              new TaskCalendarDTO()
                                              {
                                                  TaskId = item.Id,
                                                  start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                  title = DivorDep + item.Task.Name + " " + personname,
                                                  end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                                  color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                  url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                  OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                  editable = editable,
                                                  DepartmentID = item.DepartmentID,
                                                  DivisionID = item.DivisionID,
                                                  EDate = datestring1,
                                                  TaskPriority = Convert.ToInt32(item.Priority),
                                                  PrimaryLead = "",
                                                  SecondaryLead = "",
                                                  TReminder = TReminder,
                                                  DReminder = DReminder,
                                                  TaskType = tasktype,
                                                  TaskStatus = Convert.ToInt32(item.Status)
                                                  //description = DivorDep + item.Task.Name + " " + personname,
                                              });
                                }
                                else
                                {
                                    task.Add(
                                             new TaskCalendarDTO()
                                             {
                                                 TaskId = item.Id,
                                                 start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                 title = DivorDep + item.Task.Name + " " + personname,
                                                 end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                                 color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                 url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                 OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                 editable = editable,
                                                 DepartmentID = item.DepartmentID,
                                                 DivisionID = item.DivisionID,
                                                 EDate = datestring1,
                                                 TaskPriority = Convert.ToInt32(item.Priority),
                                                 PrimaryLead = "",
                                                 SecondaryLead = "",
                                                 TReminder = TReminder,
                                                 DReminder = DReminder,
                                                 TaskType = tasktype,
                                                 TaskStatus = Convert.ToInt32(item.Status)
                                                 //description = DivorDep + item.Task.Name + " " + personname,
                                             });
                                }

                            }

                        }



                        if (item.Priority == 1)
                        {
                            if (u.MediumPriorityColor != null && u.MediumPriorityColor != "")
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(

                                            new TaskCalendarDTO()
                                            {
                                                TaskId = item.Id,
                                                start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                title = DivorDep + item.Task.Name + " " + personname,
                                                end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                                color = u.MediumPriorityColor,
                                                url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                editable = editable,
                                                DepartmentID = item.DepartmentID,
                                                DivisionID = item.DivisionID,
                                                EDate = datestring1,
                                                TaskPriority = Convert.ToInt32(item.Priority),
                                                PrimaryLead = "",
                                                SecondaryLead = "",
                                                TReminder = TReminder,
                                                DReminder = DReminder,
                                                TaskType = tasktype,
                                                TaskStatus = Convert.ToInt32(item.Status)
                                                //description = DivorDep + item.Task.Name + " " + personname,
                                            });
                                }
                                else
                                {
                                    task.Add(

                                            new TaskCalendarDTO()
                                            {
                                                TaskId = item.Id,
                                                start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                title = DivorDep + item.Task.Name + " " + personname,
                                                end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                                color = u.MediumPriorityColor,
                                                url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                editable = editable,
                                                DepartmentID = item.DepartmentID,
                                                DivisionID = item.DivisionID,
                                                EDate = datestring1,
                                                TaskPriority = Convert.ToInt32(item.Priority),
                                                PrimaryLead = "",
                                                SecondaryLead = "",
                                                TReminder = TReminder,
                                                DReminder = DReminder,
                                                TaskType = tasktype,
                                                TaskStatus = Convert.ToInt32(item.Status)
                                                //description = DivorDep + item.Task.Name + " " + personname,
                                            });
                                }

                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {

                                    task.Add(
                                            new TaskCalendarDTO()
                                            {
                                                TaskId = item.Id,
                                                start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                title = DivorDep + item.Task.Name + " " + personname,
                                                end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                                color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                editable = editable,
                                                DepartmentID = item.DepartmentID,
                                                DivisionID = item.DivisionID,
                                                EDate = datestring1,
                                                TaskPriority = Convert.ToInt32(item.Priority),
                                                PrimaryLead = "",
                                                SecondaryLead = "",
                                                TReminder = TReminder,
                                                DReminder = DReminder,
                                                TaskType = tasktype,
                                                TaskStatus = Convert.ToInt32(item.Status)
                                                //description = DivorDep + item.Task.Name + " " + personname,
                                            });
                                }
                                else
                                {
                                    task.Add(
                                            new TaskCalendarDTO()
                                            {
                                                TaskId = item.Id,
                                                start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                title = DivorDep + item.Task.Name + " " + personname,
                                                end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                                color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                editable = editable,
                                                DepartmentID = item.DepartmentID,
                                                DivisionID = item.DivisionID,
                                                EDate = datestring1,
                                                TaskPriority = Convert.ToInt32(item.Priority),
                                                PrimaryLead = "",
                                                SecondaryLead = "",
                                                TReminder = TReminder,
                                                DReminder = DReminder,
                                                TaskType = tasktype,
                                                TaskStatus = Convert.ToInt32(item.Status)
                                                //description = DivorDep + item.Task.Name + " " + personname,
                                            });
                                }

                            }

                        }



                        if (item.Priority == 2)
                        {
                            if (u.HighPriorityColor != null && u.HighPriorityColor != "")
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(
                                          new TaskCalendarDTO()
                                          {
                                              TaskId = item.Id,
                                              start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                              title = DivorDep + item.Task.Name + " " + personname,
                                              end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                              color = u.HighPriorityColor,
                                              url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                              OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                              editable = editable,
                                              DepartmentID = item.DepartmentID,
                                              DivisionID = item.DivisionID,
                                              EDate = datestring1,
                                              TaskPriority = Convert.ToInt32(item.Priority),
                                              PrimaryLead = "",
                                              SecondaryLead = "",
                                              TReminder = TReminder,
                                              DReminder = DReminder,
                                              TaskType = tasktype,
                                              TaskStatus = Convert.ToInt32(item.Status)
                                              //description = DivorDep + item.Task.Name + " " + personname,
                                          });
                                }
                                else
                                {
                                    task.Add(
                                          new TaskCalendarDTO()
                                          {
                                              TaskId = item.Id,
                                              start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                              title = DivorDep + item.Task.Name + " " + personname,
                                              end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                              color = u.HighPriorityColor,
                                              url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                              OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                              editable = editable,
                                              DepartmentID = item.DepartmentID,
                                              DivisionID = item.DivisionID,
                                              EDate = datestring1,
                                              TaskPriority = Convert.ToInt32(item.Priority),
                                              PrimaryLead = "",
                                              SecondaryLead = "",
                                              TReminder = TReminder,
                                              DReminder = DReminder,
                                              TaskType = tasktype,
                                              TaskStatus = Convert.ToInt32(item.Status)
                                              //description = DivorDep + item.Task.Name + " " + personname,
                                          });
                                }

                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(
                                               new TaskCalendarDTO()
                                               {
                                                   TaskId = item.Id,
                                                   start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                   title = DivorDep + item.Task.Name + " " + personname,
                                                   end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                                   color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                   url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                   OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                   editable = editable,
                                                   DepartmentID = item.DepartmentID,
                                                   DivisionID = item.DivisionID,
                                                   EDate = datestring1,
                                                   TaskPriority = Convert.ToInt32(item.Priority),
                                                   PrimaryLead = "",
                                                   SecondaryLead = "",
                                                   TReminder = TReminder,
                                                   DReminder = DReminder,
                                                   TaskType = tasktype,
                                                   TaskStatus = Convert.ToInt32(item.Status)
                                                   //description = DivorDep + item.Task.Name + " " + personname,
                                               });
                                }
                                else
                                {
                                    task.Add(
                                              new TaskCalendarDTO()
                                              {
                                                  TaskId = item.Id,
                                                  start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                                  title = DivorDep + item.Task.Name + " " + personname,
                                                  end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                                  color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                                  url = General_Purpose.generateUrl(item.Id, uRole, 1, 1, UserRole),
                                                  OldURL = General_Purpose.generateOldUrl(item.Id, uRole, 1),
                                                  editable = editable,
                                                  DepartmentID = item.DepartmentID,
                                                  DivisionID = item.DivisionID,
                                                  EDate = datestring1,
                                                  TaskPriority = Convert.ToInt32(item.Priority),
                                                  PrimaryLead = "",
                                                  SecondaryLead = "",
                                                  TReminder = TReminder,
                                                  DReminder = DReminder,
                                                  TaskType = tasktype,
                                                  TaskStatus = Convert.ToInt32(item.Status)
                                                  //description = DivorDep + item.Task.Name + " " + personname,
                                              });
                                }

                            }

                        }
                    }
                }

                gtdl = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().ToList();
                gtdl = gtdl.Where(x => x.StartDate >= sd && x.EndDate <= ed || (x.EndDate >= sd && x.StartDate < sd) || (x.StartDate <= ed && x.EndDate > ed)).ToList();
                if (role != 1)
                {
                    gtdl = gtdl.Where(x => x.GroupTask_User.Where(y => y.UserId == id && y.IsActive == 1).Count() > 0).ToList();
                }
                gtdl = gtdl.Where(x => x.CompletionDate == null).ToList();
                if (user.SearchByPriority == "0" || user.SearchByPriority == "1" || user.SearchByPriority == "2")
                {
                    gtdl = gtdl.Where(x => x.Priority == Convert.ToInt32(user.SearchByPriority)).ToList();
                }
                foreach (var item in gtdl)
                {

                    GroupTask_User gtu1 = new GroupTask_UserBL().getAllGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == item.Id && x.IsActive == 1 && x.LeadRole == 1).FirstOrDefault();

                    string primarylead = "";
                    string GTReminder = "";
                 GroupTaskReminder Gtr=  item.GroupTaskReminders.Where(x=>x.IsActive==1 && x.IsSent==0 && x.UserID==logedinuser.Id).FirstOrDefault();

                    if (Gtr != null)
                        GTReminder= @"<hr><b>Reminder: </b>" + Gtr.ReminderTime+"";

                    if (gtu1 != null)
                    {
                        primarylead = gtu1.User.FirstName + " " + gtu1.User.LastName;
                    }
                    else
                    {
                        gtu1 = new GroupTask_UserBL().getAllGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == item.Id && x.IsActive == 0 && x.LeadRole == 1).FirstOrDefault();
                        if (gtu1!=null)
                        primarylead = gtu1.User.FirstName + " " + gtu1.User.LastName + @" <span class='bg-danger'> &nbsp;Deleted&nbsp; </span> ";
                        else
                        primarylead = @" <span class='bg-danger'> &nbsp;No Primary Lead&nbsp; </span> ";
                    }


                    List<GroupTask_User> gtu2 = new GroupTask_UserBL().getAllGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == item.Id && x.IsActive == 1 && x.LeadRole == 2).ToList();

                    string secondlead = "";
                    if (gtu2.Count() != 0)
                    {
                        foreach (var ii in gtu2)
                        {
                            secondlead += ii.User.FirstName + " " + ii.User.LastName + "/ ";
                        }

                    }
                    else
                    {
                        secondlead = "Null//";
                    }

                    secondlead = secondlead.Substring(0, (secondlead.Length - 2));

                    bool editable = true;
                    if (logedinuser.Role == 3)
                    {
                        editable = false;
                    }
                    DateTime sdate = Convert.ToDateTime(item.StartDate);
                    DateTime edate = Convert.ToDateTime(item.EndDate);

                    string tooltipstartdate2 = item.StartDate.Value.ToString("MM/dd/yyyy");
                    string tooltipenddate2 = item.EndDate.Value.ToString("MM/dd/yyyy");

                    if (sdate < DateTime.Now.AddDays(30))
                    {

                        int daysleft = Convert.ToInt32((edate - sdate).TotalDays);



                        if (daysleft > 30)
                        {
                            sdate = edate.AddDays(-30);
                            item.StartDate = sdate;
                        }

                        string datestring2 = @"<b>Start: </b>" + tooltipstartdate2 + "<br> <b>End: </b>" + tooltipenddate2 + "";

                        if (item.Priority == 0)
                        {
                            if (u.LowPriorityColor != null && u.LowPriorityColor != "")
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = u.LowPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0,2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id,1,0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        //EDate = item.EndDate.Value.ToString("MM/dd/yyyy"),
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder= GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)
                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = u.LowPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder= GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }





                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder= GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }


                            }
                        }
                        if (item.Priority == 2)
                        {
                            if (u.HighPriorityColor != null && u.HighPriorityColor != "")
                            {

                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = u.HighPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = u.HighPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)
                                    });
                                }



                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)
                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }


                            }
                        }

                        if (item.Priority == 1)
                        {
                            if (u.MediumPriorityColor != null && u.MediumPriorityColor != "")
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = u.MediumPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)
                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = u.MediumPriorityColor,
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }



                            }
                            else
                            {
                                if (item.StartDate.Value.ToString("yyyy-MM-dd") == item.EndDate.Value.ToString("yyyy-MM-dd"))
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }
                                else
                                {
                                    task.Add(new TaskCalendarDTO()
                                    {
                                        TaskId = item.Id,
                                        start = item.StartDate.Value.ToString("yyyy-MM-dd"),
                                        title = item.GroupTask.Name,
                                        end = item.EndDate.Value.AddDays(1).ToString("yyyy-MM-dd"),
                                        color = General_Purpose.getTaskColor(item.Priority.HasValue ? item.Priority.Value : -1),
                                        url = General_Purpose.generateUrl(item.Id, 1, 0, 2),
                                        OldURL = General_Purpose.generateOldUrl(item.Id, 1, 0),
                                        editable = editable,
                                        description = "(Group Task)",
                                        EDate = datestring2,
                                        TaskPriority = Convert.ToInt32(item.Priority),
                                        PrimaryLead = primarylead,
                                        SecondaryLead = secondlead,
                                        GtReminder = GTReminder,
                                        TaskType = 2,
                                        TaskStatus = Convert.ToInt32(item.Status)

                                    });
                                }


                            }
                        }
                    }
                }


                try
                {
                    try
                    {
                        if (u.GoogleKeyLength != null)
                        {
                            AuthResult ar = GoogleCalendarAsyncer.SyncToGoogleCalendar(this);
                            if (ar.Credential == null)
                            {
                                return new RedirectResult(ar.RedirectUri);
                            }
                            ar.Credential.Token.RefreshToken = ProjectVaraiables.GOOGLE_REFRESH_TOKEN;
                            googleTasks = new HelpingClasses.GoogleCalendar.GoogleCalendars().googleTasksAsync(ar, u).Result;
                            if (googleTasks != null)
                                task.AddRange(googleTasks);
                        }
                    }
                    catch (Exception e)
                    {

                    }
                }
                catch (Exception ex)
                {
                    string filePath = Server.MapPath("~") + ProjectVaraiables.ErrorFolder + "tasks.txt";



                    using (StreamWriter writer = new StreamWriter(filePath, true))
                    {
                        writer.WriteLine("-----------------------------------------------------------------------------");
                        writer.WriteLine("Date : " + DateTime.Now.ToString());
                        writer.WriteLine();

                        while (ex != null)
                        {
                            writer.WriteLine(ex.GetType().FullName);
                            writer.WriteLine("Message : " + ex.Message);
                            writer.WriteLine("StackTrace : " + ex.StackTrace);

                            ex = ex.InnerException;
                        }
                    }
                }

                return Json(task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult RedirectToTask(string id = "", int IsGroupTask = -1)
        {
            try
            {
                if (id != "" && IsGroupTask != -1)
                {
                    if (IsGroupTask == 0)
                    {
                        int ID = General_Purpose.DecryptId((id));
                        User_Task task = new User_TaskBL().getUser_TasksById(ID);
                        if (task.User1.Role == 3)
                        {
                            return RedirectToAction("taskdetails", "Task", new { v = General_Purpose.EncryptId(task.Id), isModal = "01" });
                        }
                        else
                        {
                            return RedirectToAction("taskdetails", "Manager", new { v = General_Purpose.EncryptId(task.Id), isModal = "01" });

                        }
                    }
                    else if (IsGroupTask == 1)
                    {
                        return RedirectToAction("grouptaskdetails", "Task", new { v = id, isModal = "01" });

                    }
                }
                return RedirectToAction("Index", "Auth");
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public string testTask(string ids, string title = "", string start = "", string end = "", string DepartmentID = "", string DivisionID = "")
        {
            if (AuthenticateUser() == false)
            {
                CalenderGroupTaskDTO cgt = new CalenderGroupTaskDTO()
                {
                    Id = -121,
                    //EncryptedTaskId,
                    Hours = null,
                    CEU = null,
                    StartDate = start != "" ? Convert.ToDateTime(start).Date : DateTime.Now,
                    EndDate = end != "" ? Convert.ToDateTime(end).Date : DateTime.Now,
                    Grade = null,
                    CompletionDate = null,
                    Notes = null,
                    GroupTaskName = title,
                    GroupTaskId = null,
                    Status = null,
                    Cost = null,
                    Priority = null,
                    SlackChannel = null,
                    IsGroupTask = null,
                    CreatedBy = null

                };
                return JsonConvert.SerializeObject(cgt, Formatting.Indented,
             new JsonSerializerSettings()
             {
                 ReferenceLoopHandling = ReferenceLoopHandling.Ignore
             });
            }


            if (ids == "")
            {
                CalenderGroupTaskDTO cgt = new CalenderGroupTaskDTO()
                {
                    Id = -99, //GroupTaskdetailsId
                    //EncryptedTaskId,
                    Hours = null,
                    CEU = null,
                    StartDate = start != "" ? Convert.ToDateTime(start).Date : DateTime.Now,
                    EndDate = end != "" ? Convert.ToDateTime(end).Date : DateTime.Now,
                    Grade = null,
                    CompletionDate = null,
                    Notes = null,
                    GroupTaskName = title,
                    GroupTaskId = null,
                    Status = null,
                    Cost = null,
                    Priority = null,
                    SlackChannel = null,
                    IsGroupTask = null,
                    CreatedBy = null

                };
                return JsonConvert.SerializeObject(cgt, Formatting.Indented,
             new JsonSerializerSettings()
             {
                 ReferenceLoopHandling = ReferenceLoopHandling.Ignore
             });
            }

            if ((DepartmentID != "" || DivisionID != "") && logedinuser.Role == 1)
            {
                string i = "";
                if (DepartmentID != "")
                {
                    i = DepartmentID;
                }
                else
                {
                    i = DivisionID;
                }
                CalenderGroupTaskDTO cgt = new CalenderGroupTaskDTO()
                {
                    Id = -88, //its for identify its a dep/div task
                    //EncryptedTaskId,
                    Hours = null,
                    CEU = null,
                    StartDate = start != "" ? Convert.ToDateTime(start).Date : DateTime.Now,
                    EndDate = end != "" ? Convert.ToDateTime(end).Date : DateTime.Now,
                    Grade = null,
                    CompletionDate = null,
                    Notes = null,
                    GroupTaskName = i,
                    GroupTaskId = null,
                    Status = null,
                    Cost = null,
                    Priority = null,
                    SlackChannel = null,
                    IsGroupTask = null,
                    CreatedBy = null

                };
                return JsonConvert.SerializeObject(cgt, Formatting.Indented,
             new JsonSerializerSettings()
             {
                 ReferenceLoopHandling = ReferenceLoopHandling.Ignore
             });
            }
            string[] tokens = ids.Split('&');
            string[] z = tokens[0].Split('=');
            string[] individual = tokens[1].Split('=');
            string[] manager = tokens[2].Split('=');

            int userId = logedinuser.Id;
            if (individual[1] == "1")// It's an Individual Task
            {
                if (manager[1] == "0" || manager[1] == "1" || manager[1] == "2")
                {
                    //string statusValue = General_Purpose.getStatusValue();
                    int taskId = Convert.ToInt32(z[1]);
                    User_Task task = new User_TaskBL().getUser_TasksById(taskId);



                    CalenderTaskDTO mct = new CalenderTaskDTO()
                    {
                        Id = taskId,

                        EncryptedTaskId = General_Purpose.EncryptId(taskId),
                        //General_Purpose.Encrypt(HttpUtility.UrlEncode(taskId)),

                        IsActive = task.IsActive,
                        StartDate = task.StartDate,
                        EndDate = task.EndDate,
                        Notes = task.Notes,
                        Cost = task.Cost,
                        CEU = task.CEU,
                        Grad = task.Grad,
                        UserID = task.UserID,
                        TaskID = task.TaskID,
                        TaskName = task.Task.Name,
                        CreatedID = task.CreatedID,
                        Hours = task.Hours,
                        CompletionDate = task.CompletionDate,
                        File = task.File,
                        RepeatTime = task.RepeatTime,
                        RepeatDeadline = task.RepeatDeadline,
                        IsPrivate = task.IsPrivate,
                        Priority = task.Priority,
                        IsGroupTask = 0,
                        SessionRole = logedinuser.Role,
                        StatusValue = (int)task.Status,
                        Role = (int)task.User1.Role
                    };
                    if (task.User1.Role == 3)
                    {
                        mct.Employee = 1;
                    }
                    else
                    {
                        mct.Employee = 0;
                    }

                    mct.CurrentStatus = Convert.ToInt32(task.Status);
                    mct.status = new List<int>() { 1, 2, 3, 4 }.Where(x => x > task.Status);

                    List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId);

                    List<Task_Ticket> completedTickets = new List<Task_Ticket>();
                    List<Task_Ticket> uncompletedTickets = new List<Task_Ticket>();

                    if (t.Where(x => x.CompletionDatetime != null).Count() > 0)
                    {
                        foreach (Task_Ticket tt in t.Where(x => x.CompletionDatetime != null).ToList())
                        {
                            Task_Ticket ttt = new Task_Ticket()
                            {
                                Id = tt.Id,
                                UserTask_Id = tt.UserTask_Id,
                                Name = tt.Name,
                                CreationDatetime = tt.CreationDatetime,
                                CompletionDatetime = tt.CompletionDatetime,
                                CreatedBy = tt.CreatedBy,
                                CompletedByUser = tt.CompletedByUser,
                                IsActive = tt.IsActive,
                                CreatedOn = tt.CreatedOn
                            };

                            completedTickets.Add(ttt);
                        }
                    }

                    if (t.Where(x => x.CompletionDatetime == null).Count() > 0)
                    {
                        foreach (Task_Ticket tt in t.Where(x => x.CompletionDatetime == null).ToList())
                        {
                            Task_Ticket ttt = new Task_Ticket()
                            {
                                Id = tt.Id,
                                UserTask_Id = tt.UserTask_Id,
                                Name = tt.Name,
                                CreationDatetime = tt.CreationDatetime,
                                CompletionDatetime = tt.CompletionDatetime,
                                CreatedBy = tt.CreatedBy,
                                CompletedByUser = tt.CompletedByUser,
                                IsActive = tt.IsActive,
                                CreatedOn = tt.CreatedOn
                            };

                            uncompletedTickets.Add(ttt);
                        }
                    }

                    mct.completedTickets = completedTickets;
                    mct.uncompletedTickets = uncompletedTickets;
                    mct.completedTicketscount = completedTickets.Count();
                    mct.uncompletedTicketscount = uncompletedTickets.Count();


                    List<TaskCommentDTO> files = new List<TaskCommentDTO>();
                    int loginrole = -1;

                    ////////////////////////////////////////////////////
                    User us = new UserBL().getUsersById(userId);

                    if (us.IsMasterAdmin == 1)
                    {
                        loginrole = 0;
                    }
                    else if (us.Role == 1)
                    {
                        loginrole = 1;
                    }
                    else if (us.Role == 2 || us.Role == 2)
                    {
                        loginrole = 2;
                    }
                    else if (us.Role == 3)
                    {
                        loginrole = 3;
                    }

                    foreach (var item in task.TaskComments)
                    {


                        List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                        if (item.ParentId == null)
                        {
                            TaskComment repitem = new TaskCommentBL().getTaskCommentsList().Where(x => x.ParentId == item.Id && x.IsActive == 1).FirstOrDefault();


                            if (repitem != null)
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();


                                TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                tcd2.Comment = repitem.Comment;
                                tcd2.Id = repitem.Id;
                                tcd2.isManager = 1;
                                tcd2.userId = repitem.User.Id;
                                User uss = new UserBL().getUsersById(tcd2.userId);

                                if (loginrole == 0)
                                {
                                    if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                }

                                tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                // tcd.ROLE =Convert.ToInt32( item.User.Role);
                                if (repitem.File != null)
                                {
                                    tcd2.File = repitem.FileName;
                                    tcd2.FilePath = repitem.File;
                                }
                                else
                                    tcd2.File = null;
                                tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                                files2.Add(tcd2);
                                tcd2.prime = -1;



                                tcd.obj = files2;
                                tcd.Comment = item.Comment;
                                tcd.Id = item.Id;
                                tcd.isManager = 1;
                                tcd.userId = item.User.Id;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }


                                tcd.CommentTime = Convert.ToDateTime(item.Date);
                                // tcd.ROLE =Convert.ToInt32( item.User.Role);
                                if (item.File != null)
                                {
                                    tcd.File = item.FileName;
                                    tcd.FilePath = item.File;
                                }
                                else
                                    tcd.File = null;
                                tcd.Name = item.User.FirstName + " " + item.User.LastName;

                                files.Add(tcd);
                                tcd.prime = -1;

                            }
                            else
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();
                                tcd.Comment = item.Comment;
                                tcd.Id = item.Id;
                                tcd.isManager = 1;
                                tcd.userId = item.User.Id;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }


                                tcd.CommentTime = Convert.ToDateTime(item.Date);
                                // tcd.ROLE =Convert.ToInt32( item.User.Role);
                                if (item.File != null)
                                {
                                    tcd.File = item.FileName;
                                    tcd.FilePath = item.File;
                                }
                                else
                                    tcd.File = null;
                                tcd.Name = item.User.FirstName + " " + item.User.LastName;

                                files.Add(tcd);
                                tcd.prime = -1;

                            }


                        }
                    }



                    ///////////////////////////////////////////////



                    mct.comments = files;


                    return JsonConvert.SerializeObject(mct, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
            }
            else// It's a Group Task
            {
                int divisionId = -1;
                //int id = General_Purpose.DecryptId((v));
                int id = Convert.ToInt32(z[1]);
                //int userId = logedinuser.Id;
                Boolean check = true;

                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(id);
                GroupTask_User gtu = task.GroupTask_User.Where(x => x.User.DivisionId.HasValue).FirstOrDefault();
                if (gtu == null)
                {
                    gtu = task.GroupTask_User.Where(x => x.User.DepartmentId.HasValue).FirstOrDefault();
                    if (gtu != null)
                    {
                        divisionId = gtu.User.Department.DivisionID.Value;
                    }
                    else
                        divisionId = -1;

                }
                else
                {
                    divisionId = gtu.User.DivisionId.Value;
                }
                int role = logedinuser.Role;

                if (role != 1)
                {
                    check = task.GroupTask_User.Where(x => x.UserId == userId).Count() > 0;
                    if (!check)
                        return null;
                }
                int grouptaskuserId = 0;

                int sessionId = logedinuser.Id;


                if (task.GroupTask_User.Where(x => x.UserId == sessionId).Count() > 0)
                {
                    grouptaskuserId = task.GroupTask_User.FirstOrDefault(x => x.UserId == sessionId).Id;
                }
                else
                {
                    grouptaskuserId = -1;
                }

                CalenderGroupTaskDTO cgt = new CalenderGroupTaskDTO()
                {
                    Id = id, //GroupTaskdetailsId
                    EncryptedTaskId = General_Purpose.EncryptId(id),
                    Hours = task.Hours,
                    CEU = task.CEU,
                    StartDate = task.StartDate,
                    EndDate = task.EndDate,
                    Grade = task.Grade,
                    CompletionDate = task.CompletionDate,
                    Notes = task.Notes,
                    GroupTaskName = task.GroupTask.Name,
                    GroupTaskId = task.GroupTask.Id,
                    Status = task.Status,
                    Cost = task.Cost,
                    Priority = task.Priority,
                    SlackChannel = task.SlackChannel,
                    IsGroupTask = 1,
                    CreatedBy = task.CreatedBy

                };

                cgt.CurrentStatus = task.Status;
                cgt.status = new List<int>() { 0, 1, 2, 3, 4 }.Where(x => x > task.Status.Value).ToList();

                List<TaskCommentDTO> files = new List<TaskCommentDTO>();
                int loginrole = -1;
                ////////////////////////////////////////////////////
                User us = new UserBL().getUsersById(userId);

                if (us.IsMasterAdmin == 1)
                {
                    loginrole = 0;
                }
                else if (us.Role == 1)
                {
                    loginrole = 1;
                }
                else if (us.Role == 2 || us.Role == 2)
                {
                    loginrole = 2;
                }
                else if (us.Role == 3)
                {
                    loginrole = 3;
                }

                foreach (var item in task.GroupTask_User)
                {
                    foreach (var comment in item.GroupTaskComments.Where(x => x.IsActive == 1).ToList())
                    {
                        List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                        if (comment.ParentId == null)
                        {
                            GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id).FirstOrDefault();

                            if (repitem != null)
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();

                                TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                User uss = new User();
                                tcd2.Comment = repitem.Comment;
                                tcd2.Id = repitem.Id;
                                tcd2.isManager = 0;
                                if (repitem.GroupTask_User == null)
                                {
                                    uss = new UserBL().getUsersById(repitem.UserId.Value);
                                }
                                else
                                {
                                    tcd2.userId = repitem.GroupTask_User.UserId.Value;
                                    uss = new UserBL().getUsersById(tcd2.userId);
                                }


                                if (loginrole == 0)
                                {
                                    if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                }



                                tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                if (repitem.File != null)
                                {
                                    tcd2.File = repitem.FileName;
                                    tcd2.FilePath = repitem.File;
                                }
                                else
                                    tcd2.File = null;
                                if (repitem.GroupTask_User == null)
                                {
                                    User usss = new UserBL().getUsersById(repitem.UserId.Value);
                                    tcd2.Name = usss.FirstName + " " + usss.LastName;
                                }
                                else
                                    tcd2.Name = repitem.GroupTask_User.User.FirstName + " " + repitem.GroupTask_User.User.LastName;


                                files2.Add(tcd2);
                                tcd2.prime = -1;


                                tcd.obj = files2;
                                tcd.Comment = comment.Comment;
                                tcd.Id = comment.Id;
                                tcd.isManager = 0;
                                tcd.userId = comment.GroupTask_User.UserId.Value;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }


                                tcd.CommentTime = Convert.ToDateTime(comment.Date);
                                if (comment.File != null)
                                {
                                    tcd.File = comment.FileName;
                                    tcd.FilePath = comment.File;
                                }
                                else
                                    tcd.File = null;
                                tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;

                                files.Add(tcd);
                                tcd.prime = -1;
                            }
                            else
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();
                                tcd.Comment = comment.Comment;
                                tcd.Id = comment.Id;
                                tcd.isManager = 0;
                                tcd.userId = comment.GroupTask_User.UserId.Value;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }



                                tcd.CommentTime = Convert.ToDateTime(comment.Date);
                                if (comment.File != null)
                                {
                                    tcd.File = comment.FileName;
                                    tcd.FilePath = comment.File;
                                }
                                else
                                    tcd.File = null;
                                tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;

                                files.Add(tcd);
                                tcd.prime = -1;
                            }



                        }


                    }
                }
                foreach (var comment in task.GroupTaskComments.Where(x => x.IsActive == 1))
                {
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (comment.ParentId == null)
                    {




                        GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id && x.IsActive == 1).FirstOrDefault();
                        if (repitem != null)
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();

                            TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                            User uss = new User();
                            tcd2.Comment = repitem.Comment;
                            tcd2.Id = repitem.Id;
                            tcd2.isManager = 0;
                            if (repitem.GroupTask_User == null)
                            {
                                uss = new UserBL().getUsersById(repitem.UserId.Value);
                            }
                            else
                            {
                                tcd2.userId = repitem.GroupTask_User.UserId.Value;
                                uss = new UserBL().getUsersById(tcd2.userId);
                            }


                            if (loginrole == 0)
                            {
                                if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                            }


                            tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                            if (repitem.File != null)
                            {
                                tcd2.File = repitem.FileName;
                                tcd2.FilePath = repitem.File;
                            }
                            else
                                tcd2.File = null;
                            if (repitem.User == null)
                            {
                                User usss = new UserBL().getUsersById(repitem.GroupTask_User.UserId.Value);
                                tcd2.Name = usss.FirstName + " " + usss.LastName;
                            }
                            else
                                tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                            files2.Add(tcd2);
                            tcd2.prime = -1;

                            tcd.obj = files2;

                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);


                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.User.FirstName + " " + comment.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                        else
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);


                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.User.FirstName + " " + comment.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }

                    }


                }


                ///////////////////////////////////////////////


                List<GroupTask_Ticket> gtt = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(task.Id);


                cgt.completedgroupTickets = gtt.Where(x => x.CompletionDatetime != null).ToList();
                cgt.completedgroupTicketscount = gtt.Where(x => x.CompletionDatetime != null).ToList().Count();


                cgt.uncompletedgroupTickets = gtt.Where(x => x.CompletionDatetime == null).ToList();
                cgt.uncompletedgroupTicketscount = gtt.Where(x => x.CompletionDatetime == null).ToList().Count();

                files = files.OrderBy(x => x.CommentTime).ToList();
                cgt.GroupTaskComments = files;
                cgt.grouptaskuserId = grouptaskuserId;


                return JsonConvert.SerializeObject(cgt, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
            }

            return null;

        }

        [HttpPost]
        public string changecalenderTaskStatus(int status, string traineTaskId)
        {
            int taskId = Convert.ToInt32(traineTaskId);

            DatabaseEntities de = new DatabaseEntities();
            List<User> email = new List<User>();
            List<string> content = new List<string>();
            User_Task User_Task = new User_TaskBL().getUser_TasksByIdWrapper(taskId, de);
            if (User_Task.Status != status)
            {
                email.Add(User_Task.User1);
                content.Add(Messages.taskComment(User_Task));
                data.TaskId = User_Task.Id.ToString();
                General_Purpose.SendPushNotification(User_Task.User1.Player_Id, Messages.taskComment(User_Task, 1), "Message from Zuptu", data, User_Task.User1.Id.ToString());


                User_Task.Status = status;
                Communication.sendMessage(content, email);
                if (status == 4)
                {
                    User_Task.CompletionDate = DateTime.Now;
                    Communication.sendMessage(new List<string>() { (Messages.taskCompleted(User_Task)) }, email);

                    data.TaskId = User_Task.Id.ToString();
                    General_Purpose.SendPushNotification(User_Task.User1.Player_Id, Messages.taskCompleted(User_Task, 1), "Message from Zuptu", data, User_Task.User1.Id.ToString());

                }
               // User_Task.CanvasCourseId = User_Task.CanvasCourseId;
                new User_TaskBL().UpdateUser_Tasks(User_Task, de);
                de.SaveChanges();
            }



            return JsonConvert.SerializeObject(status, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }


        public string changecalendergroupTaskStatus(int status, int grouptaskId)
        {
            DatabaseEntities de = new DatabaseEntities();
            GroupTasks_Details gtbl = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(grouptaskId, de);
            List<User> emails = new List<User>();
            List<string> comment = new List<string>();

            foreach (var item in gtbl.GroupTask_User)
            {
                emails.Add(item.User);
                comment.Add(Messages.groupTaskStatusUpdation(gtbl, item.User));

                data.GroupTaskDetailsId = gtbl.Id.ToString();
                General_Purpose.SendPushNotification(item.User.Player_Id, Messages.groupTaskStatusUpdation(gtbl, item.User, 1), "Message from Zuptu", data, item.User.Id.ToString());

            }

            if (gtbl.Status != status)
            {
                gtbl.Status = status;
                if (status == 4)
                {
                    gtbl.CompletionDate = DateTime.Now;
                }
                new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(gtbl, de);
                de.SaveChanges();
            }
            Communication.sendMessage(comment, emails, Messages.groupTaskSlackMessage(gtbl.GroupTask.Name), gtbl.SlackChannel);

            return JsonConvert.SerializeObject(status, Formatting.Indented,
                          new JsonSerializerSettings()
                          {
                              ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                          });
        }



        [HttpPost]
        public string addCommentTask(string commenttaskId, string comment)
        {
            User_Task task = new User_TaskBL().getUser_TasksById(Convert.ToInt32(commenttaskId));
            TaskComment mtc = new TaskComment() { TaskId = Convert.ToInt32(commenttaskId), Comment = comment, Date = DateTime.Now.ToString() };
            mtc.IsActive = 1;
            mtc.UserId = logedinuser.Id;
            int userId = logedinuser.Id;
            int count = Request.Files.Count;
            if (count > 0)
            {
                string path = null;
                var file = Request.Files[0];
                if (file.ContentLength > 0)
                {
                    BlobManager BlobManagerObj = new BlobManager();
                    mtc.FileName = file.FileName;
                    path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                    string FileAbsoluteUri = BlobManagerObj.UploadFile(file, path);

                    mtc.File = path;

                }
            }

            //Additional attributes
            User_Task ut5 = new User_TaskBL().getUser_TasksById((int)mtc.TaskId);
            mtc.CompanyId = Convert.ToInt32(logedinuser.Company);
            mtc.TaskStartDate = ut5.StartDate;
            mtc.TaskEndDate = ut5.EndDate;
            mtc.DepartmentId = (int)ut5.Task.DepartmentID;
            mtc.DivisionId = (int)ut5.Task.Department.DivisionID;
            mtc.CreatedBy = logedinuser.Id;
            new TaskCommentBL().AddTaskComments(mtc);

            List<TaskCommentDTO> files = new List<TaskCommentDTO>();
            int loginrole = -1;


            ////////////////////////////////////////////////////
            User us = new UserBL().getUsersById(userId);

            if (us.IsMasterAdmin == 1)
            {
                loginrole = 0;
            }
            else if (us.Role == 1)
            {
                loginrole = 1;
            }
            else if (us.Role == 2 || us.Role == 2)
            {
                loginrole = 2;
            }
            else if (us.Role == 3)
            {
                loginrole = 3;
            }

            foreach (var item in task.TaskComments)
            {
                List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                if (item.ParentId == null)
                {
                    TaskComment repitem = new TaskCommentBL().getTaskCommentsList().Where(x => x.ParentId == item.Id && x.IsActive == 1).FirstOrDefault();

                    if (repitem != null)
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();


                        TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                        tcd2.Comment = repitem.Comment;
                        tcd2.Id = repitem.Id;
                        tcd2.isManager = 1;
                        tcd2.userId = repitem.User.Id;
                        User uss = new UserBL().getUsersById(tcd2.userId);

                        if (loginrole == 0)
                        {
                            if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                        }

                        tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (repitem.File != null)
                        {
                            tcd2.File = repitem.FileName;
                            tcd2.FilePath = repitem.File;
                        }
                        else
                            tcd2.File = null;
                        tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                        files2.Add(tcd2);
                        tcd2.prime = -1;


                        tcd.obj = files2;
                        tcd.Comment = item.Comment;
                        tcd.Id = item.Id;
                        tcd.isManager = 1;
                        tcd.userId = item.User.Id;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }


                        tcd.CommentTime = Convert.ToDateTime(item.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (item.File != null)
                        {
                            tcd.File = item.FileName;
                            tcd.FilePath = item.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = item.User.FirstName + " " + item.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;

                    }
                    else
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();
                        tcd.Comment = item.Comment;
                        tcd.Id = item.Id;
                        tcd.isManager = 1;
                        tcd.userId = item.User.Id;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }


                        tcd.CommentTime = Convert.ToDateTime(item.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (item.File != null)
                        {
                            tcd.File = item.FileName;
                            tcd.FilePath = item.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = item.User.FirstName + " " + item.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;

                    }


                }
            }




            ///////////////////////////////////////////////


            List<TaskCommentDTO> comments = files;

            return JsonConvert.SerializeObject(comments, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        [HttpPost]
        public string addtodoTask(string todotaskId, string todoName)
        {
            int taskId = Convert.ToInt32(todotaskId);
            User_Task task = new User_TaskBL().getUser_TasksById(Convert.ToInt32(todotaskId));

            Task_Ticket taskticket = new Task_Ticket()
            {
                UserTask_Id = Convert.ToInt32(todotaskId),
                Name = todoName,
                CreationDatetime = DateTime.Now,
                IsActive = 1,
                CreatedBy = logedinuser.Id
            };
            //Additional attributes
            User_Task ut4 = new User_TaskBL().getUser_TasksById((int)taskticket.UserTask_Id);
            taskticket.CompanyId = Convert.ToInt32(logedinuser.Company);
            taskticket.TaskStartDate = ut4.StartDate;
            taskticket.TaskEndDate = ut4.EndDate;
            taskticket.DepartmentId = (int)ut4.Task.DepartmentID;
            taskticket.DivisionId = (int)ut4.Task.Department.DivisionID;

            new Task_TicketBL().AddTask_Tickets(taskticket);





            return JsonConvert.SerializeObject(repeatedmethod(taskId), Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   }); ;
        }

        [HttpPost]
        public string editTaskTicket(int ticketId, string name)
        {
            DatabaseEntities de = new DatabaseEntities();
            de.Configuration.ProxyCreationEnabled = true;
            de.Configuration.LazyLoadingEnabled = false;
            Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
            int id = logedinuser.Id;
            int role = logedinuser.Role;

            gtt.Name = name;

            de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
            de.SaveChanges();
            de.Configuration.LazyLoadingEnabled = true;
            de.Configuration.ProxyCreationEnabled = false;




            repeatedmethod(Convert.ToInt32(gtt.UserTask_Id));

            return JsonConvert.SerializeObject(repeatedmethod(Convert.ToInt32(gtt.UserTask_Id)), Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });


        }

        [HttpPost]
        public string deleteTaskTicket(int ticketId)
        {
            DatabaseEntities de = new DatabaseEntities();
            de.Configuration.ProxyCreationEnabled = true;
            de.Configuration.LazyLoadingEnabled = false;
            Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
            int id = logedinuser.Id;
            int role = logedinuser.Role;

            gtt.IsActive = 0;

            de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
            de.SaveChanges();
            de.Configuration.LazyLoadingEnabled = true;
            de.Configuration.ProxyCreationEnabled = false;



            repeatedmethod(Convert.ToInt32(gtt.UserTask_Id));

            return JsonConvert.SerializeObject(repeatedmethod(Convert.ToInt32(gtt.UserTask_Id)), Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }


        [HttpPost]
        public string completecalenderTaskTicket(int ticketId)
        {
            DatabaseEntities de = new DatabaseEntities();
            de.Configuration.ProxyCreationEnabled = true;
            de.Configuration.LazyLoadingEnabled = false;
            Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
            int id = logedinuser.Id;
            int role = logedinuser.Role;

            gtt.CompletedByUser = id;

            gtt.CompletionDatetime = DateTime.Now;
            de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
            de.SaveChanges();
            de.Configuration.LazyLoadingEnabled = true;
            de.Configuration.ProxyCreationEnabled = false;



            repeatedmethod(Convert.ToInt32(gtt.UserTask_Id));

            return JsonConvert.SerializeObject(repeatedmethod(Convert.ToInt32(gtt.UserTask_Id)), Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        [HttpPost]
        public string completecalendergroupTaskTicket(int ticketId)
        {
            DatabaseEntities de = new DatabaseEntities();
            de.Configuration.ProxyCreationEnabled = true;
            de.Configuration.LazyLoadingEnabled = false;
            GroupTask_Ticket gtt = de.GroupTask_Ticket.FirstOrDefault(x => x.Id == ticketId);
            int id = logedinuser.Id;
            int role = logedinuser.Role;
            gtt.CompletedByUser = id;
            gtt.CompletionDatetime = DateTime.Now;
            de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
            de.SaveChanges();
            de.Configuration.LazyLoadingEnabled = true;
            de.Configuration.ProxyCreationEnabled = false;


            return JsonConvert.SerializeObject(repeatedgrouptaskmethod(Convert.ToInt32(gtt.GroupTaskDetails_Id)), Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        public CalenderTaskDTO repeatedmethod(int taskId)
        {

            int userId = logedinuser.Id;
            User_Task task = new User_TaskBL().getUser_TasksById(taskId);
            CalenderTaskDTO mct = new CalenderTaskDTO()
            {
                Id = taskId,
                //EncryptedTaskId =General_Purpose.EncryptId((taskId)),
                IsActive = task.IsActive,
                StartDate = task.StartDate,
                EndDate = task.EndDate,
                Notes = task.Notes,
                Cost = task.Cost,
                CEU = task.CEU,
                Grad = task.Grad,
                UserID = task.UserID,
                TaskID = task.TaskID,
                TaskName = task.Task.Name,
                CreatedID = task.CreatedID,
                Hours = task.Hours,
                CompletionDate = task.CompletionDate,
                File = task.File,
                RepeatTime = task.RepeatTime,
                RepeatDeadline = task.RepeatDeadline,
                IsPrivate = task.IsPrivate,
                Priority = task.Priority,
                IsGroupTask = 0,
                SessionRole = logedinuser.Role,
                StatusValue = (int)task.Status
            };

            mct.CurrentStatus = Convert.ToInt32(task.Status);
            mct.status = new List<int>() { 1, 2, 3, 4 }.Where(x => x > task.Status);

            List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId);

            List<Task_Ticket> completedTickets = new List<Task_Ticket>();
            List<Task_Ticket> uncompletedTickets = new List<Task_Ticket>();

            if (t.Where(x => x.CompletionDatetime != null).Count() > 0)
            {
                foreach (Task_Ticket tt in t.Where(x => x.CompletionDatetime != null).ToList())
                {
                    Task_Ticket ttt = new Task_Ticket()
                    {
                        Id = tt.Id,
                        UserTask_Id = tt.UserTask_Id,
                        Name = tt.Name,
                        CreationDatetime = tt.CreationDatetime,
                        CompletionDatetime = tt.CompletionDatetime,
                        CreatedBy = tt.CreatedBy,
                        CompletedByUser = tt.CompletedByUser,
                        IsActive = tt.IsActive,
                        CreatedOn = tt.CreatedOn
                    };

                    completedTickets.Add(ttt);
                }
            }

            if (t.Where(x => x.CompletionDatetime == null).Count() > 0)
            {
                foreach (Task_Ticket tt in t.Where(x => x.CompletionDatetime == null).ToList())
                {
                    Task_Ticket ttt = new Task_Ticket()
                    {
                        Id = tt.Id,
                        UserTask_Id = tt.UserTask_Id,
                        Name = tt.Name,
                        CreationDatetime = tt.CreationDatetime,
                        CompletionDatetime = tt.CompletionDatetime,
                        CreatedBy = tt.CreatedBy,
                        CompletedByUser = tt.CompletedByUser,
                        IsActive = tt.IsActive,
                        CreatedOn = tt.CreatedOn
                    };

                    uncompletedTickets.Add(ttt);
                }
            }

            mct.completedTickets = completedTickets;
            mct.uncompletedTickets = uncompletedTickets;
            mct.completedTicketscount = completedTickets.Count();
            mct.uncompletedTicketscount = uncompletedTickets.Count();


            List<TaskCommentDTO> files = new List<TaskCommentDTO>();
            int loginrole = -1;
            ////////////////////////////////////////////////////
            User us = new UserBL().getUsersById(userId);

            if (us.IsMasterAdmin == 1)
            {
                loginrole = 0;
            }
            else if (us.Role == 1)
            {
                loginrole = 1;
            }
            else if (us.Role == 2 || us.Role == 2)
            {
                loginrole = 2;
            }
            else if (us.Role == 3)
            {
                loginrole = 3;
            }

            foreach (var item in task.TaskComments)
            {
                List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                if (item.ParentId == null)
                {
                    TaskComment repitem = new TaskCommentBL().getTaskCommentsList().Where(x => x.ParentId == item.Id && x.IsActive == 1).FirstOrDefault();

                    if (repitem != null)
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();


                        TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                        tcd2.Comment = repitem.Comment;
                        tcd2.Id = repitem.Id;
                        tcd2.isManager = 1;
                        tcd2.userId = repitem.User.Id;
                        User uss = new UserBL().getUsersById(tcd2.userId);

                        if (loginrole == 0)
                        {
                            if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                        }

                        tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (repitem.File != null)
                        {
                            tcd2.File = repitem.FileName;
                            tcd2.FilePath = repitem.File;
                        }
                        else
                            tcd2.File = null;
                        tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                        files2.Add(tcd2);
                        tcd2.prime = -1;


                        tcd.obj = files2;
                        tcd.Comment = item.Comment;
                        tcd.Id = item.Id;
                        tcd.isManager = 1;
                        tcd.userId = item.User.Id;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }


                        tcd.CommentTime = Convert.ToDateTime(item.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (item.File != null)
                        {
                            tcd.File = item.FileName;
                            tcd.FilePath = item.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = item.User.FirstName + " " + item.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;

                    }
                    else
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();
                        tcd.Comment = item.Comment;
                        tcd.Id = item.Id;
                        tcd.isManager = 1;
                        tcd.userId = item.User.Id;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }


                        tcd.CommentTime = Convert.ToDateTime(item.Date);
                        // tcd.ROLE =Convert.ToInt32( item.User.Role);
                        if (item.File != null)
                        {
                            tcd.File = item.FileName;
                            tcd.FilePath = item.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = item.User.FirstName + " " + item.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;

                    }


                }
            }



            mct.comments = files;


            return mct;
        }

        public CalenderGroupTaskDTO repeatedgrouptaskmethod(int id)
        {
            int divisionId = -1;
            int userId = logedinuser.Id;
            Boolean check = true;

            GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(id);
            GroupTask_User gtu = task.GroupTask_User.Where(x => x.User.DivisionId.HasValue).FirstOrDefault();
            if (gtu == null)
            {
                gtu = task.GroupTask_User.Where(x => x.User.DepartmentId.HasValue).FirstOrDefault();
                if (gtu != null)
                {
                    divisionId = gtu.User.Department.DivisionID.Value;
                }
                else
                    divisionId = -1;

            }
            else
            {
                divisionId = gtu.User.DivisionId.Value;
            }
            int role = logedinuser.Role;

            if (role != 1)
            {
                check = task.GroupTask_User.Where(x => x.UserId == userId).Count() > 0;
                if (!check)
                    return null;
            }
            int grouptaskuserId = 0;

            int sessionId = logedinuser.Id;


            if (task.GroupTask_User.Where(x => x.UserId == sessionId).Count() > 0)
            {
                grouptaskuserId = task.GroupTask_User.FirstOrDefault(x => x.UserId == sessionId).Id;
            }
            else
            {
                grouptaskuserId = -1;
            }

            CalenderGroupTaskDTO cgt = new CalenderGroupTaskDTO()
            {
                Id = id, //GroupTaskdetailsId
                         //EncryptedTaskId,
                Hours = task.Hours,
                CEU = task.CEU,
                StartDate = task.StartDate,
                EndDate = task.EndDate,
                Grade = task.Grade,
                CompletionDate = task.CompletionDate,
                Notes = task.Notes,
                GroupTaskName = task.GroupTask.Name,
                GroupTaskId = task.GroupTask.Id,
                Status = task.Status,
                Cost = task.Cost,
                Priority = task.Priority,
                SlackChannel = task.SlackChannel,
                IsGroupTask = 1,
                CreatedBy = task.CreatedBy

            };

            cgt.CurrentStatus = task.Status;
            cgt.status = new List<int>() { 0, 1, 2, 3, 4 }.Where(x => x > task.Status.Value).ToList();

            List<TaskCommentDTO> files = new List<TaskCommentDTO>();
            int loginrole = -1;
            ////////////////////////////////////////////////////
            User us = new UserBL().getUsersById(userId);

            if (us.IsMasterAdmin == 1)
            {
                loginrole = 0;
            }
            else if (us.Role == 1)
            {
                loginrole = 1;
            }
            else if (us.Role == 2 || us.Role == 2)
            {
                loginrole = 2;
            }
            else if (us.Role == 3)
            {
                loginrole = 3;
            }

            foreach (var item in task.GroupTask_User)
            {
                foreach (var comment in item.GroupTaskComments.Where(x => x.IsActive == 1).ToList())
                {
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (comment.ParentId == null)
                    {
                        GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id).FirstOrDefault();

                        if (repitem != null)
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();


                            TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                            User uss = new User();
                            tcd2.Comment = repitem.Comment;
                            tcd2.Id = repitem.Id;
                            tcd2.isManager = 0;
                            if (repitem.GroupTask_User == null)
                            {
                                uss = new UserBL().getUsersById(repitem.UserId.Value);
                            }
                            else
                            {
                                tcd2.userId = repitem.GroupTask_User.UserId.Value;
                                uss = new UserBL().getUsersById(tcd2.userId);
                            }


                            if (loginrole == 0)
                            {
                                if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                            }



                            tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                            if (repitem.File != null)
                            {
                                tcd2.File = repitem.FileName;
                                tcd2.FilePath = repitem.File;
                            }
                            else
                                tcd2.File = null;
                            if (repitem.GroupTask_User == null)
                            {
                                User usss = new UserBL().getUsersById(repitem.UserId.Value);
                                tcd2.Name = usss.FirstName + " " + usss.LastName;
                            }
                            else
                                tcd2.Name = repitem.GroupTask_User.User.FirstName + " " + repitem.GroupTask_User.User.LastName;


                            files2.Add(tcd2);
                            tcd2.prime = -1;


                            tcd.obj = files2;
                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.GroupTask_User.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);

                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }


                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                        else
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.GroupTask_User.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);

                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }



                    }


                }
            }
            foreach (var comment in task.GroupTaskComments.Where(x => x.IsActive == 1))
            {
                List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                if (comment.ParentId == null)
                {




                    GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id && x.IsActive == 1).FirstOrDefault();
                    if (repitem != null)
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();

                        TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                        User uss = new User();
                        tcd2.Comment = repitem.Comment;
                        tcd2.Id = repitem.Id;
                        tcd2.isManager = 0;
                        if (repitem.GroupTask_User == null)
                        {
                            uss = new UserBL().getUsersById(repitem.UserId.Value);
                        }
                        else
                        {
                            tcd2.userId = repitem.GroupTask_User.UserId.Value;
                            uss = new UserBL().getUsersById(tcd2.userId);
                        }


                        if (loginrole == 0)
                        {
                            if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                        }


                        tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                        if (repitem.File != null)
                        {
                            tcd2.File = repitem.FileName;
                            tcd2.FilePath = repitem.File;
                        }
                        else
                            tcd2.File = null;
                        if (repitem.User == null)
                        {
                            User usss = new UserBL().getUsersById(repitem.GroupTask_User.UserId.Value);
                            tcd2.Name = usss.FirstName + " " + usss.LastName;
                        }
                        else
                            tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                        files2.Add(tcd2);
                        tcd2.prime = -1;


                        tcd.obj = files2;

                        tcd.Comment = comment.Comment;
                        tcd.Id = comment.Id;
                        tcd.isManager = 0;
                        tcd.userId = comment.UserId.Value;
                        User u = new UserBL().getUsersById(tcd.userId);


                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }



                        tcd.CommentTime = Convert.ToDateTime(comment.Date);
                        if (comment.File != null)
                        {
                            tcd.File = comment.FileName;
                            tcd.FilePath = comment.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = comment.User.FirstName + " " + comment.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;
                    }
                    else
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();
                        tcd.Comment = comment.Comment;
                        tcd.Id = comment.Id;
                        tcd.isManager = 0;
                        tcd.userId = comment.UserId.Value;
                        User u = new UserBL().getUsersById(tcd.userId);


                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }



                        tcd.CommentTime = Convert.ToDateTime(comment.Date);
                        if (comment.File != null)
                        {
                            tcd.File = comment.FileName;
                            tcd.FilePath = comment.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = comment.User.FirstName + " " + comment.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;
                    }

                }


            }


            ///////////////////////////////////////////////




            List<GroupTask_Ticket> gtt = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(task.Id);


            cgt.completedgroupTickets = gtt.Where(x => x.CompletionDatetime != null).ToList();
            cgt.completedgroupTicketscount = gtt.Where(x => x.CompletionDatetime != null).ToList().Count();


            cgt.uncompletedgroupTickets = gtt.Where(x => x.CompletionDatetime == null).ToList();
            cgt.uncompletedgroupTicketscount = gtt.Where(x => x.CompletionDatetime == null).ToList().Count();

            files = files.OrderBy(x => x.CommentTime).ToList();
            cgt.GroupTaskComments = files;
            cgt.grouptaskuserId = grouptaskuserId;

            return cgt;
        }

        [HttpPost]
        //taskid here will be grouptaskmanagerId if it is done by manager and it will be of grouptaskEmployee if it is done by employee
        public string addAjaxGroupComment(string comment, int taskId = 0, int gtd = 0)
        {
            int userId = logedinuser.Id;
            int role = logedinuser.Role;
            List<User> emails = new List<User>();
            List<string> content = new List<string>();

            GroupTaskComment tc = new GroupTaskComment() { GroupTaskUserId = taskId, Comment = comment, Date = DateTime.Now.ToString() };

            tc.IsActive = 1;
            tc.GroupTaskUserId = taskId;
            int count = Request.Files.Count;
            tc.File = null;

            if (role == 1)
            {
                GroupTaskComment gtmc = new GroupTaskComment()
                {
                    IsActive = 1,
                    Comment = tc.Comment,
                    File = tc.File,
                    UserId = userId,
                    Date = DateTime.Now.ToString(),
                    GroupTaskDetailsId = gtd,

                    FileName = tc.FileName
                };
                //Additional
                GroupTasks_Details gtd6 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gtmc.GroupTaskDetailsId);
                GroupTask gt6 = new GroupTaskBL().getGroupTasksById((int)gtd6.GroupTaskId);
                User us6 = new UserBL().getUsersById((int)gt6.UserId);
                gtmc.CompanyId = Convert.ToInt32(logedinuser.Company);
                gtmc.GTaskStartDate = gtd6.StartDate;
                gtmc.GTaskEndDate = gtd6.EndDate;
                //  gtmc.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                gtmc.DivisionId = (int)us6.DivisionId;
                gtmc.CreatedBy = logedinuser.Id;
                new GroupTaskCommentBL().AddGroupTaskComments(gtmc);
            }
            else
            {
                GroupTaskComment gtmc = new GroupTaskComment()
                {
                    IsActive = 1,
                    Comment = tc.Comment,
                    File = tc.File,
                    GroupTaskUserId = taskId,
                    Date = DateTime.Now.ToString(),

                    FileName = tc.FileName
                };
                GroupTask_User gtu6 = new GroupTask_UserBL().getGroupTask_UsersById((int)gtmc.GroupTaskUserId);

                GroupTasks_Details gtd6 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gtu6.GroupTaskDetailsId);
                GroupTask gt6 = new GroupTaskBL().getGroupTasksById((int)gtd6.GroupTaskId);
                User us6 = new UserBL().getUsersById((int)gt6.UserId);
                gtmc.CompanyId = Convert.ToInt32(logedinuser.Company);
                gtmc.GTaskStartDate = gtd6.StartDate;
                gtmc.GTaskEndDate = gtd6.EndDate;
                //  gtmc.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                gtmc.DivisionId = (int)us6.DivisionId;
                gtmc.CreatedBy = logedinuser.Id;
                new GroupTaskCommentBL().AddGroupTaskComments(gtmc);
            }


            GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(gtd);

            foreach (var item in task.GroupTask_User)
            {
                if (item.User != null)
                {
                    emails.Add(item.User);
                    content.Add(Messages.groupTaskComment(task, item.User));
                }
            }

            List<TaskCommentDTO> files = new List<TaskCommentDTO>();
            int loginrole = -1;
            /////////////////////////////////////////
            User us = new UserBL().getUsersById(userId);

            if (us.IsMasterAdmin == 1)
            {
                loginrole = 0;
            }
            else if (us.Role == 1)
            {
                loginrole = 1;
            }
            else if (us.Role == 2 || us.Role == 2)
            {
                loginrole = 2;
            }
            else if (us.Role == 3)
            {
                loginrole = 3;
            }

            foreach (var item in task.GroupTask_User)
            {
                foreach (var comment1 in item.GroupTaskComments.Where(x => x.IsActive == 1).ToList())
                {
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (comment1.ParentId == null)
                    {
                        GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment1.Id).FirstOrDefault();

                        if (repitem != null)
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();


                            TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                            User uss = new User();
                            tcd2.Comment = repitem.Comment;
                            tcd2.Id = repitem.Id;
                            tcd2.isManager = 0;
                            if (repitem.GroupTask_User == null)
                            {
                                uss = new UserBL().getUsersById(repitem.UserId.Value);
                            }
                            else
                            {
                                tcd2.userId = repitem.GroupTask_User.UserId.Value;
                                uss = new UserBL().getUsersById(tcd2.userId);
                            }


                            if (loginrole == 0)
                            {
                                if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                                else if (uss.Role == 3)
                                    tcd2.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (uss.IsMasterAdmin == 1)
                                {
                                    tcd2.ROLE = "(M Admin)";
                                }
                                else if (uss.Role == 2 || uss.Role == 4)
                                    tcd2.ROLE = "(Manager)";
                                else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                    tcd2.ROLE = "(Admin)";
                            }


                            tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                            if (repitem.File != null)
                            {
                                tcd2.File = repitem.FileName;
                                tcd2.FilePath = repitem.File;
                            }
                            else
                                tcd2.File = null;
                            if (repitem.GroupTask_User == null)
                            {
                                User usss = new UserBL().getUsersById(repitem.UserId.Value);
                                tcd2.Name = usss.FirstName + " " + usss.LastName;
                            }
                            else
                                tcd2.Name = repitem.GroupTask_User.User.FirstName + " " + repitem.GroupTask_User.User.LastName;


                            files2.Add(tcd2);
                            tcd2.prime = -1;


                            tcd.obj = files2;
                            tcd.Comment = comment1.Comment;
                            tcd.Id = comment1.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment1.GroupTask_User.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);

                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment1.Date);
                            if (comment1.File != null)
                            {
                                tcd.File = comment1.FileName;
                                tcd.FilePath = comment1.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment1.GroupTask_User.User.FirstName + " " + comment1.GroupTask_User.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                        else
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Comment = comment1.Comment;
                            tcd.Id = comment1.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment1.GroupTask_User.UserId.Value;
                            User u = new UserBL().getUsersById(tcd.userId);

                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment1.Date);
                            if (comment1.File != null)
                            {
                                tcd.File = comment1.FileName;
                                tcd.FilePath = comment1.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment1.GroupTask_User.User.FirstName + " " + comment1.GroupTask_User.User.LastName;

                            files.Add(tcd);
                            tcd.prime = -1;
                        }



                    }


                }
            }
            foreach (var comment1 in task.GroupTaskComments.Where(x => x.IsActive == 1))
            {
                List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                if (comment1.ParentId == null)
                {




                    GroupTaskComment repitem = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment1.Id && x.IsActive == 1).FirstOrDefault();
                    if (repitem != null)
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();

                        TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                        User uss = new User();
                        tcd2.Comment = repitem.Comment;
                        tcd2.Id = repitem.Id;
                        tcd2.isManager = 0;
                        if (repitem.GroupTask_User == null)
                        {
                            uss = new UserBL().getUsersById(repitem.UserId.Value);
                        }
                        else
                        {
                            tcd2.userId = repitem.GroupTask_User.UserId.Value;
                            uss = new UserBL().getUsersById(tcd2.userId);
                        }

                        if (loginrole == 0)
                        {
                            if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                            else if (uss.Role == 3)
                                tcd2.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (uss.IsMasterAdmin == 1)
                            {
                                tcd2.ROLE = "(M Admin)";
                            }
                            else if (uss.Role == 2 || uss.Role == 4)
                                tcd2.ROLE = "(Manager)";
                            else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                tcd2.ROLE = "(Admin)";
                        }


                        tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                        if (repitem.File != null)
                        {
                            tcd2.File = repitem.FileName;
                            tcd2.FilePath = repitem.File;
                        }
                        else
                            tcd2.File = null;
                        if (repitem.User == null)
                        {
                            User usss = new UserBL().getUsersById(repitem.GroupTask_User.UserId.Value);
                            tcd2.Name = usss.FirstName + " " + usss.LastName;
                        }
                        else
                            tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;

                        files2.Add(tcd2);
                        tcd2.prime = -1;

                        tcd.obj = files2;

                        tcd.Comment = comment1.Comment;
                        tcd.Id = comment1.Id;
                        tcd.isManager = 0;
                        tcd.userId = comment1.UserId.Value;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }


                        tcd.CommentTime = Convert.ToDateTime(comment1.Date);
                        if (comment1.File != null)
                        {
                            tcd.File = comment1.FileName;
                            tcd.FilePath = comment1.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = comment1.User.FirstName + " " + comment1.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;
                    }
                    else
                    {
                        TaskCommentDTO tcd = new TaskCommentDTO();
                        tcd.Comment = comment1.Comment;
                        tcd.Id = comment1.Id;
                        tcd.isManager = 0;
                        tcd.userId = comment1.UserId.Value;
                        User u = new UserBL().getUsersById(tcd.userId);

                        if (loginrole == 0)
                        {
                            if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 1)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 2)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                            else if (u.Role == 3)
                                tcd.ROLE = "(Employee)";
                        }
                        else if (loginrole == 3)
                        {
                            if (u.IsMasterAdmin == 1)
                            {
                                tcd.ROLE = "(M Admin)";
                            }
                            else if (u.Role == 2 || u.Role == 4)
                                tcd.ROLE = "(Manager)";
                            else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                tcd.ROLE = "(Admin)";
                        }



                        tcd.CommentTime = Convert.ToDateTime(comment1.Date);
                        if (comment1.File != null)
                        {
                            tcd.File = comment1.FileName;
                            tcd.FilePath = comment1.File;
                        }
                        else
                            tcd.File = null;
                        tcd.Name = comment1.User.FirstName + " " + comment1.User.LastName;

                        files.Add(tcd);
                        tcd.prime = -1;
                    }

                }


            }


            //////////////////////////////////////

            List<TaskCommentDTO> comments = files.OrderBy(x => x.CommentTime).ToList(); ;

            return JsonConvert.SerializeObject(comments, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
        }

        [HttpPost]
        public string DragTask(string ids, string start, string end)
        {

            string[] tokens = ids.Split('&');
            string[] z = tokens[0].Split('=');
            string[] individual = tokens[1].Split('=');
            string[] manager = tokens[2].Split('=');

            int taskId = Convert.ToInt32(z[1]);
            //  User_Task task1 = new User_TaskBL().getUser_TasksById(taskId);





            if (individual[1] == "1")// It's an Individual Task
            {
                if (manager[1] == "0" || manager[1] == "1" || manager[1] == "2")
                {


                    List<User_Task> usertasklist = new List<User_Task>();
                    User_Task tsk = new User_TaskBL().getUser_TasksById(taskId);

                    if ((tsk.DepartmentID != null || tsk.DivisionID != null) && logedinuser.Role == 1)
                    {
                        if (tsk.DepartmentID != null)
                        {
                            usertasklist = new User_TaskBL().getUser_TasksList().Where(x => x.DepartmentID == tsk.DepartmentID && x.IsActive == 1).ToList();
                        }
                        else
                        {
                            usertasklist = new User_TaskBL().getUser_TasksList().Where(x => x.DivisionID == tsk.DivisionID && x.IsActive == 1).ToList();

                        }
                    }
                    else
                    {
                        usertasklist.Add(tsk);
                    }

                    foreach (User_Task task in usertasklist)
                    {


                        if (end == "NULL")
                        {
                            int daysdif = Convert.ToDateTime(task.EndDate).Day - Convert.ToDateTime(task.StartDate).Day;
                            end = Convert.ToDateTime(start).AddDays(daysdif + 1).ToString();
                        }

                        DateTime dt = new DateTime();
                        dt = Convert.ToDateTime(end).AddMinutes(-1);
                        end = dt.ToString();
                        User_Task updatedtask = new User_Task()
                        {
                            Id = task.Id,
                            IsActive = task.IsActive,
                            StartDate = Convert.ToDateTime(start),
                            EndDate = Convert.ToDateTime(end),
                            Notes = task.Notes,
                            Cost = task.Cost,
                            CEU = task.CEU,
                            Grad = task.Grad,
                            UserID = task.UserID,
                            TaskID = task.TaskID,
                            CreatedID = task.CreatedID,
                            Status = task.Status,
                            Hours = task.Hours,
                            CompletionDate = task.CompletionDate,
                            File = task.File,
                            RepeatTime = task.RepeatTime,
                            RepeatDeadline = task.RepeatDeadline,
                            IsPrivate = task.IsPrivate,
                            Priority = task.Priority,
                            BeforeDDateReminder = task.BeforeDDateReminder,
                            DailyReminder = task.DailyReminder,
                            CanvasCourseId = task.CanvasCourseId,
                            DepartmentID = task.DepartmentID,
                            DivisionID = task.DivisionID,
                            TemplateName = task.TemplateName,
                            ParentID = task.ParentID,
                            TicketSortBy = task.TicketSortBy,
                            CreatedAt=task.CreatedAt,
                            TemplateCreatedBy=task.TemplateCreatedBy,
                            CompanyId= task.CompanyId,
                            GroupTaskDetailId=task.GroupTaskDetailId
                        };

                        updatedtask.CompanyId = Convert.ToInt32(logedinuser.Company);
                        new User_TaskBL().UpdateUser_Tasks(updatedtask);
                    }
                    User_Task updatutask = new User_TaskBL().getUser_TasksById(tsk.Id);
                    return JsonConvert.SerializeObject(updatutask, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
            }
            else// It's a Group Task
            {
                //int id = General_Purpose.DecryptId((v));
                int id = Convert.ToInt32(z[1]);
                int userId = logedinuser.Id;

                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(id);
                if (end == "NULL")
                {
                    int daysdif = Convert.ToDateTime(task.EndDate).Day - Convert.ToDateTime(task.StartDate).Day;
                    end = Convert.ToDateTime(start).AddDays(daysdif + 1).ToString();
                }

                DateTime dt = new DateTime();
                dt = Convert.ToDateTime(end).AddMinutes(-1);
                end = dt.ToString();


                GroupTasks_Details updatedgrouptaskdetails = new GroupTasks_Details()
                {
                    Id = task.Id,
                    Hours = task.Hours,
                    CEU = task.CEU,
                    StartDate = Convert.ToDateTime(start),
                    EndDate = Convert.ToDateTime(end),
                    Grade = task.Grade,
                    CompletionDate = task.CompletionDate,
                    IsActive = task.IsActive,
                    Notes = task.Notes,
                    GroupTaskId = task.GroupTaskId,
                    Status = task.Status,
                    Priority = task.Priority,
                    SlackChannel = task.SlackChannel,
                    CreatedBy = task.CreatedBy,
                    CreatedAt=DateTime.Now,
                    CompanyId=Convert.ToInt32(logedinuser.Company),
                    CourseId=task.CourseId
                    
                };

                updatedgrouptaskdetails.CompanyId = Convert.ToInt32(logedinuser.Company);
                new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(updatedgrouptaskdetails);

                return JsonConvert.SerializeObject(updatedgrouptaskdetails, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
            }

            return null;

        }


        [HttpPost]
        public string ResizeTask(string ids, string end)
        {
            DateTime dt = new DateTime();
            dt = Convert.ToDateTime(end).AddMinutes(-1);
            end = dt.ToString();

            string[] tokens = ids.Split('&');
            string[] z = tokens[0].Split('=');
            string[] individual = tokens[1].Split('=');
            string[] manager = tokens[2].Split('=');


            if (individual[1] == "1")// It's an Individual Task
            {
                if (manager[1] == "0" || manager[1] == "1" || manager[1] == "2")
                {
                    int taskId = Convert.ToInt32(z[1]);
                    User_Task tsk = new User_TaskBL().getUser_TasksById(taskId);

                    List<User_Task> usertasklist = new List<User_Task>();


                    if ((tsk.DepartmentID != null || tsk.DivisionID != null) && logedinuser.Role == 1)
                    {
                        if (tsk.DepartmentID != null)
                        {
                            usertasklist = new User_TaskBL().getUser_TasksList().Where(x => x.DepartmentID == tsk.DepartmentID && x.IsActive == 1).ToList();
                        }
                        else
                        {
                            usertasklist = new User_TaskBL().getUser_TasksList().Where(x => x.DivisionID == tsk.DivisionID && x.IsActive == 1).ToList();

                        }
                    }
                    else
                    {
                        usertasklist.Add(tsk);
                    }

                    foreach (User_Task task in usertasklist)
                    {



                        User_Task updatedtask = new User_Task()
                        {
                            Id = task.Id,
                            IsActive = task.IsActive,
                            StartDate = task.StartDate,
                            EndDate = Convert.ToDateTime(end),
                            Notes = task.Notes,
                            Cost = task.Cost,
                            CEU = task.CEU,
                            Grad = task.Grad,
                            UserID = task.UserID,
                            TaskID = task.TaskID,
                            CreatedID = task.CreatedID,
                            Status = task.Status,
                            Hours = task.Hours,
                            CompletionDate = task.CompletionDate,
                            File = task.File,
                            RepeatTime = task.RepeatTime,
                            RepeatDeadline = task.RepeatDeadline,
                            IsPrivate = task.IsPrivate,
                            Priority = task.Priority,
                            BeforeDDateReminder = task.BeforeDDateReminder,
                            DailyReminder = task.DailyReminder,
                            CanvasCourseId = task.CanvasCourseId,
                            DepartmentID = task.DepartmentID,
                            DivisionID = task.DivisionID,
                            TemplateName = task.TemplateName,
                            ParentID = task.ParentID,
                            TicketSortBy = task.TicketSortBy,
                            CreatedAt=task.CreatedAt,
                            TemplateCreatedBy = task.TemplateCreatedBy,
                            CompanyId = task.CompanyId,
                            GroupTaskDetailId = task.GroupTaskDetailId

                        };

                        updatedtask.CompanyId = Convert.ToInt32(logedinuser.Company);
                        new User_TaskBL().UpdateUser_Tasks(updatedtask);
                    }
                    User_Task updatutask = new User_TaskBL().getUser_TasksById(tsk.Id);
                    return JsonConvert.SerializeObject(updatutask, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
                }
            }
            else// It's a Group Task
            {
                //int id = General_Purpose.DecryptId((v));
                int id = Convert.ToInt32(z[1]);
                int userId = logedinuser.Id;

                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(id);

                GroupTasks_Details updatedgrouptaskdetails = new GroupTasks_Details()
                {
                    Id = task.Id,
                    Hours = task.Hours,
                    CEU = task.CEU,
                    StartDate = task.StartDate,
                    EndDate = Convert.ToDateTime(end),
                    Grade = task.Grade,
                    CompletionDate = task.CompletionDate,
                    IsActive = task.IsActive,
                    Notes = task.Notes,
                    GroupTaskId = task.GroupTaskId,
                    Status = task.Status,
                    Priority = task.Priority,
                    SlackChannel = task.SlackChannel,
                    CreatedBy = task.CreatedBy,
                    CreatedAt = DateTime.Now,
                    CompanyId = Convert.ToInt32(logedinuser.Company),
                    CourseId = task.CourseId
                };
                updatedgrouptaskdetails.CompanyId = Convert.ToInt32(logedinuser.Company);
                new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(updatedgrouptaskdetails);

                return JsonConvert.SerializeObject(updatedgrouptaskdetails, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });
            }

            return null;

        }

        [HttpPost]
        public ActionResult getGroupTask(int _id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                try
                {
                    GroupTask groupTask = new GroupTaskBL().getGroupTasksById(_id);
                    GroupTask gt = new GroupTask() { IsActive = 1, UserId = groupTask.UserId, Name = groupTask.Name, Id = groupTask.Id };
                    return Json(gt);
                }
                catch (Exception e)
                {
                    int a = 0;
                }
                return null;
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpGet]
        public ActionResult getDetails(int _id)
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                Task item = new TaskBL().getTasksById(_id);
                Task updatedTask = new Task();

                Task t = new Task();
                t.Name = item.Name;
                t.Hours = item.Hours;
                t.Cost_ = item.Cost_;
                t.CEU = item.CEU;
                t.Id = item.Id;
                t.Description = item.Description;
               // t.CourseId = item.CourseId;

                return Json(t, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpGet]
        public ActionResult getTaskStatus(int _id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                User_Task tt = new User_TaskBL().getUser_TasksById(_id);
                dynamic obj = new System.Dynamic.ExpandoObject();
                obj.Name = tt.Task.Name;

                obj.options = General_Purpose.generateoptionScript(tt.Status.Value);
                obj.id = tt.Id;

                return Json(obj, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        #endregion Ajax

        [HttpPost]
        public string VerifyTaskName(string TaskName,int DepartmentID=-1)
        {
            int isTaskExist = 0;
             isTaskExist = new TaskBL().getTasksList().Where(x => x.Name.ToUpper() == TaskName.ToUpper() && x.DepartmentID==DepartmentID).Count();
            bool status;
            if (isTaskExist > 0)
                status = true;
            else
                status = false;

            return JsonConvert.SerializeObject(status, Formatting.Indented,
               new JsonSerializerSettings()
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               });
        }

        #region CommentSection
        public ActionResult addTaskComment(string comment, string completionDate, int taskId, int status)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                User_TaskBL tbl = new User_TaskBL();

                User_Task task = tbl.getUser_TasksById(taskId);
               
                List<User> emails = new List<User>();
                List<string> content = new List<string>();
                emails.Add(task.User1);
                content.Add(Messages.taskComment(task));
                data.TaskId = task.Id.ToString();
                General_Purpose.SendPushNotification(task.User1.Player_Id, Messages.taskComment(task, 1), "Message from Zuptu", data, task.UserID.ToString());
                if (task.CompletionDate == null)
                {
                    task.CompletionDate = DateTime.Parse(completionDate);
                    task.Status = status;
                    task.CompanyId = Convert.ToInt32(logedinuser.Company);
                    tbl.UpdateUser_Tasks(task);
                }
                else if (task.Status != status)
                {
                    task.Status = status;
                    tbl.UpdateUser_Tasks(task);
                }
                TaskComment tc = new TaskComment()
                {
                    Comment=comment,
                    TaskId=task.Id,
                    CreatedAt=DateTime.Now,
                    IsActive=1,
                    UserId=logedinuser.Id
                };
                //Additional attributes
                User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                tc.TaskStartDate = ut5.StartDate;
                tc.TaskEndDate = ut5.EndDate;
                tc.DepartmentId = (int)ut5.Task.DepartmentID;
                tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                tc.CreatedBy = logedinuser.Id;
                new TaskCommentBL().AddTaskComments(tc);
               // new TaskCommentBL().AddTaskComments(new TaskComment() { Comment = comment, TaskId = task.Id });
                Communication.sendMessage(content, emails);

                return RedirectToAction("displayEmployeeTask", "Trainee", new { message = "Your comment has been added." });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult taskDetails(string v, string edit = "", string isModal = "", string displayMessage = null, string message = "", string way = "", string department = "", string sid = "", string DivDepID = "", string template = "",string DxM="")
        {

            try
            {
                ViewBag.DxM = DxM;

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                /////////////////////////////////
                Log.Info("Task Details Page");

                ////////////////////////////
                int role = logedinuser.Role;
                int id = logedinuser.Id;
                int taskId;
                string strr = "";

                string encrptId = General_Purpose.EncryptId(id);

                if (isModal == "1")
                {
                    taskId = Convert.ToInt32(v);
                }
                else
                {
                    taskId = General_Purpose.DecryptId((v));
                }

                if (taskId == 0)
                {
                    strr = HttpUtility.UrlEncode(v);
                    taskId = General_Purpose.DecryptId((strr));
                }
                User_Task task = new User_TaskBL().getUser_TasksById(taskId);
                if (task == null)
                {
                    return RedirectToAction("Index", "Auth", new { message = "Task has been deleted or removed for you." });
                }
                DateTime dd = Convert.ToDateTime(task.EndDate).Date;

                DateTime d7 = DateTime.Now.Date.AddDays(7);
                DateTime d30 = DateTime.Now.Date.AddDays(30);
                ViewBag.DailyRem = -1;
                ViewBag.WeeklyRem = -1;
                ViewBag.MonthlyRem = -1;

                if (dd > DateTime.Now.Date)
                {
                    ViewBag.DailyRem = 1;

                    if (dd > d7)
                    {
                        ViewBag.WeeklyRem = 1;

                        if (dd > d30)
                        {
                            ViewBag.MonthlyRem = 1;
                        }
                    }
                }
                if (task.DailyReminder != null)
                {
                    ViewBag.DailyReminder = task.DailyReminder;
                }
                if (task.BeforeDDateReminder != null)
                {
                    TimeSpan days = Convert.ToDateTime(task.BeforeDDateReminder) - dd;
                    ViewBag.BeforeDDateReminder = Math.Abs(days.Days);
                }

                ViewBag.currentStatus = task.Status.HasValue ? task.Status.Value : 0;
                ViewBag.status = new List<int>() { 1, 2, 3, 4 }/*.Where(x => x > task.Status)*/;

                if (task.UserID != null)
                {
                    //if (task.CanvasCourseId != null)
                    //{

                    //    //Course course = General_Purpose.GetCanvasUserCoursesById(task.User1.Id).Where(x => x.id == task.CanvasCourseId).FirstOrDefault();
                    //    //if (course != null)
                    //    //{
                    //    //    ViewBag.CanvasCourse = course;
                    //    //    List<Quiz> quizes = General_Purpose.GetCanvasQuizes(course.id);
                    //    //    List<Assignment> assignments = General_Purpose.GetCanvasAssignments(course.id);
                    //    //    ViewBag.CanvasQuizes = quizes;
                    //    //    ViewBag.CanvasAssignments = assignments;

                    //    //    List<Task> tasklist = new TaskBL().getTasksList().Where(x => x.CourseId == course.id && x.IsResultAnnounced == 1).ToList();
                    //    //    if (tasklist.Count > 0)
                    //    //    {
                    //    //        ViewBag.ResultAnnouncement = 1;
                    //    //    }
                    //    //    else
                    //    //    {
                    //    //        ViewBag.ResultAnnouncement = 0;
                    //    //    }
                    //    //    Enrollment en = General_Purpose.GetResult(task.User1.Id, course.id);

                    //    //    if (en != null)
                    //    //    {
                    //    //        if (en.computed_final_score != null)
                    //    //        {
                    //    //            string s = en.computed_final_score;
                    //    //            double x = Convert.ToDouble(s);


                    //    //            ViewBag.result = x;




                    //    //        }
                    //    //        else
                    //    //        {
                    //    //            ViewBag.result = 0.0;
                    //    //        }

                    //    //    }
                    //    //    else
                    //    //        ViewBag.result = null;
                    //    //    if (ViewBag.ResultAnnouncement != 1)
                    //    //    {
                    //    //        ViewBag.status = new List<int>() { 1, 2, 3 }/*.Where(x => x > task.Status)*/;
                    //    //        ViewBag.CanvasMsg = "You're unable to complete the task because Canvas course result not announced yet.";
                    //    //    }
                    //    //    else
                    //    //    {
                    //    //        if (ViewBag.result == null)
                    //    //        {
                    //    //            ViewBag.status = new List<int>() { 1, 2, 3 }/*.Where(x => x > task.Status)*/;
                    //    //            ViewBag.CanvasMsg = "You're unable to complete the task because you've not cleared your Canvas Course.";
                    //    //        }
                    //    //        else
                    //    //        {
                    //    //            if (Convert.ToInt32(ViewBag.result) < Convert.ToInt32(task.Grad))
                    //    //            {
                    //    //                ViewBag.status = new List<int>() { 1, 2, 3 }/*.Where(x => x > task.Status)*/;
                    //    //                ViewBag.CanvasMsg = "You're unable to complete the task, your course passing marks are less than Grade.";
                    //    //            }
                    //    //        }
                    //    //    }


                    //    //}
                    //    //else
                    //    //{
                    //    //    ViewBag.status = new List<int>() { 1, 2, 3 }/*.Where(x => x > task.Status)*/;
                    //    //    ViewBag.CanvasMsg = "You'r unable to complete the task because you've not cleared your Canvas Course.";
                    //    //}
                    //    ViewBag.status = new List<int>() { 1, 2, 3 }/*.Where(x => x > task.Status)*/;
                    //    ViewBag.CanvasMsg = "You'r unable to complete the task because you've not cleared your Canvas Course.";
                    //}
                }









                List<TaskCommentDTO> files = new List<TaskCommentDTO>();



                BlobManager blob = new BlobManager();

                int loginrole = -1;

                User u = new UserBL().getUsersById(id);
                if (u.IsMasterAdmin == 1)
                {
                    loginrole = 0;
                }
                else if (u.Role == 1)
                {
                    loginrole = 1;
                }
                else if (u.Role == 2 || u.Role == 2)
                {
                    loginrole = 2;
                }
                else if (u.Role == 3)
                {
                    loginrole = 3;
                }


                foreach (var item in task.TaskComments.Where(x => x.IsActive == 1))
                {
                    Log.Info("Comment's ParentID : " + item.ParentId);
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (item.ParentId == null)
                    {
                        List<TaskComment> replycomments = new List<TaskComment>();
                        if (template != "")
                        {
                            replycomments = new TaskCommentBL().getTaskCommentsList(1).Where(x => x.ParentId == item.Id && x.IsActive == 1).ToList();

                        }
                        else
                        {
                            replycomments = new TaskCommentBL().getTaskCommentsList().Where(c => c.ParentId == item.Id && c.IsActive == 1).ToList();

                        }

                        if (replycomments.Count() > 0)
                        {


                            TaskCommentDTO tcd = new TaskCommentDTO();



                            foreach (var repitem in replycomments)
                            {
                                TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                tcd2.Image = repitem.User.Image;
                                tcd2.Comment = repitem.Comment;
                                tcd2.userId = repitem.UserId.Value;
                                tcd2.IsDocMFile = repitem.IsDocMFile;
                                User uss = new UserBL().getUsersById(tcd2.userId);

                                if (loginrole == 0)
                                {
                                    if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                }




                                tcd2.Id = repitem.Id;
                                tcd2.isManager = 0;
                                tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                if (repitem.File != null)
                                {
                                    tcd2.File = repitem.FileName;
                                    tcd2.FilePath = repitem.File;
                                }
                                else
                                    tcd2.File = null;
                                tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;
                                if (repitem.File != null)
                                {
                                    try
                                    {
                                        CloudBlockBlob blobObj = blob.getCloudBlockBlob(repitem.File);
                                        blobObj.FetchAttributes();
                                        tcd2.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                    }
                                    catch (Exception e)
                                    {
                                        tcd2.FileSize = "";
                                        tcd2.File = null;
                                        tcd2.FilePath = null;
                                    }
                                }
                                else
                                    tcd2.FileSize = "";
                                files2.Add(tcd2);
                                tcd2.prime = -1;
                            }

                            tcd.obj = files2;
                            tcd.Comment = item.Comment;
                            tcd.userId = item.UserId.Value;
                            tcd.Image = item.User.Image;
                            tcd.IsDocMFile = item.IsDocMFile;

                            User us = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }




                            tcd.Id = item.Id;
                            tcd.isManager = 0;
                            tcd.CommentTime = Convert.ToDateTime(item.Date);
                            if (item.File != null)
                            {
                                tcd.File = item.FileName;
                                tcd.FilePath = item.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = item.User.FirstName + " " + item.User.LastName;
                            if (item.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }
                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;

                        }
                        else
                        {



                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Image = item.User.Image;
                            tcd.Comment = item.Comment;
                            tcd.userId = item.UserId.Value;
                            tcd.IsDocMFile = item.IsDocMFile;
                            User us = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (us.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (us.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (us.Role == 2 || us.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (us.Role == 1 && (us.IsMasterAdmin == 0 || us.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }




                            tcd.Id = item.Id;
                            tcd.isManager = 0;
                            tcd.CommentTime = Convert.ToDateTime(item.Date);
                            if (item.File != null)
                            {
                                tcd.File = item.FileName;
                                tcd.FilePath = item.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = item.User.FirstName + " " + item.User.LastName;
                            if (item.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }
                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                    }
                }

                if (task.CreatedID.HasValue)
                    if (displayMessage == "Your request has been sent.")
                    {
                        string messageText = "Employee of the assigned task " + task.Task.Name + " has requested an extension. Please visit " + ProjectVaraiables.SYSTEM_URL + "  to respond.";

                        List<string> emails = new List<string>() { new UserBL().getUsersById(task.CreatedID.Value).Email };
                        List<string> numbers = new List<string>() { new UserBL().getUsersById(task.CreatedID.Value).PhoneNumber };
                        data.TaskId = task.Id.ToString();
                        General_Purpose.SendPushNotification(task.User.Player_Id, messageText, "Message from Zuptu", data, task.User.Id.ToString());

                        List<string> EmailText = new List<string>() { messageText };

                        MainMailClass mailingClass = new MainMailClass();
                        mailingClass.mail(emails, EmailText, "Request for extension");
                        HostingEnvironment.QueueBackgroundWorkItem(ctx => mailingClass.mail(emails, EmailText, "Request for extension"));
                        HostingEnvironment.QueueBackgroundWorkItem(ctx => SMS_Service.sendSMSWrapper(EmailText, numbers));

                        // Communication.sendMessage(new List<string>() { messageText }, new List<User>() { (User)new UserBL().getUsersById(task.CreatedID.Value) });
                    }


                if (displayMessage == null)
                    if (logedinuser.Role == 3)
                    {
                        ExtensionRequest er = task.ExtensionRequests.Where(x => x.Status > 0 && x.Displayed == 0).LastOrDefault();


                        if (displayMessage == null)
                        {

                            if (er == null)
                            {
                                ViewBag.requestResponse = null;
                            }

                            else if (er.Status == 1)
                            {
                                DatabaseEntities de = new DatabaseEntities();
                                ExtensionRequest _ExtensionRequest = de.ExtensionRequests.FirstOrDefault(x => x.Id == er.Id && x.isActive == 1);

                                if (_ExtensionRequest != null)
                                {
                                    _ExtensionRequest.Displayed = 1;

                                    de.Entry(_ExtensionRequest).State = System.Data.Entity.EntityState.Modified;
                                    de.SaveChanges();
                                }
                                ViewBag.requestResponse = "Your request has been accepted.";
                            }
                            else if (er.Status == 2)
                            {
                                DatabaseEntities de = new DatabaseEntities();
                                ExtensionRequest _ExtensionRequest = de.ExtensionRequests.FirstOrDefault(x => x.Id == er.Id && x.isActive == 1);

                                if (_ExtensionRequest != null)
                                {
                                    _ExtensionRequest.Displayed = 1;

                                    de.Entry(_ExtensionRequest).State = System.Data.Entity.EntityState.Modified;
                                    de.SaveChanges();
                                }
                                ViewBag.requestResponse = "Your request has been rejected.";
                            }
                            else
                            {
                                ViewBag.requestResponse = null;
                            }

                        }
                    }

                    else
                    {
                        if (((role == (int)Enums.Role.Manager || role == (int)Enums.Role.Cordinator) || role == (int)Enums.Role.Admin) && task.CreatedID != null)
                        {
                            ExtensionRequest e_r = task.ExtensionRequests.LastOrDefault();
                            if (e_r != null)
                                if (e_r.Status <= 0 && e_r.Displayed == 0)
                                {
                                    ViewBag.extenstionRequest = "Employee of the task has requested to extend the deadline of the project by " + e_r.RequestedDays + " days due to " + e_r.Reason;
                                    ViewBag.erId = General_Purpose.EncryptId(e_r.Id);
                                }


                            ViewBag.requestResponse = null;
                        }
                    }



                List<TaskCommentDTO> Ticketfiles = new List<TaskCommentDTO>();

                foreach (Task_Ticket item in new Task_TicketBL().getTask_TicketsList().Where(x => x.IsActive == 1 && x.UserTask_Id == task.Id))
                {
                    if (item.Ticket_File != null)
                    {
                        User user = new UserBL().getUsersById((int)item.CreatedBy);
                        TaskCommentDTO obj = new TaskCommentDTO();
                        obj.Name = user.FirstName+" "+user.LastName;
                        obj.CommentTime = Convert.ToDateTime(item.CreationDatetime);
                        obj.File = item.Ticket_FileName;
                        obj.FilePath = item.Ticket_File;

                        try
                        {
                            CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.Ticket_File);
                            blobObj.FetchAttributes();
                            obj.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                        }
                        catch (Exception e)
                        {
                            obj.FileSize = "";
                            obj.File = null;
                            obj.FilePath = null;
                        }

                        Ticketfiles.Add(obj);
                    }
                }
                ViewBag.Ticketfiles = Ticketfiles.OrderByDescending(x => x.CommentTime);
                //string f = "gdfgfdgfdgfdgdfgdf";

                files = files.OrderBy(x => x.Id).ToList();
                List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId);
                ViewBag.completedTickets = t.Where(x => x.CompletionDatetime != null).ToList();
                ViewBag.uncompletedTickets = t.Where(x => x.CompletionDatetime == null).ToList();
                ViewBag.ActiveToDo = t.Where(x => x.CompletionDatetime == null).ToList().Count();
                ViewBag.comments = files;
                ViewBag.comments1 = files.OrderByDescending(x => x.Id);
                ViewBag.request = displayMessage;
                ViewBag.message = message;
                ViewBag.EditTicket = edit;
                ViewBag.way = way;
                ViewBag.siid = encrptId;
                ViewBag.sid = sid;
                ViewBag.department = department;
                ViewBag.v = v;
                ViewBag.usertaskid = task.Id;
                ViewBag.isModal = isModal;
                ViewBag.DivDepID = DivDepID;
                ViewBag.template = template;
                Department departmentid = new Department();
                if (task.User1 != null)
                {

                    if (task.User1.DepartmentId == null)
                    {
                        ViewBag.divid = task.User1.DivisionId; ;
                        ViewBag.managers = new UserBL().getUsersList().Where(x => x.DivisionId == task.User1.DivisionId || x.Role == 1 && x.IsActive == 1 && x.Id != task.UserID).ToList();

                    }
                    else
                    {
                        departmentid = new DepartmentBL().getDepartmentsById((int)task.User1.DepartmentId);
                        ViewBag.divid = departmentid.DivisionID;
                        ViewBag.managers = new UserBL().getUsersList().Where(x => x.DivisionId == departmentid.DivisionID || x.Role == 1 && x.IsActive == 1 && x.Id != task.UserID).ToList();

                    }
                }



                return View(task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public JsonResult GetAssignToAnotherUser(int userType= -1, int userId = -1, int companyId = -1, int departmentId = -1, int divisionId = -1)
        {
            List<User> userlist = new List<User>();

            if(userType == 1)
            {
                userlist = new UserBL().getAllUsersList().Where(x => x.Id != userId && x.CompanyID == companyId && x.Role == 1 && x.IsActive == 1).ToList();

            }
            else if(userType == 2)
            {
                userlist = new UserBL().getAllUsersList().Where(x => x.Id != userId && x.DivisionId == divisionId && x.Role == 2 && x.IsActive == 1).ToList();
            }
            else if(userType == 3)
            {
                userlist = new UserBL().getAllUsersList().Where(x => x.Id != userId && x.DepartmentId == departmentId && x.Role == 3 && x.IsActive == 1).ToList();
            }

            List<UserDTO> ulist = new List<UserDTO>();

            foreach (User x in userlist)
            {
                
                UserDTO obj = new UserDTO()
                {
                    Id = x.Id,
                    Name = x.FirstName + " " + x.LastName
                };

                ulist.Add(obj);

            }

            return Json(ulist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult PostAssignToAnother(int Ausertype = -1, int AuserTaskId = -1, int AuserId = -1)
        {
            DatabaseEntities de = new DatabaseEntities();
            User_Task ut = new User_TaskBL().getUser_TasksByIdWrapper(AuserTaskId, de);
            ut.CreatedID = logedinuser.Id;
            ut.UserID = AuserId;
            List<Course_UserTask> list = new Course_UserTaskBL().getCourse_UserTaskList(de).Where(x => x.User_TaskID == ut.Id).ToList();
            foreach(Course_UserTask item in list)
            {
                item.UserId = AuserId;
                new Course_UserTaskBL().UpdateCourse_UserTask(item, de);
            }
            bool check = new User_TaskBL().UpdateUser_Tasks(ut, de);

            if (check == true)
            {
                de.SaveChanges();
                return Json(General_Purpose.Encrypt(AuserTaskId), JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json("0", JsonRequestBehavior.AllowGet);
            }

            //return RedirectToAction("taskDetails", "Task", new { v= v, message = "Task Assigned Successfully.", way, department, sid, isModal = isModal, DivDepID = DivDepID });
        }


        public ActionResult ArchivedUsers(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                ViewBag.message = message;
                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult GetArchivedUsers()
        {
            try
            {
                List<User> InactiveUsers = new List<User>();
                // List<User_Task> tasks = new List<User_Task>();

                InactiveUsers = new UserBL().getInActiveUsersofCompany().Where(x => (x.Department == null && x.Division == null && x.Role == 1) || ((x.Department != null || x.Division != null) && (x.Role == 2 || x.Role == 3))).ToList();

                User linguser = new UserBL().getUsersById(logedinuser.Id);
                if (logedinuser.Role == 2 || logedinuser.Role == 4)
                {
                    InactiveUsers = InactiveUsers.Where(x => x.Role == 3 && x.Department.Division.Id == linguser.Division.Id).ToList();
                }
                string complettionName = string.Empty;

                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = InactiveUsers.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    InactiveUsers = InactiveUsers.Where(x => x.FirstName.ToLower().Contains(searchValue.ToLower()) || x.LastName.ToLower().Contains(searchValue.ToLower()) || x.Department.Name.ToLower().Contains(searchValue.ToLower()) || x.Department.Division.Name.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = InactiveUsers.Count();
                //sorting

                // pagination
                InactiveUsers = InactiveUsers.Skip(start).Take(length).ToList();

                List<UserDTO> mnglist = new List<UserDTO>();


                string Role = "";
                string Department = "";
                string Division = "";
                foreach (User x in InactiveUsers)
                {

                    if (x.Role == 1)
                    {
                        Role = "Admin";
                    }
                    else if (x.Role == 2 || x.Role == 4)
                    {
                        Role = "Manager";
                    }
                    else
                    {
                        Role = "Employee";
                    }

                    if (x.Role == 2 || x.Role == 4)
                    {
                        Department = "NA";
                        if (x.Division == null && x.Department == null)
                        {
                            continue;
                        }
                        else
                            Division = x.Division.Name;
                    }
                    else if (x.Role == 1)
                    {
                        Department = "NA";
                        Division = "NA";
                    }
                    else
                    {
                        if (x.Division == null && x.Department == null)
                        {
                            continue;
                        }
                        else
                        {
                            Department = x.Department.Name;
                            Division = x.Department.Division.Name;
                        }

                    }
                    UserDTO obj = new UserDTO()
                    {
                        EncriptedId = General_Purpose.EncryptId(x.Id),
                        Name = x.FirstName + " " + x.LastName,
                        Division = Division,
                        Department = Department,
                        AssignUserRole = Role,
                        Id = x.Id
                    };

                    if(x.IsDelegate == 1)
                    {
                        obj.IsDelegate = (int)x.IsDelegate;
                    }

                    mnglist.Add(obj);




                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);



            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult ArchivedUserDetail(string sid)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                try
                {
                    if (AuthenticateUser() == false)
                    {
                        return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                    }
                    Log.Info("Update Employee Page...");

                    int tem = General_Purpose.DecryptId((sid));


                    int did = -1;
                    if (tem == 0)
                    {
                        sid = HttpUtility.UrlEncode(sid);
                        did = General_Purpose.DecryptId((sid));
                        //User trainee = new UserBL().getUsersById(did);
                    }
                    else
                    {
                        did = General_Purpose.DecryptId((sid));

                    }

                    User trainee = new UserBL().getInActiveUserById(did);

                    ViewBag.UserWorktypes = new User_WorktypeBL().getUser_WorktypesList().Where(x => x.UserId == trainee.Id).ToList();
                    List<Worktype> wt = new List<Worktype>();
                    if (trainee.Role != 1)
                    {
                        if (trainee.Role == 2 || trainee.Role == 4)
                        {
                            wt = new WorktypeBL().getWorktypesList().Where(x => x.DivisionID == trainee.Division.Id).ToList();
                        }
                        else
                        {
                            wt = new WorktypeBL().getWorktypesList().Where(x => x.DivisionID == trainee.Department.DivisionID).ToList(); ;
                        }

                    }

                    ViewBag.Worktype = wt;
                    trainee.Password = StringCipher.Decrypt(trainee.Password, "zuptu");

                    ViewBag.depId = trainee.DepartmentId;

                    ViewBag.sid = sid;



                    return View(trainee);
                }
                catch (Exception ex)
                {

                    errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                    return RedirectToAction("Error");

                }


                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult ActivateUser(int UserId = -1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                if (UserId != -1)
                {
                    DatabaseEntities de = new DatabaseEntities();
                    User u = new UserBL().getDeletedUserById(UserId, de);
                    int value = 0;
                    if (u != null)
                    {
                        value = new UserBL().getUsersList().Where(x => x.Email.ToUpper() == u.Email.ToUpper()).ToList().Count();
                        if (value > 0)
                        {
                            return RedirectToAction("ArchivedUsers", new { message = "This User's email already exists in company. You can not activate this user." });
                        }
                        if (u.Password == "--")
                        {
                            u.IsActive = 2;
                            new UserBL().UpdateUsers(u, de);
                        }
                        else
                        {
                            u.IsActive = 1;
                            new UserBL().UpdateUsers(u, de);
                        }
                        return RedirectToAction("ArchivedUsers", new { message = "User has been activated successfully." });

                    }


                }


                return RedirectToAction("ArchivedUsers", new { message = "User has not been activated" });


            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
        public ActionResult CheckTemplateName(string Name = "")
        {
            Name = Name.Trim();
            int count = 0;
            List<User_Task> u = new User_TaskBL().getUser_TasksList(null, 1).Where(x => x.TemplateName != null).ToList();
            count = u.Where(x => x.TemplateName.ToUpper() == Name.ToUpper()).Count();
            return Json(count);
        }

        public ActionResult CreateTaskTemplate(int UtaskID = -1, string TemplateName = "")
        {
            if (TemplateName == "")
            {
                return Json("Template name must have value");
            }
            TemplateName = TemplateName.Trim();
            int count = 0;
            List<User_Task> u = new User_TaskBL().getUser_TasksList(null, 1).Where(x => x.TemplateName != null).ToList();
            count = u.Where(x => x.TemplateName.ToUpper() == TemplateName.ToUpper()).Count();
            if (count != 0)
            {
                return Json("Template name already exists.");
            }
            if (UtaskID == -1)
            {
                return Json("Template not created successfully.");
            }
            DatabaseEntities de = new DatabaseEntities();
            User_Task task = new User_TaskBL().getUser_TasksByIdWrapper(UtaskID, de);
            User_Task newutask = new User_Task()
            {

                IsActive = task.IsActive,
                StartDate = task.StartDate,
                EndDate = task.EndDate,
                Notes = task.Notes,
                Cost = task.Cost,
                CEU = task.CEU,
                Grad = task.Grad,
                //UserID must be null
                TaskID = task.TaskID,
                CreatedID = task.CreatedID,
                Status = task.Status,
                Hours = task.Hours,
                CompletionDate = task.CompletionDate,
                File = task.File,
                RepeatTime = task.RepeatTime,
                RepeatDeadline = task.RepeatDeadline,
                IsPrivate = task.IsPrivate,
                Priority = task.Priority,
                //BeforeDDateReminder = task.BeforeDDateReminder,
                //DailyReminder = task.DailyReminder,
                CanvasCourseId = task.CanvasCourseId,
                DepartmentID = null,
                DivisionID = null,
                TemplateName = TemplateName,
                TicketSortBy = task.TicketSortBy,
                TemplateCreatedBy = logedinuser.Id

            };
            newutask.User1 = null;


            newutask = new User_TaskBL().AddUser_Tasks(newutask);

            foreach (TaskComment x in task.TaskComments.Where(c => c.IsActive == 1))
            {
                int i;
                if (x.ParentId == null)
                {

                    TaskComment tc = new TaskComment()
                    {
                        Comment = x.Comment,
                        TaskId = newutask.Id,
                        Date = x.Date,
                        File = x.File,
                        FileName = x.FileName,
                        IsActive = x.IsActive,
                        UserId = x.UserId,
                        ParentId = x.ParentId

                    };
                    //Additional attributes
                    User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                    tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                    tc.TaskStartDate = ut5.StartDate;
                    tc.TaskEndDate = ut5.EndDate;
                    tc.DepartmentId = (int)ut5.Task.DepartmentID;
                    tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                    tc.CreatedBy = logedinuser.Id;
                    i = new TaskCommentBL().AddTaskComments(tc);
                    List<TaskComment> replycomments = new TaskCommentBL().getTaskCommentsList().Where(c => c.ParentId == x.Id && c.IsActive == 1).ToList();
                    if (replycomments.Count() > 0)
                    {
                        foreach (TaskComment it in replycomments)
                        {
                            TaskComment td = new TaskComment()
                            {
                                Comment = it.Comment,
                                TaskId = newutask.Id,
                                Date = it.Date,
                                File = it.File,
                                FileName = it.FileName,
                                IsActive = it.IsActive,
                                UserId = it.UserId,
                                ParentId = i

                            };
                            //Additional attributes
                            User_Task ut6 = new User_TaskBL().getUser_TasksById((int)td.TaskId);
                            td.CompanyId = Convert.ToInt32(logedinuser.Company);
                            td.TaskStartDate = ut6.StartDate;
                            td.TaskEndDate = ut6.EndDate;
                            td.DepartmentId = (int)ut6.Task.DepartmentID;
                            td.DivisionId = (int)ut6.Task.Department.DivisionID;
                            td.CreatedBy = logedinuser.Id;
                            new TaskCommentBL().AddTaskComments(td);
                        }
                    }
                }


            }
            foreach (Task_Ticket x in task.Task_Ticket.Where(x => x.IsActive == 1))
            {
                Task_Ticket tt = new Task_Ticket()
                {
                    UserTask_Id = newutask.Id,
                    Name = x.Name,
                    CreationDatetime = x.CreationDatetime,
                    CompletionDatetime = x.CompletionDatetime,
                    CreatedBy = x.CreatedBy,
                    CompletedByUser = x.CompletedByUser,
                    IsActive = x.IsActive,
                    CreatedOn = x.CreatedOn,
                    StartDate = x.StartDate,
                    EndDate = x.EndDate,
                    Ticket_File = x.Ticket_File,
                    Ticket_FileName = x.Ticket_FileName,
                    Position = x.Position

                };

                //Additional attributes
                User_Task ut4 = new User_TaskBL().getUser_TasksById((int)tt.UserTask_Id);
                tt.CompanyId = Convert.ToInt32(logedinuser.Company);
                tt.TaskStartDate = ut4.StartDate;
                tt.TaskEndDate = ut4.EndDate;
                tt.DepartmentId = (int)ut4.Task.DepartmentID;
                tt.DivisionId = (int)ut4.Task.Department.DivisionID;

                new Task_TicketBL().AddTask_Tickets(tt);
            }





            return Json("Template created successfully");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="AssignToself">ytrytry</param>
        /// <param name="UTask"></param>
        /// <param name="UserTypeID"></param>
        /// <param name="DivisionID"></param>
        /// <param name="DepartmentID"></param>
        /// <param name="UserName"></param>
        /// <param name="UserID"></param>
        /// <param name="StartDate"></param>
        /// <param name="EndDate"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        public ActionResult AssignTaskThroughTemplate(int? freqDays, string AssignToself = "", int UTask = -1, string UserTypeID = "", int DivisionID = -1, int DepartmentID = -1, int UserName = -1, int UserID = -1, string StartDate = "", string EndDate = "", string status = "", int days = -1, string FeqEndingDate = "",int DReminder=-1)
        {
            try
            {

            if (AuthenticateUser() == false)
            {
                return RedirectToAction("Login", "Auth");
            }


            DatabaseEntities db = new DatabaseEntities();
            User logUser = new UserBL().getUsersById(logedinuser.Id, db);
            if (UTask == -1)
            {
                return RedirectToAction("Templates", new { message = "Must select the Template to assign task." });
            }

            if (AssignToself == "")
            {
                if (UserTypeID == "Manager")
                {
                    if (DivisionID == -1 || UserName == -1)
                    {
                        return RedirectToAction("Templates", new { message = "Division Name & User name must be selected." });
                    }
                }
                else if (UserTypeID == "Employee")
                {
                    if (DivisionID == -1 || UserName == -1 || DepartmentID == -1)
                    {
                        return RedirectToAction("Templates", new { message = "Division, Department & User name must be selected." });
                    }
                }
                else
                {
                    return RedirectToAction("Templates", new { message = "User type must be selected." });
                }
            }
            else
            {
                if (UserID == -1)
                {
                    return RedirectToAction("Templates", new { message = "Task not assigned to yourself. Something went wrong." });

                }
            }



            User usser = new User();
            if (AssignToself == "")
            {
                usser = new UserBL().getUsersById(UserName);
            }
            else
            {
                usser = new UserBL().getUsersById(UserID);
            }

            DatabaseEntities de = new DatabaseEntities();
            User_Task task = new User_TaskBL().getUser_TasksByIdWrapper(UTask, de);
            string ssdate = "";
            string eedate = "";
            int sstatus;
            if (days != -1)
            {
                DateTime sdate = Convert.ToDateTime(StartDate);
                //   DateTime edate = Convert.ToDateTime(EndDate);
                if (sdate == null)
                {
                    return RedirectToAction("Templates", new { message = "Start date must have value." });
                }
                ssdate = sdate.ToString("MM/dd/yyyy");
            }
            else if (StartDate != "" && EndDate != "")
            {
                DateTime sdate = Convert.ToDateTime(StartDate);
                DateTime edate = Convert.ToDateTime(EndDate);

                ssdate = sdate.ToString("MM/dd/yyyy");
                eedate = edate.ToString("MM/dd/yyyy");

                if (sdate > edate)
                {
                    return RedirectToAction("Templates", new { message = "Start date must be less than End date." });
                }

            }
            else
            {
                ssdate = task.StartDate.ToString();
                eedate = task.EndDate.ToString();
            }
            if (status != "")
            {
                sstatus = Convert.ToInt32(status);
            }
            else
            {
                sstatus = (int)task.Status;
            }


            if (days != -1)
            {
                switch (days)
                {
                    case 1:
                        days = 1;
                        break;

                    case 2:
                        days = 7;

                        break;

                    case 3:
                        days = 30;
                        break;

                    case 4:
                        days = 365;
                        break;

                    case 5:
                        days = 730;
                        break;

                    case 6:
                        days = freqDays.Value;
                        break;

                    default:
                        Console.WriteLine("Default case");
                        break;
                }
            }

            User_Task newutask = new User_Task()
            {

                IsActive = task.IsActive,
                StartDate = Convert.ToDateTime(ssdate),
                // EndDate = Convert.ToDateTime(eedate).AddDays(1).AddMinutes(-1),
                Notes = task.Notes,
                Cost = task.Cost,
                CEU = task.CEU,
                Grad = task.Grad,
                UserID = usser.Id,

                //UserID must be null
                TaskID = task.TaskID,
                CreatedID = logUser.Id,
                Status = sstatus,
                Hours = task.Hours,
               // CompletionDate = task.CompletionDate,
                File = task.File,
                RepeatTime = task.RepeatTime,
                RepeatDeadline = task.RepeatDeadline,
                IsPrivate = task.IsPrivate,
                Priority = task.Priority,
                BeforeDDateReminder = task.BeforeDDateReminder,
                DailyReminder = task.DailyReminder,
                CanvasCourseId = task.CanvasCourseId,
                DepartmentID = task.DepartmentID,
                DivisionID = task.DivisionID,
                TemplateName = null,
                TicketSortBy = task.TicketSortBy,
                ParentID = task.ParentID,
                TemplateCreatedBy = null,
                CreatedAt=DateTime.Now
            };

                if (sstatus == 4)
                {
                    newutask.CompletionDate = DateTime.Now;
                }

            if (days != -1)
            {
                newutask.EndDate = Convert.ToDateTime(ssdate);
                newutask.RepeatTime = days;
            }
            else
            {
                newutask.EndDate = Convert.ToDateTime(eedate).AddDays(1).AddMinutes(-1);
            }


            if (days == -1)
            {
                    if (DReminder != -1)
                    {
                        newutask.DailyReminder = DReminder;
                    }
                newutask = new User_TaskBL().AddUser_Tasks(newutask);
                    if (newutask.CanvasCourseId != null)
                        General_Purpose.AssignLMSCourse(newutask.Id, (int)newutask.CanvasCourseId);

                    List<User> email = new List<User>();
                List<string> content = new List<string>();

                User User = new UserBL().getUsersById(newutask.UserID.Value, de);
                email.Add(User);


                content.Add(Messages.taskAward(newutask));
                data.TaskId = newutask.Id.ToString();
                General_Purpose.SendPushNotification(User.Player_Id, Messages.taskAward(newutask, 1), "Message from Zuptu", data, User.Id.ToString());


                Communication.sendMessage(content, email);


                foreach (TaskComment x in task.TaskComments.Where(c => c.IsActive == 1))
                {
                    int i;
                    if (x.ParentId == null)
                    {

                        TaskComment tc = new TaskComment()
                        {
                            Comment = x.Comment,
                            TaskId = newutask.Id,
                            Date = x.Date,
                            File = x.File,
                            FileName = x.FileName,
                            IsActive = x.IsActive,
                            UserId = x.UserId,
                            ParentId = x.ParentId

                        };
                        //Additional attributes
                        User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                        tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                        tc.TaskStartDate = ut5.StartDate;
                        tc.TaskEndDate = ut5.EndDate;
                        tc.DepartmentId = (int)ut5.Task.DepartmentID;
                        tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                        tc.CreatedBy = logedinuser.Id;
                        i = new TaskCommentBL().AddTaskComments(tc);
                        List<TaskComment> replycomments = new TaskCommentBL().getTaskCommentsList(1).Where(c => c.ParentId == x.Id && c.IsActive == 1).ToList();
                        if (replycomments.Count() > 0)
                        {
                            foreach (TaskComment it in replycomments)
                            {
                                TaskComment td = new TaskComment()
                                {
                                    Comment = it.Comment,
                                    TaskId = newutask.Id,
                                    Date = it.Date,
                                    File = it.File,
                                    FileName = it.FileName,
                                    IsActive = it.IsActive,
                                    UserId = it.UserId,
                                    ParentId = i

                                };
                                User_Task ut6 = new User_TaskBL().getUser_TasksById((int)td.TaskId);
                                td.CompanyId = Convert.ToInt32(logedinuser.Company);
                                td.TaskStartDate = ut6.StartDate;
                                td.TaskEndDate = ut6.EndDate;
                                td.DepartmentId = (int)ut6.Task.DepartmentID;
                                td.DivisionId = (int)ut6.Task.Department.DivisionID;
                                td.CreatedBy = logedinuser.Id;
                                new TaskCommentBL().AddTaskComments(td);
                            }
                        }
                    }


                }
                foreach (Task_Ticket x in task.Task_Ticket.OrderByDescending(x => x.CreationDatetime).Where(x => x.IsActive == 1))
                {
                    //DateTime sd = new DateTime();
                    //DateTime ed = new DateTime();

                    string starttime = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];
                    string endtime = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                    string taskstarttime = Convert.ToDateTime(task.StartDate).ToString().Split(' ')[1];
                    string taskendtime = Convert.ToDateTime(task.EndDate).ToString().Split(' ')[1];

                    DateTime startdate = Convert.ToDateTime(x.StartDate).Date;
                    DateTime taskstartdate = Convert.ToDateTime(task.StartDate).Date;
                    DateTime enddate = Convert.ToDateTime(x.EndDate).Date;
                    DateTime taskenddate = Convert.ToDateTime(task.EndDate).Date;

                    if (startdate >= taskstartdate && enddate <= taskenddate)
                    {

                        int sddays = (int)(startdate.Subtract(taskstartdate)).TotalDays;


                        int eddays = (int)(taskenddate.Subtract(enddate)).TotalDays;

                        string sd = Convert.ToDateTime(newutask.StartDate).AddDays(sddays).ToString().Split(' ')[0];
                        string ed = Convert.ToDateTime(newutask.EndDate).AddDays(-eddays).ToString().Split(' ')[0];

                        x.StartDate = Convert.ToDateTime(sd + " " + starttime);
                        x.EndDate = Convert.ToDateTime(ed + " " + endtime);

                        string starttime2 = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];

                        if (Convert.ToDateTime(x.StartDate).Date < newutask.StartDate)
                        {

                            x.StartDate = Convert.ToDateTime(newutask.StartDate.ToString().Split(' ')[0] + " " + starttime2);

                        }
                        else if (Convert.ToDateTime(x.StartDate) > newutask.EndDate)
                        {

                            x.StartDate = Convert.ToDateTime(newutask.EndDate.ToString().Split(' ')[0] + " " + starttime2);

                        }


                        string endtime2 = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                        if (Convert.ToDateTime(x.EndDate) < newutask.StartDate)
                        {

                            x.EndDate = Convert.ToDateTime(newutask.StartDate.ToString().Split(' ')[0] + " " + endtime2);

                        }
                        else if (Convert.ToDateTime(x.EndDate).Date >= newutask.EndDate)
                        {

                            x.EndDate = Convert.ToDateTime(newutask.EndDate.ToString().Split(' ')[0] + " " + endtime2);

                        }

                        if (Convert.ToDateTime(x.StartDate).Date > Convert.ToDateTime(x.EndDate).Date)
                        {
                            x.StartDate = x.EndDate;
                        }

                        if (Convert.ToDateTime(x.StartDate).Date == Convert.ToDateTime(x.EndDate).Date)
                        {
                            string st = x.StartDate.ToString().Split(' ')[1] + " " + x.StartDate.ToString().Split(' ')[2];
                            string et = x.EndDate.ToString().Split(' ')[1] + " " + x.EndDate.ToString().Split(' ')[2];
                            string ampm = st.Split(' ')[1];
                            string ampm2 = et.Split(' ')[1];

                            x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " 8:00 AM");
                            x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " 4:00 PM");

                            //if (ampm == "AM" && ampm2 == "PM")
                            //{

                            //}
                            //else
                            //{
                            //    x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "AM");
                            //    x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "PM");
                            //}


                        }






                    }

                    Task_Ticket tt = new Task_Ticket()
                    {
                        UserTask_Id = newutask.Id,
                        Name = x.Name,
                        CreationDatetime = x.CreationDatetime,
                        CompletionDatetime = x.CompletionDatetime,
                        CreatedBy = x.CreatedBy,
                        CompletedByUser = x.CompletedByUser,
                        IsActive = x.IsActive,
                        CreatedOn = x.CreatedOn,
                        StartDate = x.StartDate,
                        EndDate = x.EndDate,
                        Ticket_File = x.Ticket_File,
                        Ticket_FileName = x.Ticket_File,
                        Position = x.Position,

                    };


                    //Additional attributes
                    User_Task ut4 = new User_TaskBL().getUser_TasksById((int)tt.UserTask_Id);
                    tt.CompanyId = Convert.ToInt32(logedinuser.Company);
                    tt.TaskStartDate = ut4.StartDate;
                    tt.TaskEndDate = ut4.EndDate;
                    tt.DepartmentId = (int)ut4.Task.DepartmentID;
                    tt.DivisionId = (int)ut4.Task.Department.DivisionID;

                        if (sstatus == 4)
                        {
                            tt.CompletedByUser = logedinuser.Id;
                            tt.CompletionDatetime = DateTime.Now;

                        }
                    new Task_TicketBL().AddTask_Tickets(tt);
                }

            }




            if (days != -1)
            {
                if (FeqEndingDate == "")
                {
                    return RedirectToAction("Templates", new { message = "Task has not been assigned because you have not set frequency ending date." });
                }
                DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                if (FEndingDate < Convert.ToDateTime(newutask.StartDate))
                {
                    return RedirectToAction("Index", "Auth", new { message = "Task has not been assigned because task's start date must be greater than frequency ending date." });
                }
                    if (DReminder != -1)
                    {
                        newutask.DailyReminder = DReminder;
                    }
                    newutask = new User_TaskBL().AddUser_Tasks(newutask);
                    if (newutask.CanvasCourseId != null)
                        General_Purpose.AssignLMSCourse(newutask.Id, (int)newutask.CanvasCourseId);
                    foreach (TaskComment x in task.TaskComments.Where(c => c.IsActive == 1))
                {
                    int i;
                    if (x.ParentId == null)
                    {

                        TaskComment tc = new TaskComment()
                        {
                            Comment = x.Comment,
                            TaskId = newutask.Id,
                            Date = x.Date,
                            File = x.File,
                            FileName = x.FileName,
                            IsActive = x.IsActive,
                            UserId = x.UserId,
                            ParentId = x.ParentId

                        };
                        User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                        tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                        tc.TaskStartDate = ut5.StartDate;
                        tc.TaskEndDate = ut5.EndDate;
                        tc.DepartmentId = (int)ut5.Task.DepartmentID;
                        tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                        tc.CreatedBy = logedinuser.Id;
                        i = new TaskCommentBL().AddTaskComments(tc);
                        List<TaskComment> replycomments = new TaskCommentBL().getTaskCommentsList(1).Where(c => c.ParentId == x.Id && c.IsActive == 1).ToList();
                        if (replycomments.Count() > 0)
                        {
                            foreach (TaskComment it in replycomments)
                            {
                                TaskComment td = new TaskComment()
                                {
                                    Comment = it.Comment,
                                    TaskId = newutask.Id,
                                    Date = it.Date,
                                    File = it.File,
                                    FileName = it.FileName,
                                    IsActive = it.IsActive,
                                    UserId = it.UserId,
                                    ParentId = i

                                };
                                User_Task ut6 = new User_TaskBL().getUser_TasksById((int)td.TaskId);
                                td.CompanyId = Convert.ToInt32(logedinuser.Company);
                                td.TaskStartDate = ut6.StartDate;
                                td.TaskEndDate = ut6.EndDate;
                                td.DepartmentId = (int)ut6.Task.DepartmentID;
                                td.DivisionId = (int)ut6.Task.Department.DivisionID;
                                td.CreatedBy = logedinuser.Id;
                                new TaskCommentBL().AddTaskComments(td);
                            }
                        }
                    }


                }
                foreach (Task_Ticket x in task.Task_Ticket.OrderByDescending(x => x.CreationDatetime).Where(x => x.IsActive == 1))
                {
                    //DateTime sd = new DateTime();
                    //DateTime ed = new DateTime();

                    string starttime = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];
                    string endtime = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                    string taskstarttime = Convert.ToDateTime(task.StartDate).ToString().Split(' ')[1];
                    string taskendtime = Convert.ToDateTime(task.EndDate).ToString().Split(' ')[1];

                    DateTime startdate = Convert.ToDateTime(x.StartDate).Date;
                    DateTime taskstartdate = Convert.ToDateTime(task.StartDate).Date;
                    DateTime enddate = Convert.ToDateTime(x.EndDate).Date;
                    DateTime taskenddate = Convert.ToDateTime(task.EndDate).Date;

                    if (startdate >= taskstartdate && enddate <= taskenddate)
                    {

                        int sddays = (int)(startdate.Subtract(taskstartdate)).TotalDays;


                        int eddays = (int)(taskenddate.Subtract(enddate)).TotalDays;

                        string sd = Convert.ToDateTime(newutask.StartDate).AddDays(sddays).ToString().Split(' ')[0];
                        string ed = Convert.ToDateTime(newutask.EndDate).AddDays(-eddays).ToString().Split(' ')[0];

                        x.StartDate = Convert.ToDateTime(sd + " " + starttime);
                        x.EndDate = Convert.ToDateTime(ed + " " + endtime);

                        string starttime2 = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];

                        if (Convert.ToDateTime(x.StartDate).Date < newutask.StartDate)
                        {

                            x.StartDate = Convert.ToDateTime(newutask.StartDate.ToString().Split(' ')[0] + " " + starttime2);

                        }
                        else if (Convert.ToDateTime(x.StartDate) > newutask.EndDate)
                        {

                            x.StartDate = Convert.ToDateTime(newutask.EndDate.ToString().Split(' ')[0] + " " + starttime2);

                        }


                        string endtime2 = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                        if (Convert.ToDateTime(x.EndDate) < newutask.StartDate)
                        {

                            x.EndDate = Convert.ToDateTime(newutask.StartDate.ToString().Split(' ')[0] + " " + endtime2);

                        }
                        else if (Convert.ToDateTime(x.EndDate).Date >= newutask.EndDate)
                        {

                            x.EndDate = Convert.ToDateTime(newutask.EndDate.ToString().Split(' ')[0] + " " + endtime2);

                        }

                        if (Convert.ToDateTime(x.StartDate).Date > Convert.ToDateTime(x.EndDate).Date)
                        {
                            x.StartDate = x.EndDate;
                        }

                        if (Convert.ToDateTime(x.StartDate).Date == Convert.ToDateTime(x.EndDate).Date)
                        {
                            string st = x.StartDate.ToString().Split(' ')[1] + " " + x.StartDate.ToString().Split(' ')[2];
                            string et = x.EndDate.ToString().Split(' ')[1] + " " + x.EndDate.ToString().Split(' ')[2];
                            string ampm = st.Split(' ')[1];
                            string ampm2 = et.Split(' ')[1];

                            x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " 8:00 AM");
                            x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " 4:00 PM");

                            //if (ampm == "AM" && ampm2 == "PM")
                            //{

                            //}
                            //else
                            //{
                            //    x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "AM");
                            //    x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "PM");
                            //}


                        }






                    }

                    Task_Ticket tt = new Task_Ticket()
                    {
                        UserTask_Id = newutask.Id,
                        Name = x.Name,
                        CreationDatetime = x.CreationDatetime,
                        CompletionDatetime = x.CompletionDatetime,
                        CreatedBy = x.CreatedBy,
                        CompletedByUser = x.CompletedByUser,
                        IsActive = x.IsActive,
                        CreatedOn = x.CreatedOn,
                        StartDate = x.StartDate,
                        EndDate = x.EndDate,
                        Ticket_File = x.Ticket_File,
                        Ticket_FileName = x.Ticket_File,
                        Position = x.Position,

                    };
                    //Additional attributes
                    User_Task ut4 = new User_TaskBL().getUser_TasksById((int)tt.UserTask_Id);
                    tt.CompanyId = Convert.ToInt32(logedinuser.Company);
                    tt.TaskStartDate = ut4.StartDate;
                    tt.TaskEndDate = ut4.EndDate;
                    tt.DepartmentId = (int)ut4.Task.DepartmentID;
                    tt.DivisionId = (int)ut4.Task.Department.DivisionID;
                        if (sstatus == 4)
                        {
                            tt.CompletedByUser = logedinuser.Id;
                            tt.CompletionDatetime = DateTime.Now;

                        }
                        new Task_TicketBL().AddTask_Tickets(tt);
                }

                DateTime startDate1 = newutask.StartDate.Value;
                DateTime dt = newutask.StartDate.Value.AddDays(days);
                while (FEndingDate.AddDays(1) > dt)
                {
                    User_Task ut = new User_Task()
                    {

                        IsActive = newutask.IsActive,
                        StartDate = dt,
                        EndDate = dt,
                        Notes = newutask.Notes,
                        Cost = newutask.Cost,
                        CEU = newutask.CEU,
                        Grad = newutask.Grad,
                        UserID = newutask.UserID,
                        TaskID = newutask.TaskID,
                        CreatedID = newutask.CreatedID,
                        Status = newutask.Status,
                        Hours = newutask.Hours,
                       // CompletionDate = newutask.CompletionDate,
                        File = newutask.File,
                        RepeatTime = newutask.RepeatTime,
                        RepeatDeadline = newutask.RepeatDeadline,
                        IsPrivate = newutask.IsPrivate,
                        Priority = newutask.Priority,
                        BeforeDDateReminder = newutask.BeforeDDateReminder,
                        DailyReminder = newutask.DailyReminder,
                        CanvasCourseId = newutask.CanvasCourseId,
                        DepartmentID = newutask.DepartmentID,
                        DivisionID = newutask.DivisionID,
                        TemplateName = null,
                        TicketSortBy = newutask.TicketSortBy,
                        ParentID = newutask.Id



                    };

                        if (sstatus == 4)
                        {
                            ut.CompletionDate = DateTime.Now;
                        }

                        if (DReminder != -1)
                        {
                            ut.DailyReminder = DReminder;
                        }
                        ut = new User_TaskBL().AddUser_Tasks(ut);
                    if (days == 30)
                        dt = dt.AddMonths(1);
                    else if (days == 365)
                        dt = dt.AddYears(1);
                    else
                        dt = dt.AddDays(days);
                    //dt = dt.AddDays(days);

                    foreach (TaskComment x in task.TaskComments.Where(c => c.IsActive == 1))
                    {
                        int i;
                        if (x.ParentId == null)
                        {

                            TaskComment tc = new TaskComment()
                            {
                                Comment = x.Comment,
                                TaskId = ut.Id,
                                Date = x.Date,
                                File = x.File,
                                FileName = x.FileName,
                                IsActive = x.IsActive,
                                UserId = x.UserId,
                                ParentId = x.ParentId

                            };
                            User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                            tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                            tc.TaskStartDate = ut5.StartDate;
                            tc.TaskEndDate = ut5.EndDate;
                            tc.DepartmentId = (int)ut5.Task.DepartmentID;
                            tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                            tc.CreatedBy = logedinuser.Id;
                            i = new TaskCommentBL().AddTaskComments(tc);
                            List<TaskComment> replycomments = new TaskCommentBL().getTaskCommentsList(1).Where(c => c.ParentId == x.Id && c.IsActive == 1).ToList();
                            if (replycomments.Count() > 0)
                            {
                                foreach (TaskComment it in replycomments)
                                {
                                    TaskComment td = new TaskComment()
                                    {
                                        Comment = it.Comment,
                                        TaskId = ut.Id,
                                        Date = it.Date,
                                        File = it.File,
                                        FileName = it.FileName,
                                        IsActive = it.IsActive,
                                        UserId = it.UserId,
                                        ParentId = i

                                    };
                                    User_Task ut6 = new User_TaskBL().getUser_TasksById((int)td.TaskId);
                                    td.CompanyId = Convert.ToInt32(logedinuser.Company);
                                    td.TaskStartDate = ut6.StartDate;
                                    td.TaskEndDate = ut6.EndDate;
                                    td.DepartmentId = (int)ut6.Task.DepartmentID;
                                    td.DivisionId = (int)ut6.Task.Department.DivisionID;
                                    td.CreatedBy = logedinuser.Id;
                                    new TaskCommentBL().AddTaskComments(td);
                                }
                            }
                        }


                    }
                    foreach (Task_Ticket x in task.Task_Ticket.OrderByDescending(x => x.CreationDatetime).Where(x => x.IsActive == 1))
                    {
                        //DateTime sd = new DateTime();
                        //DateTime ed = new DateTime();

                        string starttime = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];
                        string endtime = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                        string taskstarttime = Convert.ToDateTime(task.StartDate).ToString().Split(' ')[1];
                        string taskendtime = Convert.ToDateTime(task.EndDate).ToString().Split(' ')[1];

                        DateTime startdate = Convert.ToDateTime(x.StartDate).Date;
                        DateTime taskstartdate = Convert.ToDateTime(task.StartDate).Date;
                        DateTime enddate = Convert.ToDateTime(x.EndDate).Date;
                        DateTime taskenddate = Convert.ToDateTime(task.EndDate).Date;

                        if (startdate >= taskstartdate && enddate <= taskenddate)
                        {

                            int sddays = (int)(startdate.Subtract(taskstartdate)).TotalDays;


                            int eddays = (int)(taskenddate.Subtract(enddate)).TotalDays;

                            string sd = Convert.ToDateTime(ut.StartDate).AddDays(sddays).ToString().Split(' ')[0];
                            string ed = Convert.ToDateTime(ut.EndDate).AddDays(-eddays).ToString().Split(' ')[0];

                            x.StartDate = Convert.ToDateTime(sd + " " + starttime);
                            x.EndDate = Convert.ToDateTime(ed + " " + endtime);

                            string starttime2 = Convert.ToDateTime(x.StartDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.StartDate).ToString().Split(' ')[2];

                            if (Convert.ToDateTime(x.StartDate).Date < ut.StartDate)
                            {

                                x.StartDate = Convert.ToDateTime(ut.StartDate.ToString().Split(' ')[0] + " " + starttime2);

                            }
                            else if (Convert.ToDateTime(x.StartDate) > ut.EndDate)
                            {

                                x.StartDate = Convert.ToDateTime(ut.EndDate.ToString().Split(' ')[0] + " " + starttime2);

                            }


                            string endtime2 = Convert.ToDateTime(x.EndDate).ToString().Split(' ')[1] + " " + Convert.ToDateTime(x.EndDate).ToString().Split(' ')[2];

                            if (Convert.ToDateTime(x.EndDate) < ut.StartDate)
                            {

                                x.EndDate = Convert.ToDateTime(ut.StartDate.ToString().Split(' ')[0] + " " + endtime2);

                            }
                            else if (Convert.ToDateTime(x.EndDate).Date >= ut.EndDate)
                            {

                                x.EndDate = Convert.ToDateTime(ut.EndDate.ToString().Split(' ')[0] + " " + endtime2);

                            }

                            if (Convert.ToDateTime(x.StartDate).Date > Convert.ToDateTime(x.EndDate).Date)
                            {
                                x.StartDate = x.EndDate;
                            }

                            if (Convert.ToDateTime(x.StartDate).Date == Convert.ToDateTime(x.EndDate).Date)
                            {
                                string st = x.StartDate.ToString().Split(' ')[1] + " " + x.StartDate.ToString().Split(' ')[2];
                                string et = x.EndDate.ToString().Split(' ')[1] + " " + x.EndDate.ToString().Split(' ')[2];
                                string ampm = st.Split(' ')[1];
                                string ampm2 = et.Split(' ')[1];

                                x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " 8:00 AM");
                                x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " 4:00 PM");

                                //if (ampm == "AM" && ampm2 == "PM")
                                //{

                                //}
                                //else
                                //{
                                //    x.StartDate = Convert.ToDateTime(x.StartDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "AM");
                                //    x.EndDate = Convert.ToDateTime(x.EndDate.ToString().Split(' ')[0] + " " + x.StartDate.ToString().Split(' ')[1] + " " + "PM");
                                //}


                            }






                        }

                        Task_Ticket tt = new Task_Ticket()
                        {
                            UserTask_Id = ut.Id,
                            Name = x.Name,
                            CreationDatetime = x.CreationDatetime,
                            CompletionDatetime = x.CompletionDatetime,
                            CreatedBy = x.CreatedBy,
                            CompletedByUser = x.CompletedByUser,
                            IsActive = x.IsActive,
                            CreatedOn = x.CreatedOn,
                            StartDate = x.StartDate,
                            EndDate = x.EndDate,
                            Ticket_File = x.Ticket_File,
                            Ticket_FileName = x.Ticket_File,
                            Position = x.Position,

                        };
                        //Additional attributes
                        User_Task ut4 = new User_TaskBL().getUser_TasksById((int)tt.UserTask_Id);
                        tt.CompanyId = Convert.ToInt32(logedinuser.Company);
                        tt.TaskStartDate = ut4.StartDate;
                        tt.TaskEndDate = ut4.EndDate;
                        tt.DepartmentId = (int)ut4.Task.DepartmentID;
                        tt.DivisionId = (int)ut4.Task.Department.DivisionID;

                            if (sstatus == 4)
                            {
                                tt.CompletedByUser = logedinuser.Id;
                                tt.CompletionDatetime = DateTime.Now;

                            }
                            new Task_TicketBL().AddTask_Tickets(tt);
                    }
                }

            }




            return RedirectToAction("Templates", new { message = "Template Task Assigned Successfully." });

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }

        }

        public ActionResult RemoveFreqTask(int UtaskID = -1)
        {

            User_Task u = new User_TaskBL().getUser_TasksById(UtaskID);
            new User_TaskBL().DeleteUser_Tasks(u.Id);

            return Json("Frequency Task Removed");
        }

        public ActionResult RemoveFreqGrpTask(int UtaskID = -1)
        {

            GroupTasks_Details u = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(UtaskID);
            new GroupTasks_DetailsBL().DeleteGroupTasks_Detailss(u.Id);

            return Json("Frequency Task Removed");
        }
        public ActionResult SortTaskTickets(int Type, int UtaskID = -1)
        {
            DatabaseEntities de = new DatabaseEntities();

            User_Task u = new User_TaskBL().getUser_TasksByIdWrapper(UtaskID, de);
            u.TicketSortBy = Type;

            new User_TaskBL().UpdateUser_Tasks(u, de);
            de.SaveChanges();
            return Json("Updated successfully");
        }
        public ActionResult SortGrpTaskTickets(int Type, int UtaskID = -1)
        {
            DatabaseEntities de = new DatabaseEntities();

            GroupTasks_Details u = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(UtaskID, de);
            u.TicketSortBy = Type;

            new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(u, de);
            de.SaveChanges();
            return Json("Updated successfully");
        }

        public ActionResult SetToDoPosition(int Position = -1, string TicketId = "")
        {
            if (Position != -1 && TicketId != "")
            {
                string tickettype = "";
                tickettype = TicketId.Split('/').Last();
                if (tickettype == "T")
                {
                    int tId = Convert.ToInt32(TicketId.Split('/').First());
                    tId = tId - 643;
                    DatabaseEntities de = new DatabaseEntities();
                    Task_Ticket tic = new Task_TicketBL().getTask_TicketsById(tId, de);
                    if (tic != null)
                    {
                        tic.Position = Position;
                        new Task_TicketBL().UpdateTask_Tickets(tic, de);
                    }

                }
                else if (tickettype == "G")
                {
                    int tId = Convert.ToInt32(TicketId.Split('/').First());
                    tId = tId - 643;
                    DatabaseEntities de = new DatabaseEntities();
                    GroupTask_Ticket tic = new GroupTask_TicketBL().getGroupTask_TicketsById(tId, de);
                    if (tic != null)
                    {
                        tic.Position = Position;
                        new GroupTask_TicketBL().UpdateGroupTask_Tickets(tic, de);
                    }
                }
            }
            return Json("True");
        }
        public ActionResult ChangeUserType(int UserId, int UserType=-1, int DepartmentId = -1, int DivisionId = -1,int managerId=-1)
        {
            DatabaseEntities de = new DatabaseEntities();
            User u = new UserBL().getUsersById(UserId, de);
            User temp2 = new UserBL().getUsersById(UserId, de);

            if (UserType == 1)
            {
               

                if (u.Role == 2)
                {
                    if (managerId == -1)
                    {
                        return Json("0");
                    }

                    List<GroupTask> GtList = new GroupTaskBL().getGroupTasksList(de).Where(x => x.UserId == u.Id).ToList();
                    if (managerId != -1)
                    {
                        foreach(GroupTask item in GtList)
                        {
                            item.UserId = managerId;
                            new GroupTaskBL().UpdateGroupTasks(item, de);
                        }

                        List<GroupTask_User> listu2 = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == u.Id && x.IsActive==1).ToList();

                        foreach (GroupTask_User item in listu2)
                        {
                            int temp = 0;
                            GroupTask_User isAlreadyMember = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == managerId && x.IsActive == 1 && x.GroupTaskDetailsId==item.GroupTaskDetailsId).FirstOrDefault();

                            
                            if (isAlreadyMember!=null)
                            {

                                if (isAlreadyMember.LeadRole == 2 && item.LeadRole == 2)
                                {
                                    //item.IsActive = 0;
                                    //new GroupTask_UserBL().UpdateGroupTask_Users(isAlreadyMember, de);
                                }
                                else if (isAlreadyMember.LeadRole == 1 && item.LeadRole == 2)
                                {
                                    //item.IsActive = 0;
                                    //new GroupTask_UserBL().UpdateGroupTask_Users(isAlreadyMember, de);

                                }
                                else if (isAlreadyMember.LeadRole == 2 && item.LeadRole == 1)
                                {
                                    temp = (int)isAlreadyMember.LeadRole;
                                    isAlreadyMember.LeadRole = item.LeadRole;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(isAlreadyMember, de);
                                    item.LeadRole = temp;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);


                                }

                            }
                            else
                            {
                                item.UserId = managerId;
                                new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                                GroupTask_User obj = new GroupTask_User()
                                {
                                    GroupTaskDetailsId = item.GroupTaskDetailsId,
                                    IsActive = 1,
                                    LeadRole = 2,
                                    UserId = u.Id
                                };
                                new GroupTask_UserBL().AddGroupTask_Users(obj, de);
                            }
                            
                        }
                    }
                    else
                    {
                        return Json("0");
                    }
                }
                else
                {
                   
                    List<GroupTask_User> listu = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == u.Id).ToList();
                    foreach (GroupTask_User item in listu)
                    {


                        if (item.LeadRole == 1)
                        {
                            item.LeadRole = 2;

                            new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                        }
                        else if (item.LeadRole == 2)
                        {
                            item.LeadRole = 2;

                            new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                        }
                        else if (item.LeadRole == 3)
                        {
                            item.LeadRole = 2;

                            new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                        }

                    }

                }

                u.DivisionId = null;
                u.DepartmentId = null;
                u.Role = 1;
                u.IsMasterAdmin = 0;


                new UserBL().UpdateUsers(u, de);

                return Json("Updated successfully");

            }
            else if (UserType == 2)
            {
                u.DivisionId = DivisionId;
                u.DepartmentId = null;
                u.IsMasterAdmin = null;
                u.Role = 2;
                new UserBL().UpdateUsers(u, de);
                List<GroupTask_User> listu = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == u.Id).ToList();
                foreach (GroupTask_User item in listu)
                {

                    if (item.LeadRole == 1)
                    {
                        item.LeadRole = 2;

                        new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                    }
                    else if (item.LeadRole == 2)
                    {
                        item.LeadRole = 2;

                        new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                    }
                    else if (item.LeadRole == 3)
                    {
                        item.LeadRole = 2;

                        new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                    }

                }

                return Json("Updated successfully");

            }
            else if (UserType == 3)
            {
                if (u.Role == 2)
                {
                    if (managerId == -1)
                    {
                        return Json("0");
                    }

                    List<GroupTask> GtList = new GroupTaskBL().getGroupTasksList(de).Where(x => x.UserId == u.Id).ToList();
                    if (managerId != -1)
                    {
                        foreach (GroupTask item in GtList)
                        {
                            item.UserId = managerId;
                            new GroupTaskBL().UpdateGroupTasks(item, de);
                        }

                        List<GroupTask_User> listu2 = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == u.Id).ToList();
                        foreach (GroupTask_User item in listu2)
                        {
                            int temp = 0;
                            GroupTask_User isAlreadyMember = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == managerId && x.IsActive == 1 && x.GroupTaskDetailsId == item.GroupTaskDetailsId).FirstOrDefault();


                            if (isAlreadyMember != null)
                            {

                                if (isAlreadyMember.LeadRole == 2 && item.LeadRole == 2)
                                {
                                    item.LeadRole = 3;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                                }
                                else if (isAlreadyMember.LeadRole == 1 && item.LeadRole == 2)
                                {
                                    item.LeadRole = 3;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);

                                }
                                else if (isAlreadyMember.LeadRole == 2 && item.LeadRole == 1)
                                {
                                    temp = (int)isAlreadyMember.LeadRole;
                                    isAlreadyMember.LeadRole = item.LeadRole;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(isAlreadyMember, de);
                                    item.LeadRole = 3;
                                    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);


                                }

                            }
                            else
                            {
                                item.UserId = managerId;
                                new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                                GroupTask_User obj = new GroupTask_User()
                                {
                                    GroupTaskDetailsId = item.GroupTaskDetailsId,
                                    IsActive = 1,
                                    LeadRole = 3,
                                    UserId = u.Id
                                };
                                new GroupTask_UserBL().AddGroupTask_Users(obj, de);
                            }
                        }
                    }
                    else
                    {
                        return Json("0");
                    }
                }
                else
                {                 
                    List<GroupTask_User> listu = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == u.Id).ToList();
                    foreach (GroupTask_User item in listu)
                    {
                        item.LeadRole = 3;

                        new GroupTask_UserBL().UpdateGroupTask_Users(item, de);

                        //if (item.LeadRole == 1)
                        //{
                        //    //GroupTask_User secondlead = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.GroupTaskDetailsId == item.GroupTaskDetailsId && x.LeadRole == 2).FirstOrDefault();
                        //    //if (secondlead != null)
                        //    //{
                        //    //    secondlead.LeadRole = 1;
                        //    //    new GroupTask_UserBL().UpdateGroupTask_Users(secondlead, de);

                        //    //    item.LeadRole = 3;

                        //    //    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                        //    //}
                        //}
                        //else
                        //{
                        //    item.LeadRole = 3;

                        //    new GroupTask_UserBL().UpdateGroupTask_Users(item, de);
                        //}
                    }

                }
                u.DepartmentId = DepartmentId;
                u.DivisionId = null;
                u.IsMasterAdmin = null;
                u.Role = 3;

                new UserBL().UpdateUsers(u, de);

                return Json("Updated successfully");
            }
            return Json("00");
        }



        //public ActionResult CanvasCourseDetails(string v, string taskid = "", string way = "", string isModal = "", string depatment = "", string sid = "", string IsManager = "", string loginId = "")
        //{
        //    try
        //    {
        //        if (AuthenticateUser() == false)
        //        {
        //            return RedirectToAction("Login", "Auth");
        //        }
        //        int courseid = General_Purpose.DecryptId((v));
        //        List<Task> tasklist = new TaskBL().getTasksList().Where(x => x.CourseId == courseid && x.IsResultAnnounced == 1).ToList();
        //        if (tasklist.Count > 0)
        //        {
        //            ViewBag.ResultAnnouncement = 1;
        //        }
        //        else
        //        {
        //            ViewBag.ResultAnnouncement = 0;
        //        }

        //        Course course = General_Purpose.GetCanvasCourse().Where(x => x.id == courseid).FirstOrDefault();

        //        List<Quiz> quizes = General_Purpose.GetCanvasQuizes(courseid);
        //        List<Assignment> assignments = General_Purpose.GetCanvasAssignments(courseid);
        //        ViewBag.taskid = taskid;
        //        if (taskid != "")
        //        {
        //            int idtask;
        //            idtask = General_Purpose.DecryptId((taskid));
        //            if (idtask == 0)
        //            {
        //                string str = HttpUtility.UrlEncode(taskid);
        //                idtask = General_Purpose.DecryptId((str));
        //            }
        //            User_Task usertask = new User_TaskBL().getUser_TasksById(Convert.ToInt32(idtask));
        //            Enrollment en = General_Purpose.GetResult(usertask.User1.Id, courseid);

        //            if (en != null)
        //            {
        //                if (en.computed_final_score != null)
        //                {
        //                    string s = en.computed_final_score;
        //                    double x = Convert.ToDouble(s);
        //                    ViewBag.result = x;
        //                }
        //                else
        //                {
        //                    ViewBag.result = 0.0;
        //                }

        //            }
        //            else
        //                ViewBag.result = null;

        //        }
        //        else
        //        {
        //            Enrollment en = General_Purpose.GetResult(logedinuser.Id, courseid);
        //            if (en != null)
        //            {
        //                if (en.computed_final_score != null)
        //                {
        //                    string s = en.computed_final_score;
        //                    double x = Convert.ToDouble(s);
        //                    ViewBag.result = x;
        //                }
        //                else
        //                {
        //                    ViewBag.result = 0.0;
        //                }

        //            }
        //            else
        //                ViewBag.result = null;


        //        }


        //        // Users In Course
        //        List<User> users = General_Purpose.GetUsersInCourse(course.id);
        //        List<DueDateReminderDTO> list = new List<DueDateReminderDTO>();
        //        List<User_Task> lstusertask = new User_TaskBL().getUser_TasksList().Where(x => x.CanvasCourseId == courseid).ToList();
        //        lstusertask = lstusertask.Where(x => x.User1.Id == logedinuser.Id).ToList();
        //        int late = 0;
        //        foreach (User_Task u in lstusertask)
        //        {
        //            if (u.EndDate < DateTime.Now)
        //            {
        //                late = 1;
        //            }
        //            else
        //                late = 0;
        //            DueDateReminderDTO dt = new DueDateReminderDTO()
        //            {
        //                Id =General_Purpose.EncryptId((u.Id)),
        //                Task = u.Task.Name,
        //                DueDate = (DateTime)u.EndDate,
        //                Late = late,
        //                Role = (int)u.User1.Role

        //            };

        //            list.Add(dt);
        //        }

        //        ViewBag.lstusertask = list;
        //        ViewBag.UsersInCourse = users;
        //        ViewBag.Course = course;
        //        ViewBag.CanvasQuizes = quizes;
        //        ViewBag.CanvasAssignments = assignments;
        //        ViewBag.v = taskid;
        //        ViewBag.isModal = isModal;
        //        ViewBag.way = way;
        //        ViewBag.department = depatment;
        //        ViewBag.sid = sid;
        //        ViewBag.IsManager = IsManager;
        //        ViewBag.loginId = loginId;

        //        return View();

        //    }
        //    catch (Exception ex)
        //    {

        //        errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
        //        return RedirectToAction("Error");

        //    }
        //}

        //public string ShowResult(int courseid, int userId = -1)
        //{
        //    Enrollment en = null;
        //    if (userId != -1)
        //    {
        //        en = General_Purpose.GetResult(userId, courseid);
        //    }


        //    return JsonConvert.SerializeObject(en, Formatting.Indented,
        //        new JsonSerializerSettings()
        //        {
        //            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        //        });
        //}
        //public string CanvasCourseResultAnnouncement(int result = -1, int courseId = -1)
        //{
        //    DatabaseEntities de = new DatabaseEntities();
        //    if (result != -1 && courseId != -1)
        //    {
        //        if (result == 1)
        //        {
        //            List<User_Task> uTask = new User_TaskBL().getUser_TasksList().Where(x => x.CanvasCourseId == courseId && x.IsActive == 1).ToList();

        //            List<string> emails = new List<string>();
        //            List<string> content = new List<string>();
        //            Course cr = General_Purpose.GetCanvasCourse().Where(x => x.id == courseId).FirstOrDefault();
        //            string title = "Canvas Course result Announcement";
        //            cr.name = cr.name + "'s";
        //            foreach (User_Task ut in uTask)
        //            {
        //                string content1 = "Dear " + ut.User1.FirstName + " " + ut.User1.LastName + ",\n Your Canvas Course " + '"' + cr.name + '"' + " result has been announced. Please visit ZUPTU for further details " +
        //      "\n\n Thanks\n Team Zuptu";
        //                List<string> em = emails.Where(x => x == ut.User1.Email).ToList();

        //                if (em.Count == 0)
        //                {
        //                    emails.Add(ut.User1.Email);
        //                    content.Add(content1);
        //                }

        //            }
        //            MainMailClass mail = new MainMailClass();
        //            mail.mail(emails, content, title);

        //        }
        //        List<Task> taskslist = new TaskBL().getTasksList().Where(x => x.CourseId == courseId).ToList();
        //        foreach (Task task in taskslist)
        //        {
        //            Task tsk = new Task()
        //            {
        //                Id = task.Id,
        //                IsActive = task.IsActive,
        //                Name = task.Name,
        //                TaskTypeID = task.TaskTypeID,
        //                DivisionId = task.DivisionId,
        //                Description = task.Description,
        //                Cost_ = task.Cost_,
        //                Hours = task.Hours,
        //                CEU = task.CEU,
        //                DepartmentID = task.DepartmentID,
        //                File = task.File,
        //                UserId = task.UserId,
        //                IsPrivate = task.IsPrivate,
        //                CourseId = task.CourseId,
        //                IsResultAnnounced = result,


        //            };
        //            new TaskBL().UpdateTasks(tsk);

        //        }


        //        return JsonConvert.SerializeObject("Yes", Formatting.Indented,
        //       new JsonSerializerSettings()
        //       {
        //           ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        //       });
        //    }
        //    return JsonConvert.SerializeObject("No", Formatting.Indented,
        //       new JsonSerializerSettings()
        //       {
        //           ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        //       });
        //}
        public string CheckDays(int taskid, int days = -1)
        {
            User_Task us = new User_TaskBL().getUser_TasksById(taskid);
            DateTime cdate = DateTime.Now.Date;
            DateTime endd = Convert.ToDateTime(us.EndDate).Date;
            int json = -1;
            if (endd > cdate)
            {
                DateTime dd = endd.AddDays(-days).Date;
                if (cdate < dd)
                {
                    json = 1;
                }
                else
                {
                    json = 0;
                }

            }

            return JsonConvert.SerializeObject(json, Formatting.Indented,
                new JsonSerializerSettings()
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
        }

        public ActionResult SetReminder(string v, string isModal = "", string way = "", int tskid = -1, int DReminder = -1, int DaysBeforeDD = -1, string s = "", string loginId = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                User_Task task = new User_TaskBL().getUser_TasksById(tskid);


                if (DReminder != -1)
                {
                    if (DReminder == 1)
                    {
                        task.DailyReminder = 1;
                    }
                    if (DReminder == 2)
                    {
                        task.DailyReminder = 2;
                    }
                    if (DReminder == 3)
                    {
                        task.DailyReminder = 2;
                    }
                }
                if (DaysBeforeDD != -1)
                {
                    DateTime endate = Convert.ToDateTime(task.EndDate).Date;
                    DateTime dd = endate.AddDays(-DaysBeforeDD);
                    task.BeforeDDateReminder = dd;
                }



                User_Task usertask = new User_Task()
                {
                    Id = task.Id,
                    IsActive = task.IsActive,
                    StartDate = task.StartDate,
                    EndDate = task.EndDate,
                    Notes = task.Notes,
                    Cost = task.Cost,
                    CEU = task.CEU,
                    Grad = task.Grad,
                    UserID = task.UserID,
                    TaskID = task.TaskID,
                    CreatedID = task.CreatedID,
                    Status = task.Status,
                    Hours = task.Hours,
                    CompletionDate = task.CompletionDate,
                    File = task.File,
                    RepeatTime = task.RepeatTime,
                    RepeatDeadline = task.RepeatDeadline,
                    IsPrivate = task.IsPrivate,
                    Priority = task.Priority,
                    BeforeDDateReminder = task.BeforeDDateReminder,
                    DailyReminder = task.DailyReminder,
                    CanvasCourseId = task.CanvasCourseId,
                    DepartmentID = task.DepartmentID,
                    DivisionID = task.DivisionID,
                    TemplateName = task.TemplateName,
                    ParentID = task.ParentID,
                    TicketSortBy = task.TicketSortBy,
                    CreatedAt=task.CreatedAt,
                    TemplateCreatedBy= task.TemplateCreatedBy,
                    CompanyId= task.CompanyId,
                    GroupTaskDetailId = task.GroupTaskDetailId

                };
                usertask.CompanyId = Convert.ToInt32(logedinuser.Company);
                new User_TaskBL().UpdateUser_Tasks(usertask);
                if (s != "")
                {
                    return RedirectToAction("Taskdetails", "Manager", new { v = v, isModal = isModal, loginId = loginId, way = way, message = "Reminder Set Successfully" });
                }
                return RedirectToAction("Taskdetails", "Task", new { v = v, isModal = isModal, way = way, message = "Reminder Set Successfully", sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult UpdateReminder(string v, string isModal = "", string way = "", int tskid = -1, int UpdateDReminder = -1, int UpdateDaysBeforeDD = -1, string s = "", string loginId = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                User_Task task = new User_TaskBL().getUser_TasksById(tskid);
                if (UpdateDReminder != -1)
                {
                    if (UpdateDReminder == 1)
                    {
                        task.DailyReminder = 1;
                    }
                    if (UpdateDReminder == 2)
                    {
                        task.DailyReminder = 2;
                    }
                    if (UpdateDReminder == 3)
                    {
                        task.DailyReminder = 3;
                    }
                }
                if (UpdateDaysBeforeDD != -1)
                {
                    DateTime endate = Convert.ToDateTime(task.EndDate).Date;
                    DateTime dd = endate.AddDays(-UpdateDaysBeforeDD);
                    task.BeforeDDateReminder = dd;
                }




                User_Task usertask = new User_Task()
                {
                    Id = task.Id,
                    IsActive = task.IsActive,
                    StartDate = task.StartDate,
                    EndDate = task.EndDate,
                    Notes = task.Notes,
                    Cost = task.Cost,
                    CEU = task.CEU,
                    Grad = task.Grad,
                    UserID = task.UserID,
                    TaskID = task.TaskID,
                    CreatedID = task.CreatedID,
                    Status = task.Status,
                    Hours = task.Hours,
                    CompletionDate = task.CompletionDate,
                    File = task.File,
                    RepeatTime = task.RepeatTime,
                    RepeatDeadline = task.RepeatDeadline,
                    IsPrivate = task.IsPrivate,
                    Priority = task.Priority,
                    BeforeDDateReminder = task.BeforeDDateReminder,
                    DailyReminder = task.DailyReminder,
                    CanvasCourseId = task.CanvasCourseId,
                    DepartmentID = task.DepartmentID,
                    DivisionID = task.DivisionID,
                    TemplateName = task.TemplateName,
                    ParentID = task.ParentID,
                    TicketSortBy = task.TicketSortBy,
                    CreatedAt=task.CreatedAt,
                    TemplateCreatedBy=task.TemplateCreatedBy,
                    CompanyId =task.CompanyId,
                    GroupTaskDetailId = task.GroupTaskDetailId


                };
                usertask.CompanyId = Convert.ToInt32(logedinuser.Company);
                new User_TaskBL().UpdateUser_Tasks(usertask);
                if (s != "")
                {
                    return RedirectToAction("Taskdetails", "Manager", new { v = v, isModal = isModal, way = way, message = "Reminder Updated Successfully", loginId = loginId });
                }
                return RedirectToAction("Taskdetails", "Task", new { v = v, isModal = isModal, way = way, message = "Reminder Updated Successfully", sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult OffReminder(string v, string isModal = "", string way = "", int tskid = -1, string Type = "", string s = "", string loginId = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                User_Task task = new User_TaskBL().getUser_TasksById(tskid);
                if (Type != "")
                {
                    if (Type == "BeforeDDayReminder")
                    {
                        task.BeforeDDateReminder = null;
                    }
                    if (Type == "DailyReminder")
                    {
                        task.DailyReminder = null;
                    }

                }



                User_Task usertask = new User_Task()
                {
                    Id = task.Id,
                    IsActive = task.IsActive,
                    StartDate = task.StartDate,
                    EndDate = task.EndDate,
                    Notes = task.Notes,
                    Cost = task.Cost,
                    CEU = task.CEU,
                    Grad = task.Grad,
                    UserID = task.UserID,
                    TaskID = task.TaskID,
                    CreatedID = task.CreatedID,
                    Status = task.Status,
                    Hours = task.Hours,
                    CompletionDate = task.CompletionDate,
                    File = task.File,
                    RepeatTime = task.RepeatTime,
                    RepeatDeadline = task.RepeatDeadline,
                    IsPrivate = task.IsPrivate,
                    Priority = task.Priority,
                    BeforeDDateReminder = task.BeforeDDateReminder,
                    DailyReminder = task.DailyReminder,
                    CanvasCourseId = task.CanvasCourseId,
                    DepartmentID = task.DepartmentID,
                    DivisionID = task.DivisionID,
                    TemplateName = task.TemplateName,
                    ParentID = task.ParentID,
                    TicketSortBy = task.TicketSortBy,
                    CreatedAt= task.CreatedAt,
                    TemplateCreatedBy= task.TemplateCreatedBy,
                    CompanyId=task.CompanyId,
                    GroupTaskDetailId = task.GroupTaskDetailId

                };
                usertask.CompanyId = Convert.ToInt32(logedinuser.Company);
                new User_TaskBL().UpdateUser_Tasks(usertask);
                if (s != "")
                {
                    return RedirectToAction("Taskdetails", "Manager", new { v = v, isModal = isModal, way = way, message = "Reminder Off Successfully", loginId = loginId });
                }
                return RedirectToAction("Taskdetails", "Task", new { v = v, isModal = isModal, way = way, message = "Reminder Off Successfully", sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteTaskFunctionEmployeePage(int sid, int empid, string way = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                new User_TaskBL().DeleteUser_Tasks(sid);
                return RedirectToAction("UpdateEmployee", "Utilities", new { sid = General_Purpose.EncryptId(empid), message = "Employee task has been deleted", way = way });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult updateStatus(int status, string traineTaskId, string way = "", string isModal = "", string department = "", string sid = "", int cStatus = -1, string v = "", string DivDepID = "")
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int taskId = General_Purpose.DecryptId((traineTaskId));
                DatabaseEntities de = new DatabaseEntities();
                List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(taskId, de).Where(x => x.CompletionDatetime == null).ToList();



                List<User> email = new List<User>();
                List<string> content = new List<string>();
                User_Task User_Task = new User_TaskBL().getUser_TasksByIdWrapper(taskId, de);
                if (User_Task.Status != status)
                {
                    User u = new UserBL().getUsersById((int)User_Task.UserID);

                    email.Add(u);
                    content.Add(Messages.taskStatusUpdate(User_Task));
                    User_Task.Status = status;
                    Communication.sendMessage(content, email);
                    data.TaskId = User_Task.Id.ToString();
                    General_Purpose.SendPushNotification(u.Player_Id, Messages.taskStatusUpdate(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());

                    if (cStatus == 4)
                    {
                        User_Task.CompletionDate = null;

                    }
                    if (status == 4)
                    {
                        foreach (Task_Ticket x in t)
                        {
                            x.CompletedByUser = logedinuser.Id;
                            x.CompletionDatetime = DateTime.Now;
                            new Task_TicketBL().UpdateTask_Tickets(x, de);

                        }


                        User_Task.CompletionDate = DateTime.Now;
                        Communication.sendMessage(new List<string>() { (Messages.taskCompleted(User_Task)) }, email);
                        data.TaskId = User_Task.Id.ToString();
                        General_Purpose.SendPushNotification(u.Player_Id, Messages.taskCompleted(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());

                    }
                    new User_TaskBL().UpdateUser_Tasks(User_Task, de);
                    de.SaveChanges();
                }
                return RedirectToAction("taskDetails", "Task", new { v = traineTaskId, message = "Status has been updated.", way, department, sid, isModal = isModal, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

     

        //function is used to update status of user tasks from directly calender
        public ActionResult UpdateStatusIndex(int status, int TaskId, int TaskType)
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                if (TaskType == 1)
                {
                    DatabaseEntities de = new DatabaseEntities();
                    List<Task_Ticket> t = new Task_TicketBL().Task_TicketswithoutWreapper(TaskId, de).Where(x => x.CompletionDatetime == null).ToList();



                    List<User> email = new List<User>();
                    List<string> content = new List<string>();
                    User_Task User_Task = new User_TaskBL().getUser_TasksByIdWrapper(TaskId, de);
                    if (User_Task.Status != status)
                    {
                        User u = new UserBL().getUsersById((int)User_Task.UserID);

                        email.Add(u);
                        content.Add(Messages.taskStatusUpdate(User_Task));
                        User_Task.Status = status;
                        Communication.sendMessage(content, email);
                        data.TaskId = User_Task.Id.ToString();
                        General_Purpose.SendPushNotification(u.Player_Id, Messages.taskStatusUpdate(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());


                        if (status == 4)
                        {
                            foreach (Task_Ticket x in t)
                            {
                                x.CompletedByUser = logedinuser.Id;
                                x.CompletionDatetime = DateTime.Now;
                                new Task_TicketBL().UpdateTask_Tickets(x, de);

                            }


                            User_Task.CompletionDate = DateTime.Now;
                            Communication.sendMessage(new List<string>() { (Messages.taskCompleted(User_Task)) }, email);
                            data.TaskId = User_Task.Id.ToString();
                            General_Purpose.SendPushNotification(u.Player_Id, Messages.taskCompleted(User_Task, 1), "Message from Zuptu", data, u.Id.ToString());

                        }
                        new User_TaskBL().UpdateUser_Tasks(User_Task, de);
                        de.SaveChanges();
                    }
                }
                else if(TaskType == 2)
                {
                    DatabaseEntities de = new DatabaseEntities();
                    de.Configuration.ProxyCreationEnabled = false;
                    de.Configuration.LazyLoadingEnabled = true;

                    List<GroupTask_Ticket> t = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(TaskId, de).Where(x => x.CompletionDatetime == null).ToList();


                    DatabaseEntities d = new DatabaseEntities();
                    GroupTasks_Details gtbl = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(TaskId, d);
                    List<User> emails = new List<User>();
                    List<string> comment = new List<string>();
                    List<GroupTask_User> lst = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == gtbl.Id).ToList();
                    foreach (var item in lst)
                    {
                        User u = new UserBL().getUsersById((int)item.UserId);

                        emails.Add(u);
                        comment.Add(Messages.groupTaskStatusUpdation(gtbl, item.User));
                        data.GroupTaskDetailsId = gtbl.Id.ToString();

                        General_Purpose.SendPushNotification(u.Player_Id, Messages.groupTaskStatusUpdation(gtbl, item.User, 1), "Message from Zuptu", data, u.Id.ToString());
                    }

                    if (gtbl.Status != status)
                    {
                        gtbl.Status = status;
                        
                        if (status == 4)
                        {
                            gtbl.CompletionDate = DateTime.Now;

                            foreach (GroupTask_Ticket x in t)
                            {
                                x.CompletedByUser = logedinuser.Id;
                                x.CompletionDatetime = DateTime.Now;
                                new GroupTask_TicketBL().UpdateGroupTask_Tickets(x, de);

                            }
                        }
                        new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(gtbl, d);
                        d.SaveChanges();
                    }
                    Communication.sendMessage(comment, emails, Messages.groupTaskSlackMessage(gtbl.GroupTask.Name), gtbl.SlackChannel);

                }
                return RedirectToAction("Index", "Auth", new { Message = "Status has been updated."});
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        [HttpPost/*, ValidateInput(false)*/]
        public ActionResult TestaddComment(string comment, string taskId, int repcomntid = -1, string isModal = "", string way = "", string sid = "", string department = "")
        {
            return Json("true");
        }



        [HttpPost/*, ValidateInput(false)*/]
        public ActionResult addComment(string comment, string taskId, int repcomntid = -1, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                int tId = General_Purpose.DecryptId((taskId));
                TaskComment tc = new TaskComment();
                if (repcomntid != -1)
                {
                    tc = new TaskComment() { TaskId = tId, Comment = comment, Date = DateTime.Now.ToString(), UserId = logedinuser.Id, ParentId = (int)repcomntid, IsActive = 1 };
                }
                else
                {
                    tc = new TaskComment() { TaskId = tId, Comment = comment, Date = DateTime.Now.ToString(), UserId = logedinuser.Id, IsActive = 1 };
                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;

                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        tc.FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        tc.File = fileName;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            tc.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }

                User_Task tt = new User_TaskBL().getUser_TasksById(tc.TaskId.Value);

                Communication.sendMessage(new List<string>() { Messages.taskComment(tt) }, new List<User>() { tt.User1 });
                data.TaskId = tt.Id.ToString();
                General_Purpose.SendPushNotification(tt.User1.Player_Id, Messages.taskComment(tt, 1), "Message from Zuptu", data, tt.User1.Id.ToString());

                User_Task ut5 = new User_TaskBL().getUser_TasksById((int)tc.TaskId);
                tc.CompanyId = Convert.ToInt32(logedinuser.Company);
                tc.TaskStartDate = ut5.StartDate;
                tc.TaskEndDate = ut5.EndDate;
                tc.DepartmentId = (int)ut5.Task.DepartmentID;
                tc.DivisionId = (int)ut5.Task.Department.DivisionID;
                tc.CreatedBy = logedinuser.Id;
                new TaskCommentBL().AddTaskComments(tc);
                return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId(tId), isModal = isModal, way = way, message = "Comment has been added", department = department, sid = sid, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult increaseFreqTask(string taskId, string sid = "", string isModal = "", string way = "", string department = "", string DivDepID = "", string FeqEndingDate = "")
        {
            try
            {
                int tId = General_Purpose.DecryptId((taskId));
                User_Task utask = new User_TaskBL().getUser_TasksById(tId);
                if (utask.ParentID != null)
                {
                    User_Task u = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == utask.ParentID).Last();

                    if (FeqEndingDate == "")
                    {
                        return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId(tId), isModal = isModal, way = way, message = "Task has not been assigned because you have not set frequency ending date", department = department, sid = sid, DivDepID = DivDepID });


                    }
                    DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                    //if (FEndingDate < u.StartDate)
                    //{
                    //    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((tId)), displayMessage = "Task has not been assigned because you have not set frequency ending date.", isModal = isModal, way = way, loginId = loginId });

                    //}
                    if (FEndingDate <= Convert.ToDateTime(u.StartDate))
                    {
                        return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId(tId), isModal = isModal, way = way, message = "Frequency ending date should be greater than start date of last recursive task.", department = department, sid = sid, DivDepID = DivDepID });
                    }
                    // tm = ubl.AddUser_Tasks(tm);
                    // DateTime startDate = tm.StartDate.Value;
                    DateTime dt = u.StartDate.Value.AddDays(Convert.ToInt32(utask.RepeatTime));
                    while (FEndingDate.AddDays(1) > dt)
                    {
                        User_Task ut = new User_Task()
                        {
                            IsActive = 1,
                            IsPrivate = utask.IsPrivate,
                            StartDate = dt,
                            EndDate = dt,
                            Cost = utask.Cost,
                            CEU = utask.CEU,
                            Grad = utask.Grad,
                            UserID = utask.UserID,
                            TaskID = utask.TaskID,
                            CreatedID = utask.CreatedID,
                            CompletionDate = utask.CompletionDate,
                            File = utask.File,
                            RepeatDeadline = utask.RepeatDeadline,
                            Priority = utask.Priority,
                            CanvasCourseId = utask.CanvasCourseId,
                            Status = 0,
                            RepeatTime = utask.RepeatTime,
                            ParentID = utask.ParentID,





                        };
                       ut = new User_TaskBL().AddUser_Tasks(ut);

                        if (utask.CanvasCourseId != null)
                            General_Purpose.AssignLMSCourse(ut.Id, (int)utask.CanvasCourseId);

                        int days = Convert.ToInt32(utask.RepeatTime);
                        if (days == 30)
                            dt = dt.AddMonths(1);
                        else if (days == 365)
                            dt = dt.AddYears(1);
                        else
                            dt = dt.AddDays(days);
                        //  dt = dt.AddDays(Convert.ToInt32(utask.RepeatTime));




                    }
                }
                else
                {
                    User_Task uss = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == utask.Id).FirstOrDefault();
                    //User_Task uss2 = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == utask.Id).FirstOrDefault();
                    if (uss != null || utask != null)
                    {

                        User_Task u = new User_Task();
                        if (uss != null)
                            u = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == uss.ParentID).Last();
                        else
                        {
                            u = utask;
                            uss = utask;
                        }



                        if (FeqEndingDate == "")
                        {
                            return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId(tId), isModal = isModal, way = way, message = "Task has not been assigned because you have not set frequency ending date", department = department, sid = sid, DivDepID = DivDepID });

                        }
                        DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                        if (FEndingDate <= Convert.ToDateTime(u.StartDate))
                        {
                            return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, way = way, message = "Frequency ending date should be greater than start date of last recursive task.", department = department, sid = sid, DivDepID = DivDepID });
                        }

                        DateTime dt = u.StartDate.Value.AddDays(Convert.ToInt32(utask.RepeatTime));
                        if (uss.ParentID == null)
                            uss.ParentID = utask.Id;

                        while (FEndingDate.AddDays(1) > dt)
                        {
                            User_Task ut = new User_Task()
                            {
                                IsActive = 1,
                                IsPrivate = uss.IsPrivate,
                                StartDate = dt,
                                EndDate = dt,
                                Cost = uss.Cost,
                                CEU = uss.CEU,
                                Grad = uss.Grad,
                                UserID = uss.UserID,
                                TaskID = uss.TaskID,
                                CreatedID = logedinuser.Id,
                                CompletionDate = uss.CompletionDate,
                                File = uss.File,
                                RepeatDeadline = uss.RepeatDeadline,
                                Priority = uss.Priority,
                                //CanvasCourseId = uss.CanvasCourseId,
                                Status = 0,
                                RepeatTime = uss.RepeatTime,
                                ParentID = uss.ParentID,





                            };
                            new User_TaskBL().AddUser_Tasks(ut);


                            int days = Convert.ToInt32(utask.RepeatTime);
                            if (days == 30)
                                dt = dt.AddMonths(1);
                            else if (days == 365)
                                dt = dt.AddYears(1);
                            else
                                dt = dt.AddDays(days);
                            // dt = dt.AddDays(Convert.ToInt32(uss.RepeatTime));




                        }
                    }
                    else
                    {
                        return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, way = way, message = "Something went wrong!", department = department, sid = sid, DivDepID = DivDepID });

                    }

                }
                return RedirectToAction("taskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, way = way, message = "Recursive task increased successfully", department = department, sid = sid, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
        public ActionResult increaseFreqgrpTask(string taskId, string isModal = "", string FeqEndingDate = "")
        {
            try
            {
                int tId = General_Purpose.DecryptId((taskId));
                GroupTasks_Details utask = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(tId);
                User_Task ut = new User_Task();
                GroupTask_User Gtu = new GroupTask_User();
                CourseGroupStudy Cgst = new CourseGroupStudy();
                int flag = 0;
                //Group Study 
                if (utask.CourseId != null && utask.CourseId != -1)
                {
                    Gtu = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.LeadRole == 1 && x.IsActive == 1).LastOrDefault();
                    ut = new User_TaskBL().GetGroupStudyUser_Tasks(Convert.ToInt32(logedinuser.Company)).Where(x => x.GroupTaskDetailId == utask.Id).FirstOrDefault();
                    if (ut != null)
                    {
                        Course_UserTask Cut = new Course_UserTaskBL().getCourse_UserTaskList().Where(x => x.User_TaskID == ut.Id && x.CourseID == utask.CourseId).FirstOrDefault();
                        if (Cut != null)
                        {
                            if (Cut.CourseGroupStudyId != null)
                            {
                                Cgst = new CourseGroupStudyBL().getCourseGroupStudyById((int)Cut.CourseGroupStudyId);
                                flag = 1;
                            }
                        }



                    }

                }

                if (utask.ParentID != null)
                {
                    GroupTasks_Details u = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x => x.ParentID == utask.ParentID).Last();

                    if (FeqEndingDate == "")
                    {
                        return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Task has not been assigned because you have not set frequency ending date" });


                    }
                    DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);
                  
                    if (FEndingDate <= Convert.ToDateTime(u.StartDate))
                    {
                        return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Frequency ending date should be greater than start date of last recursive task." });
                    }
                 
                    DateTime dt = u.StartDate.Value.AddDays(Convert.ToInt32(utask.RepeatTime));
                    GroupTasks_Details groupTasks_Details = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(tId);

                    while (FEndingDate.AddDays(1) > dt)
                    {
                        GroupTasks_Details newobj = new GroupTasks_Details()
                        {
                            Hours = groupTasks_Details.Hours,
                            CEU = groupTasks_Details.CEU,
                            StartDate = dt,
                            EndDate = dt,
                            Grade = groupTasks_Details.Grade,
                            CompletionDate = groupTasks_Details.CompletionDate,
                            IsActive = groupTasks_Details.IsActive,
                            Notes = groupTasks_Details.Notes,
                            GroupTaskId = groupTasks_Details.GroupTaskId,
                            Status = groupTasks_Details.Status,
                            Cost = groupTasks_Details.Cost,
                            Priority = groupTasks_Details.Priority,
                            SlackChannel = groupTasks_Details.SlackChannel,
                            CreatedBy = groupTasks_Details.CreatedBy,
                            TicketSortBy = groupTasks_Details.TicketSortBy,
                            ParentID = utask.ParentID,
                            RepeatTime = groupTasks_Details.RepeatTime,
                            RepeatDeadline = groupTasks_Details.RepeatDeadline,
                            CreatedAt = DateTime.Now



                        };

                        int Id=  new GroupTasks_DetailsBL().AddGroupTasks_Detailss(newobj);
                        if(flag>0)
                        General_Purpose.CreateGroupStudy(Id, Cgst.Name, (int)Gtu.UserId, (int)utask.CourseId, (int)ut.TaskID, null);
                        // new GroupTasks_DetailsBL().AddGroupTasks_Detailss(groupTasks_Details);

                        newobj.GroupTask = new GroupTaskBL().getGroupTasksById(newobj.GroupTaskId.Value);
                        //   GroupTask_User  PrimaryLead= groupTasks_Details.GroupTask_User.Where(x => x.LeadRole == 1).fir


                        int flag1 = 0;
                        List<User> trainee1 = new UserBL().getTraineesList();
                        List<User> emails = new List<User>();
                        List<string> content = new List<string>();
                        List<GroupTask_User> ulist = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == groupTasks_Details.Id).ToList();
                        foreach (var item in ulist.Where(x => x.IsActive == 1))
                        {

                            // flag1++;

                            emails.Add(item.User);
                            content.Add(Messages.groupTaskAddition(newobj, item.User));

                            new GroupTask_UserBL().AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = newobj.Id, UserId = item.UserId, LeadRole = item.LeadRole, IsActive = 1 });

                        }


                        int days = Convert.ToInt32(utask.RepeatTime);
                        if (days == 30)
                            dt = dt.AddMonths(1);
                        else if (days == 365)
                            dt = dt.AddYears(1);
                        else
                            dt = dt.AddDays(days);
                        // dt = dt.AddDays(Convert.ToInt32(utask.RepeatTime));




                    }
                }
                else
                {
                    GroupTasks_Details uss = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x => x.ParentID == utask.Id).FirstOrDefault();
                    //User_Task uss2 = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == utask.Id).FirstOrDefault();
                    if (uss != null || utask != null)
                    {

                        GroupTasks_Details u = new GroupTasks_Details();
                        if (uss != null)
                            u = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x => x.ParentID == uss.ParentID).Last();
                        else
                        {
                            u = utask;
                            uss = utask;
                        }



                        if (FeqEndingDate == "")
                        {
                            return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Task has not been assigned because you have not set frequency ending date" });

                        }
                        DateTime FEndingDate = Convert.ToDateTime(FeqEndingDate);

                        if (FEndingDate <= Convert.ToDateTime(u.StartDate))
                        {
                            return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Frequency ending date should be greater than start date of last recursive task." });
                        }

                        DateTime dt = u.StartDate.Value.AddDays(Convert.ToInt32(utask.RepeatTime));
                        if (uss.ParentID == null)
                            uss.ParentID = utask.Id;

                        while (FEndingDate.AddDays(1) > dt)
                        {
                           
                            GroupTasks_Details newobj = new GroupTasks_Details()
                            {
                                Hours = uss.Hours,
                                CEU = uss.CEU,
                                StartDate = dt,
                                EndDate = dt,
                                Grade = uss.Grade,
                                CompletionDate = uss.CompletionDate,
                                IsActive = uss.IsActive,
                                Notes = uss.Notes,
                                GroupTaskId = uss.GroupTaskId,
                                Status = uss.Status,
                                Cost = uss.Cost,
                                Priority = uss.Priority,
                                SlackChannel = uss.SlackChannel,
                                CreatedBy = uss.CreatedBy,
                                TicketSortBy = uss.TicketSortBy,
                                ParentID = uss.ParentID,
                                RepeatTime = uss.RepeatTime,
                                RepeatDeadline = uss.RepeatDeadline,
                                CreatedAt = DateTime.Now



                            };
                          int Id =  new GroupTasks_DetailsBL().AddGroupTasks_Detailss(newobj);

                            if (flag > 0)
                                General_Purpose.CreateGroupStudy(Id, Cgst.Name, (int)Gtu.UserId, (int)utask.CourseId, (int)ut.TaskID, null);

                            // new GroupTasks_DetailsBL().AddGroupTasks_Detailss(groupTasks_Details);

                            newobj.GroupTask = new GroupTaskBL().getGroupTasksById(newobj.GroupTaskId.Value);
                            //   GroupTask_User  PrimaryLead= groupTasks_Details.GroupTask_User.Where(x => x.LeadRole == 1).fir


                            int flag1 = 0;
                            List<User> trainee1 = new UserBL().getTraineesList();
                            List<User> emails = new List<User>();
                            List<string> content = new List<string>();
                            List<GroupTask_User> ulist2 = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == uss.Id).ToList();

                            foreach (var item in ulist2.Where(x => x.IsActive == 1))
                            {

                                // flag1++;

                                emails.Add(item.User);
                                content.Add(Messages.groupTaskAddition(newobj, item.User));

                                new GroupTask_UserBL().AddGroupTask_Users(new GroupTask_User() { GroupTaskDetailsId = newobj.Id, UserId = item.UserId, LeadRole = item.LeadRole, IsActive = 1 });

                            }


                            int days = Convert.ToInt32(uss.RepeatTime);
                            if (days == 30)
                                dt = dt.AddMonths(1);
                            else if (days == 365)
                                dt = dt.AddYears(1);
                            else
                                dt = dt.AddDays(days);
                            //  dt = dt.AddDays(Convert.ToInt32(uss.RepeatTime));




                        }
                    }
                    else
                    {
                        return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Something went wrong!" });

                    }

                }
                return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId((tId)), isModal = isModal, message = "Recursive task increased successfully" });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }


        public ActionResult DeleteAllFrequencyTasks(int Id, string BackURL)
        {
            try
            {
                User_Task task = new User_TaskBL().getUser_TasksById(Id);
                User_Task us = new User_TaskBL().getUser_TasksList().Where(x => x.ParentID == task.Id).FirstOrDefault();
                List<User_Task> list = new List<User_Task>();
                if ((logedinuser.Role == 1 || logedinuser.Role == 2 || logedinuser.Role == 4) && task.ParentID != null)
                {
                    User_Task u = new User_TaskBL().getUser_TasksById((int)task.ParentID);
                    list = new User_TaskBL().getUser_TasksList().Where(c => c.IsActive == 1 && c.ParentID == u.Id).ToList();
                    list.Insert(0, u);

                }
                else
                {
                    if ((logedinuser.Role == 1 || logedinuser.Role == 2 || logedinuser.Role == 3 || logedinuser.Role == 4) && us != null)
                    {
                        User_Task u1 = new User_TaskBL().getUser_TasksById((int)task.Id);
                        list = new User_TaskBL().getUser_TasksList().Where(c => c.IsActive == 1 && c.ParentID == task.Id).ToList();
                        list.Insert(0, u1);
                    }
                    else
                    {
                        User_Task us1 = new User_TaskBL().getUser_TasksList().Where(x => x.Id == task.Id).FirstOrDefault();
                        if ((logedinuser.Role == 1 || logedinuser.Role == 2 || logedinuser.Role == 3 || logedinuser.Role == 4) && us1 != null)
                        {
                            User_Task u1 = new User_TaskBL().getUser_TasksById((int)task.ParentID);
                            list = new User_TaskBL().getUser_TasksList().Where(c => c.IsActive == 1 && c.ParentID == u1.Id).ToList();
                            list.Insert(0, u1);
                        }

                    }

                }

                foreach (User_Task ut in list)
                {
                    new User_TaskBL().DeleteUser_Tasks(ut.Id);
                }
                if (BackURL == "" || BackURL == null)
                    return RedirectToAction("index", "Auth", new { message = "Recursive tasks has been deleted" });
                return Redirect(BackURL);
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
        public ActionResult DeleteAllFrequencyGroupTasks(int Id, string BackURL)
        {
            try
            {
                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(Id);
                GroupTasks_Details us = new GroupTasks_DetailsBL().getAllGroupTasks_DetailssList().Where(x => x.ParentID == task.Id).FirstOrDefault();

                List<GroupTasks_Details> list = new List<GroupTasks_Details>();
                if ((logedinuser.Role == 1 || logedinuser.Role == 2 || logedinuser.Role == 4) && task.ParentID != null)
                {
                    GroupTasks_Details u = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)task.ParentID);
                    list = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(c => c.IsActive == 1 && c.ParentID == u.Id).ToList();
                    list.Insert(0, u);
                }
                else
                {
                    if ((logedinuser.Role == 1 || logedinuser.Role == 2 || logedinuser.Role == 4) && us != null)
                    {
                        GroupTasks_Details u1 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)task.Id);
                        list = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(c => c.IsActive == 1 && c.ParentID == task.Id).ToList();
                        list.Insert(0, u1);
                    }
                }
                foreach (GroupTasks_Details ut in list)
                {
                    new GroupTasks_DetailsBL().DeleteGroupTasks_Detailss(ut.Id);
                }
                if (BackURL == "" || BackURL == null)
                    return RedirectToAction("index", "Auth", new { message = "Recursive tasks has been deleted" });

                return Redirect(BackURL);
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }


        public string getReplyComment(int cmntid = -1)
        {


            TaskCommentDTO tcd = new TaskCommentDTO();
            if (cmntid != -1)
            {
                TaskComment comment = new TaskCommentBL().getTaskCommentsById(cmntid);
                tcd.Id = comment.Id;
                tcd.Comment = comment.Comment;
            }

            return JsonConvert.SerializeObject(tcd, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });

        }

        public string getReplyGroupComment(int cmntid = -1)
        {

            GroupTaskComment comment = new GroupTaskCommentBL().getGroupTaskCommentsById(cmntid);
            TaskCommentDTO tcd = new TaskCommentDTO();
            if (comment != null)
            {
                tcd.Id = comment.Id;
                tcd.Comment = comment.Comment;
            }

            return JsonConvert.SerializeObject(tcd, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   });

        }

        public ActionResult updateComment(string comment, int commentId, int taskId, int removeFile, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();

                TaskComment tc = new TaskComment() { TaskId = taskId, Comment = comment, UserId = logedinuser.Id };

                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;
                }
                else
                {
                    int count = Request.Files.Count;
                    string path = null;
                    tc.File = null;
                    if (Request.Files.Count > 0)
                    {
                        var file = Request.Files[0];
                        if (file.ContentLength > 0)
                        {
                            BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                            tc.FileName = file.FileName;
                            string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                            string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                            tc.File = fileName;
                        }
                    }
                }


                TaskCommentBL gtmbl = new TaskCommentBL();
                TaskComment gtm = gtmbl.getTaskCommentsById(commentId, de);
                gtm.Comment = comment;
                if (tc.File != null)
                {
                    //Deleting previous file from document manager - Wajeeh
                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtm.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtm.IsDocMFile = null;
                    }
                    //ends

                    gtm.File = tc.File;
                    gtm.FileName = tc.FileName;

                    //Wajeeh's Code for saving this file in document manager
                    if (customLocPath != "")
                    {
                        gtm.IsDocMFile = 1;

                        Models.File addfile = new Models.File()
                        {
                            Name = tc.FileName,
                            FilePath = tc.File,
                            IsActive = 1,
                            CreatedAt = DateTime.Now,
                            UploadingDate = DateTime.Now,
                            UploadedBy = logedinuser.Id,
                            LastModified = DateTime.Now
                        };
                        if (FolderId != -1)
                        {
                            Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                            addfile.Privacy = folder.FolderPath.ToString();
                            addfile.FolderId = folder.Id;
                        }
                        else
                        {
                            addfile.Privacy = FolderId.ToString();
                        }

                        Models.File mainFileAdd = new Models.File();

                        mainFileAdd = new FileBL().AddFile(addfile);

                        if (mainFileAdd == null)
                        {
                            throw new Exception();
                        }
                        else
                        {
                            FileVersion version = new FileVersion()
                            {
                                Name = mainFileAdd.Name,
                                FilePath = mainFileAdd.FilePath,
                                IsActive = mainFileAdd.IsActive,
                                CreatedAt = mainFileAdd.CreatedAt,
                                UploadingDate = mainFileAdd.UploadingDate,
                                UploadedBy = mainFileAdd.UploadedBy,
                                LastModified = mainFileAdd.LastModified,
                                FileId = mainFileAdd.Id,
                                FolderId = mainFileAdd.FolderId,
                                Privacy = mainFileAdd.Privacy,
                                ArchiveDate = mainFileAdd.ArchiveDate,
                                CheckIn = mainFileAdd.CheckIn,
                                CheckOut = mainFileAdd.CheckOut,
                                CheckOutBy = mainFileAdd.CheckOutBy,
                                CurrentVersion = 1,
                                VersionNo = 1,
                                CheckInTime = mainFileAdd.CheckInTime,
                                CheckOutTime = mainFileAdd.CheckOutTime
                            };

                            if (version.Privacy == null)
                            {
                                version.Privacy = "0";
                            }

                            if (new FileVersionBL().AddFileVersion(version) == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = mainFileAdd.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "New File Uploaded"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                        }
                    }
                }
                else if (removeFile == 1)
                {
                    //Wajeeh's Code for deleting file in document manager

                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtm.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtm.IsDocMFile = null;
                    }

                    //ends

                    gtm.File = null;
                    gtm.FileName = null;
                }
                gtmbl.UpdateTaskComments(gtm, de);



                return RedirectToAction("taskDetails", "Task", new { v =General_Purpose.EncryptId((taskId)), message = "Comment has been Updated.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteComment(int commentId, int taskId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                //deleteing comment file from document manager - Wajeeh

                List<TaskComment> comments = new List<TaskComment>();

                TaskComment tm = new TaskCommentBL().getTaskCommentsById(commentId);

                if (tm.File != null)
                {
                    comments.Add(tm);
                }

                List<TaskComment> cms = new TaskCommentBL()
                    .getAllTaskCommentsList()
                    .Where(x => x.ParentId == tm.Id)
                    .ToList();

                if (cms.Count() > 0)
                {
                    foreach (TaskComment taskComment in cms)
                    {
                        if (taskComment.File != null)
                        {
                            comments.Add(taskComment);
                        }
                    }
                }

                if (comments.Count() > 0)
                {
                    foreach (TaskComment t in comments)
                    {
                        Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == t.File).FirstOrDefault();
                        if (file != null)
                        {
                            file.IsActive = 0;
                            if (new FileBL().UpdateFile(file) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            t.IsDocMFile = null;
                        }
                    }
                }

                //ends

                new TaskCommentBL().DeleteTaskComments(commentId);

                return RedirectToAction("taskDetails", "Task", new { v =General_Purpose.EncryptId((taskId)), isModal = isModal, way = way, message = "Comment has been deleted.", sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult downloadFile(int v)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                TaskComment tc = new TaskCommentBL().getTaskCommentsById(v);

                byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + tc.File);
                string fileneame = tc.File;

                return File(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + tc.File, MediaTypeNames.Text.Plain, tc.File);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult downloadFileWithName(string path)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + path);
                string fileneame = path;

                return File(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + path, MediaTypeNames.Text.Plain, path);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult RemoveGroupMember(int sid, int groupTaskDetailsId, string isModal = "")
        {
            GroupTasks_Details gtd = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)groupTaskDetailsId);
            DatabaseEntities de = new DatabaseEntities();

            //For GRoup Study ... If User removed then its registration in Couorse_User Task Table also removed if created
            if (gtd.CourseId != null)
            {
                User_Task ut = new User_TaskBL().GetGroupStudyUser_Tasks(Convert.ToInt32(logedinuser.Company)).Where(x => x.GroupTaskDetailId == gtd.Id).FirstOrDefault();
                if (ut != null)
                {
                    Course_UserTask cut = new Course_UserTaskBL().getCourse_UserTaskList(de).Where(x => x.CourseID == gtd.CourseId && x.User_TaskID == ut.Id && x.UserId==sid).FirstOrDefault();
                    if (cut != null)
                    {
                        cut.IsActive = 0;
                        new Course_UserTaskBL().UpdateCourse_UserTask(cut,de);
                    }

                }
            }
            // GroupTasks_Details g = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(groupTaskDetailsId);
            //GroupTask gt = new GroupTaskBL().getGroupTasksById((int)g.GroupTaskId);

            GroupTask_User gg = new GroupTask_UserBL().getGroupTask_UsersList(de).Where(x => x.UserId == sid && x.GroupTaskDetailsId == groupTaskDetailsId).FirstOrDefault();
            //GroupTask_User gmt = new GroupTask_User()
            //{
            //    GroupTaskDetailsId = gg.GroupTaskDetailsId,
            //    IsActive = 0,
            //    LeadRole = gg.LeadRole,
            //    UserId = gg.UserId
            //};
            //  User admin = new UserBL().getUsersById(sid);
            gg.IsActive = 0;
            new GroupTask_UserBL().UpdateGroupTask_Users(gg, de);




            return Json("Member Removed");

        }
        public ActionResult addGroupMember(int type, int sid, int groupTaskDetailsId, string isModal = "")
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                int r = 0;
                if (type == 1)
                {
                    r = 1;
                }
                else
                {
                    r = type == 2 ? 3 : 2;
                }



                GroupTask_User gmt = new GroupTask_User()
                {
                    GroupTaskDetailsId = groupTaskDetailsId,
                    IsActive = 1,
                    LeadRole = r,
                    UserId = sid
                };
                User admin = new UserBL().getUsersById(sid);
                GroupTasks_Details g = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(groupTaskDetailsId);
                GroupTask gt = new GroupTaskBL().getGroupTasksById((int)g.GroupTaskId);
                new GroupTask_UserBL().AddGroupTask_Users(gmt);

                string str = "";
                if (type == 1)
                {
                    str = "Primary Lead";
                }else if (admin.Role == 1 || admin.Role == 2 || admin.Role == 4)
                    str = "Second Lead";
                else
                    str = "Member";
                string content1 = "Dear " + admin.FirstName + " " + admin.LastName + ",\n You have been added as a " + '"' + str + '"' + " in group task " + '"' + gt.Name + '"' + " Please visit Zuptu for further details. " +
                        "\n\n Thanks\n Team Zuptu";
                List<User> ulist = new List<User>();
                List<string> text = new List<string>();
                ulist.Add(admin);
                text.Add(content1);
                data.GroupTaskDetailsId = g.Id.ToString();
                General_Purpose.SendPushNotification(admin.Player_Id, content1, "Message from Zuptu", data, admin.Id.ToString());

                Communication.sendMessage(text, ulist);


                return RedirectToAction("grouptaskDetails", new { v =General_Purpose.EncryptId((groupTaskDetailsId)), message = "Member has been added", isModal = isModal });

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult grouptaskDetails(string page, string v, string displayMessage = null, string message = "", string isModal = "", int replyId = -1, int viewrepliesid = -1,string DxM="")
        {
            try
            {
                ViewBag.DxM = DxM;

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                int id;
                string strr = "";
                // strr = HttpUtility.UrlEncode(v);
                if (isModal == "")
                {
                    id = Convert.ToInt32(v);
                }
                else
                {
                    id = General_Purpose.DecryptId((v));
                }
                if (id == 0)
                {
                    strr = HttpUtility.UrlEncode(v);
                    id = General_Purpose.DecryptId((strr));
                }


                int divisionId = -1;
                int userId = logedinuser.Id;
                Boolean check = true;

                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(id);

                if (task == null)
                {
                    return RedirectToAction("Index", "Auth", new { message = "Group Task has been deleted or removed for you." });
                }


                GroupTask_User gtu = task.GroupTask_User.Where(x => x.User.DivisionId.HasValue).FirstOrDefault();
                if (gtu == null)
                {
                    gtu = task.GroupTask_User.Where(x => x.User.DepartmentId.HasValue).FirstOrDefault();
                    if (gtu != null)
                    {
                        divisionId = gtu.User.Department.DivisionID.Value;
                    }
                    else
                        divisionId = -1;

                }
                else
                {
                    divisionId = gtu.User.DivisionId.Value;
                }
                int role = logedinuser.Role;

                if (role != 1)
                {
                    check = task.GroupTask_User.Where(x => x.UserId == userId).Count() > 0;
                    if (!check)
                        return RedirectToAction("groupAssignments");
                }
                int grouptaskuserId = 0;
                ViewBag.currentStatus = task.Status;
                ViewBag.extenstionRequest = null;
                ViewBag.status = new List<int>() { 0, 1, 2, 3, 4 }/*.Where(x => x > task.Status.Value).ToList()*/;
                int sessionId = logedinuser.Id;


                if (task.GroupTask_User.Where(x => x.UserId == sessionId).Count() > 0)
                {
                    grouptaskuserId = task.GroupTask_User.FirstOrDefault(x => x.UserId == sessionId).Id;
                }
                else
                {
                    grouptaskuserId = -1;
                }


                if (displayMessage == "Your request has been sent.")
                {
                    string messageText = "Prime lead of group task " + task.GroupTask.Name + " has requested an extension. Please visit Zuptu.com to respond.";
                    if (task.CreatedBy.HasValue)
                    {
                        Communication.sendMessage(new List<string>() { messageText }, new List<User>() { (User)new UserBL().getUsersById(task.CreatedBy.Value) });
                        data.GroupTaskDetailsId = task.Id.ToString();
                        General_Purpose.SendPushNotification(task.User.Player_Id, messageText, "Message from Zuptu", data, task.User.Id.ToString());
                    }
                }
                BlobManager blob = new BlobManager();

                int loginrole = -1;
                List<TaskCommentDTO> files = new List<TaskCommentDTO>();

                User us = new UserBL().getUsersById(userId);
                if (us.IsMasterAdmin == 1)
                {
                    loginrole = 0;
                }
                else if (us.Role == 1)
                {
                    loginrole = 1;
                }
                else if (us.Role == 2 || us.Role == 2)
                {
                    loginrole = 2;
                }
                else if (us.Role == 3)
                {
                    loginrole = 3;
                }


                foreach (var item in task.GroupTask_User)
                {
                    foreach (var comment in item.GroupTaskComments.Where(x => x.IsActive == 1).ToList())
                    {
                        List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                        if (comment.ParentId == null)
                        {
                            List<GroupTaskComment> replycomments = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id && x.IsActive == 1).ToList();

                            if (replycomments.Count() > 0)
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();

                                foreach (var repitem in replycomments)
                                {
                                    TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                    User uss = new User();
                                    tcd2.Comment = repitem.Comment;
                                    tcd2.Id = repitem.Id;
                                    tcd2.isManager = 0;
                                    tcd2.IsDocMFile = repitem.IsDocMFile;

                                    if (repitem.UserId != null && repitem.UserId != 0)
                                        tcd2.userId = (int)repitem.UserId;

                                    if (repitem.GroupTask_User == null)
                                    {
                                        uss = new UserBL().getUsersById(repitem.UserId.Value);
                                    }
                                    else
                                    {
                                        tcd2.userId = repitem.GroupTask_User.UserId.Value;

                                        uss = new UserBL().getUsersById(tcd2.userId);
                                    }


                                    if (loginrole == 0)
                                    {
                                        if (uss.Role == 2 || uss.Role == 4)
                                            tcd2.ROLE = "(Manager)";
                                        else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                            tcd2.ROLE = "(Admin)";
                                        else if (uss.Role == 3)
                                            tcd2.ROLE = "(Employee)";
                                    }
                                    else if (loginrole == 1)
                                    {
                                        if (uss.IsMasterAdmin == 1)
                                        {
                                            tcd2.ROLE = "(M Admin)";
                                        }
                                        else if (uss.Role == 2 || uss.Role == 4)
                                            tcd2.ROLE = "(Manager)";
                                        else if (uss.Role == 3)
                                            tcd2.ROLE = "(Employee)";
                                    }
                                    else if (loginrole == 2)
                                    {
                                        if (uss.IsMasterAdmin == 1)
                                        {
                                            tcd2.ROLE = "(M Admin)";
                                        }
                                        else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                            tcd2.ROLE = "(Admin)";
                                        else if (uss.Role == 3)
                                            tcd2.ROLE = "(Employee)";
                                    }
                                    else if (loginrole == 3)
                                    {
                                        if (uss.IsMasterAdmin == 1)
                                        {
                                            tcd2.ROLE = "(M Admin)";
                                        }
                                        else if (uss.Role == 2 || uss.Role == 4)
                                            tcd2.ROLE = "(Manager)";
                                        else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                            tcd2.ROLE = "(Admin)";
                                    }


                                    tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                    if (repitem.File != null)
                                    {
                                        tcd2.File = repitem.FileName;
                                        tcd2.FilePath = repitem.File;
                                    }
                                    else
                                        tcd2.File = null;
                                    if (repitem.GroupTask_User == null)
                                    {
                                        User usss = new UserBL().getUsersById(repitem.UserId.Value);
                                        tcd2.Name = usss.FirstName + " " + usss.LastName;
                                        tcd2.Image = usss.Image;
                                    }
                                    else
                                    {
                                        tcd2.Name = repitem.GroupTask_User.User.FirstName + " " + repitem.GroupTask_User.User.LastName;
                                        tcd2.Image = repitem.GroupTask_User.User.Image;
                                    }


                                    if (repitem.File != null)
                                    {
                                        try
                                        {
                                            CloudBlockBlob blobObj = blob.getCloudBlockBlob(repitem.File);
                                            blobObj.FetchAttributes();
                                            tcd2.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                        }
                                        catch (Exception e)
                                        {
                                            tcd2.FileSize = "";
                                            tcd2.File = null;
                                            tcd2.FilePath = null;
                                        }


                                    }

                                    else
                                        tcd2.FileSize = "";
                                    files2.Add(tcd2);
                                    tcd2.prime = -1;
                                }

                                tcd.obj = files2;
                                tcd.Comment = comment.Comment;
                                tcd.Id = comment.Id;
                                tcd.isManager = 0;
                                tcd.userId = comment.GroupTask_User.UserId.Value;
                                tcd.IsDocMFile = comment.IsDocMFile;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }


                                tcd.CommentTime = Convert.ToDateTime(comment.Date);
                                if (comment.File != null)
                                {
                                    tcd.File = comment.FileName;
                                    tcd.FilePath = comment.File;
                                }
                                else
                                    tcd.File = null;

                                tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;
                                tcd.Image = comment.GroupTask_User.User.Image;
                                if (comment.File != null)
                                {
                                    try
                                    {
                                        CloudBlockBlob blobObj = blob.getCloudBlockBlob(comment.File);
                                        blobObj.FetchAttributes();
                                        tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                    }
                                    catch (Exception e)
                                    {
                                        tcd.FileSize = "";
                                        tcd.File = null;
                                        tcd.FilePath = null;
                                    }


                                }

                                else
                                    tcd.FileSize = "";
                                files.Add(tcd);
                                tcd.prime = -1;
                            }
                            else
                            {
                                TaskCommentDTO tcd = new TaskCommentDTO();
                                tcd.Comment = comment.Comment;
                                tcd.Id = comment.Id;
                                tcd.isManager = 0;
                                tcd.userId = comment.GroupTask_User.UserId.Value;
                                tcd.IsDocMFile = comment.IsDocMFile;
                                User u = new UserBL().getUsersById(tcd.userId);

                                if (loginrole == 0)
                                {
                                    if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                    else if (u.Role == 3)
                                        tcd.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (u.IsMasterAdmin == 1)
                                    {
                                        tcd.ROLE = "(M Admin)";
                                    }
                                    else if (u.Role == 2 || u.Role == 4)
                                        tcd.ROLE = "(Manager)";
                                    else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                        tcd.ROLE = "(Admin)";
                                }



                                tcd.CommentTime = Convert.ToDateTime(comment.Date);
                                if (comment.File != null)
                                {
                                    tcd.File = comment.FileName;
                                    tcd.FilePath = comment.File;
                                }
                                else
                                    tcd.File = null;

                                tcd.Name = comment.GroupTask_User.User.FirstName + " " + comment.GroupTask_User.User.LastName;
                                tcd.Image = comment.GroupTask_User.User.Image;

                                if (comment.File != null)
                                {
                                    try
                                    {
                                        CloudBlockBlob blobObj = blob.getCloudBlockBlob(comment.File);
                                        blobObj.FetchAttributes();
                                        tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                    }
                                    catch (Exception e)
                                    {
                                        tcd.FileSize = "";
                                        tcd.File = null;
                                        tcd.FilePath = null;
                                    }


                                }

                                else
                                    tcd.FileSize = "";
                                files.Add(tcd);
                                tcd.prime = -1;
                            }



                        }


                    }
                }
                foreach (var comment in task.GroupTaskComments.Where(x => x.IsActive == 1))
                {
                    List<TaskCommentDTO2> files2 = new List<TaskCommentDTO2>();
                    if (comment.ParentId == null)
                    {

                        //List<GroupTaskComment> replycomment = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id).ToList();



                        List<GroupTaskComment> replycomments = new GroupTaskCommentBL().getAllGroupTaskCommentsList().Where(x => x.ParentId == comment.Id && x.IsActive == 1).ToList();
                        if (replycomments.Count() > 0)
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();
                            foreach (var repitem in replycomments)
                            {
                                TaskCommentDTO2 tcd2 = new TaskCommentDTO2();
                                User uss = new User();
                                tcd2.Comment = repitem.Comment;
                                tcd2.Id = repitem.Id;
                                tcd2.isManager = 0;
                                tcd2.IsDocMFile = repitem.IsDocMFile;

                                if (repitem.UserId != null && repitem.UserId != 0)
                                    tcd2.userId = (int)repitem.UserId;

                                if (repitem.GroupTask_User == null)
                                {
                                    uss = new UserBL().getUsersById(repitem.UserId.Value);
                                }
                                else
                                {
                                    tcd2.userId = repitem.GroupTask_User.UserId.Value;
                                    uss = new UserBL().getUsersById(tcd2.userId);
                                }
                                //tcd2.userId = repitem.UserId.Value;
                                //User uss = new UserBL().getUsersById(tcd2.userId);
                                if (loginrole == 0)
                                {
                                    if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 1)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 2)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                    else if (uss.Role == 3)
                                        tcd2.ROLE = "(Employee)";
                                }
                                else if (loginrole == 3)
                                {
                                    if (uss.IsMasterAdmin == 1)
                                    {
                                        tcd2.ROLE = "(M Admin)";
                                    }
                                    else if (uss.Role == 2 || uss.Role == 4)
                                        tcd2.ROLE = "(Manager)";
                                    else if (uss.Role == 1 && (uss.IsMasterAdmin == 0 || uss.IsMasterAdmin == null))
                                        tcd2.ROLE = "(Admin)";
                                }


                                tcd2.CommentTime = Convert.ToDateTime(repitem.Date);
                                if (repitem.File != null)
                                {
                                    tcd2.File = repitem.FileName;
                                    tcd2.FilePath = repitem.File;
                                }
                                else
                                    tcd2.File = null;
                                if (repitem.User == null)
                                {
                                    User usss = new UserBL().getUsersById(repitem.GroupTask_User.UserId.Value);
                                    tcd2.Name = usss.FirstName + " " + usss.LastName;
                                    tcd2.Image = usss.Image;
                                }
                                else
                                {
                                    tcd2.Name = repitem.User.FirstName + " " + repitem.User.LastName;
                                    tcd2.Image = repitem.User.Image;
                                }

                                if (repitem.File != null)
                                {
                                    try
                                    {
                                        CloudBlockBlob blobObj = blob.getCloudBlockBlob(repitem.File);
                                        blobObj.FetchAttributes();
                                        tcd2.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                    }
                                    catch (Exception e)
                                    {
                                        tcd2.FileSize = "";
                                        tcd2.File = null;
                                        tcd2.FilePath = null;
                                    }


                                }
                                else
                                    tcd2.FileSize = "";
                                files2.Add(tcd2);
                                tcd2.prime = -1;
                            }
                            tcd.obj = files2;

                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.UserId.Value;
                            tcd.IsDocMFile = comment.IsDocMFile;
                            User u = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.User.FirstName + " " + comment.User.LastName;
                            tcd.Image = comment.User.Image;
                            if (comment.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(comment.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }


                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;
                        }
                        else
                        {
                            TaskCommentDTO tcd = new TaskCommentDTO();
                            tcd.Comment = comment.Comment;
                            tcd.Id = comment.Id;
                            tcd.isManager = 0;
                            tcd.userId = comment.UserId.Value;
                            tcd.IsDocMFile = comment.IsDocMFile;
                            User u = new UserBL().getUsersById(tcd.userId);
                            if (loginrole == 0)
                            {
                                if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 1)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 2)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                                else if (u.Role == 3)
                                    tcd.ROLE = "(Employee)";
                            }
                            else if (loginrole == 3)
                            {
                                if (u.IsMasterAdmin == 1)
                                {
                                    tcd.ROLE = "(M Admin)";
                                }
                                else if (u.Role == 2 || u.Role == 4)
                                    tcd.ROLE = "(Manager)";
                                else if (u.Role == 1 && (u.IsMasterAdmin == 0 || u.IsMasterAdmin == null))
                                    tcd.ROLE = "(Admin)";
                            }



                            tcd.CommentTime = Convert.ToDateTime(comment.Date);
                            if (comment.File != null)
                            {
                                tcd.File = comment.FileName;
                                tcd.FilePath = comment.File;
                            }
                            else
                                tcd.File = null;
                            tcd.Name = comment.User.FirstName + " " + comment.User.LastName;
                            tcd.Image = comment.User.Image;
                            if (comment.File != null)
                            {
                                try
                                {
                                    CloudBlockBlob blobObj = blob.getCloudBlockBlob(comment.File);
                                    blobObj.FetchAttributes();
                                    tcd.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                                }
                                catch (Exception e)
                                {
                                    tcd.FileSize = "";
                                    tcd.File = null;
                                    tcd.FilePath = null;
                                }


                            }
                            else
                                tcd.FileSize = "";
                            files.Add(tcd);
                            tcd.prime = -1;
                        }

                    }


                }


                GroupTask_User grptaskUser = task.GroupTask_User.Where(x => x.LeadRole == 1).FirstOrDefault();


                int primeLleadId = -1;

                if (grptaskUser != null)
                {
                    primeLleadId = grptaskUser.UserId.Value;
                }
                if (primeLleadId == sessionId && (role == (int)Enums.Role.Manager || role == (int)Enums.Role.Cordinator))
                {
                    ExtensionRequest er = task.ExtensionRequests.Where(x => x.Status > 0 && x.Displayed == 0).LastOrDefault();


                    if (displayMessage == null)
                    {

                        if (er == null)
                        {
                            ViewBag.requestResponse = null;
                        }

                        else if (er.Status == 1)
                        {
                            DatabaseEntities de = new DatabaseEntities();
                            ExtensionRequest _ExtensionRequest = de.ExtensionRequests.FirstOrDefault(x => x.Id == er.Id && x.isActive == 1);

                            if (_ExtensionRequest != null)
                            {
                                _ExtensionRequest.Displayed = 1;

                                de.Entry(_ExtensionRequest).State = System.Data.Entity.EntityState.Modified;
                                de.SaveChanges();
                            }
                            ViewBag.requestResponse = "Your request has been accepted.";
                        }
                        else if (er.Status == 2)
                        {
                            DatabaseEntities de = new DatabaseEntities();
                            ExtensionRequest _ExtensionRequest = de.ExtensionRequests.FirstOrDefault(x => x.Id == er.Id && x.isActive == 1);

                            if (_ExtensionRequest != null)
                            {
                                _ExtensionRequest.Displayed = 1;

                                de.Entry(_ExtensionRequest).State = System.Data.Entity.EntityState.Modified;
                                de.SaveChanges();
                            }
                            ViewBag.requestResponse = "Your request has been rejected.";
                        }
                        else
                        {
                            ViewBag.requestResponse = null;
                        }
                    }
                    else
                    {
                        ViewBag.requestResponse = null;
                    }
                }
                else if (task.CreatedBy == sessionId || logedinuser.Role == 1)
                {
                    ExtensionRequest er = task.ExtensionRequests.Where(x => x.Status <= 0 && x.Displayed == 0).LastOrDefault();

                    if (er != null)
                    {
                        ViewBag.extenstionRequest = "Prime lead of the task has requested to extend the deadline of the project by " + er.RequestedDays + " due to" + er.Reason;
                        ViewBag.erId =General_Purpose.EncryptId((er.Id));

                    }
                    ViewBag.requestResponse = null;
                }


                List<GroupTask_Ticket> gtt = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(task.Id);
                ViewBag.completedTickets = gtt.OrderByDescending(c => c.CompletionDatetime).Where(x => x.CompletionDatetime != null).ToList();



                ViewBag.uncompletedTickets = gtt.OrderBy(c => c.Position).Where(x => x.CompletionDatetime == null).ToList();



                List<TaskCommentDTO> Ticketfiles = new List<TaskCommentDTO>();

                foreach (GroupTask_Ticket item in new GroupTask_TicketBL().getGroupTask_TicketsList().Where(x => x.IsActive == 1 && x.GroupTaskDetails_Id == task.Id))
                {
                    if (item.Ticket_File != null)
                    {
                        User user = new User();
                        if (item.CreatedBy.HasValue)
                            user = new UserBL().GetAllUserById((int)item.CreatedBy);
                        else
                            user = new UserBL().GetAllUserById((int)logedinuser.Id);

                        string addedby = "";
                        if (user != null)
                        {
                            addedby = user.FirstName + " " + user.LastName;
                        }
                        TaskCommentDTO obj = new TaskCommentDTO();
                        obj.Name = addedby;
                        obj.CommentTime = Convert.ToDateTime(item.CreationDatetime);
                        obj.File = item.Ticket_FileName;
                        obj.FilePath = item.Ticket_File;

                        try
                        {
                            CloudBlockBlob blobObj = blob.getCloudBlockBlob(item.Ticket_File);
                            blobObj.FetchAttributes();
                            obj.FileSize = General_Purpose.SizeSuffix(blobObj.Properties.Length);
                        }
                        catch (Exception e)
                        {
                            obj.FileSize = "";
                            obj.File = null;
                            obj.FilePath = null;
                        }

                        Ticketfiles.Add(obj);
                    }
                }
                ViewBag.Ticketfiles = Ticketfiles.OrderByDescending(x => x.CommentTime);



                ViewBag.ActiveToDo = gtt.OrderByDescending(c => c.CompletionDatetime).Where(x => x.CompletionDatetime == null).ToList().Count();
                files = files.OrderBy(x => x.Id).ToList();
                //foreach(TaskCommentDTO i in files)
                // {
                //     if (i.obj.Count() > 0)
                //     {
                //         i.obj = i.obj.OrderBy(x => x.Id).ToList();
                //     }
                // }
                ViewBag.comments = files;
                ViewBag.comments1 = files.OrderByDescending(x => x.CommentTime);
                ViewBag.request = displayMessage;
                ViewBag.taskId = grouptaskuserId;
                if (displayMessage != null)
                    ViewBag.message = displayMessage;
                else
                    ViewBag.message = message;
                if (divisionId != -1)
                {
                    ViewBag.emp = new UserBL().getTraineesList().Where(x => x.Department.DivisionID == divisionId && x.IsActive == 1).ToList();
                    List<User> mang = new UserBL().getManagerList().Where(x => x.DivisionId != null && x.DivisionId == divisionId && x.IsActive == 1).ToList();
                    ViewBag.mang = mang;
                }
                else
                {
                    GroupTask g = new GroupTaskBL().getGroupTasksById((int)task.GroupTaskId);
                    User use = new UserBL().getUsersById((int)g.UserId);
                    ViewBag.emp = new UserBL().getTraineesList().Where(x => x.Department.DivisionID == use.DivisionId && x.IsActive == 1).ToList();


                    ViewBag.mang = new UserBL().getManagerList().Where(x => x.DivisionId != null && x.DivisionId == use.DivisionId && x.IsActive == 1).ToList();

                }
                ViewBag.page = isModal;
                ViewBag.isModal = isModal;
                ViewBag.replyId = replyId;
                ViewBag.viewrepliesId = viewrepliesid;
                ViewBag.GrpTskId = v;
                return View(task);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult updateGroupStatus(int status, int grouptaskId, int isModal, int cStatus = -1)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }


                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = false;
                de.Configuration.LazyLoadingEnabled = true;

                List<GroupTask_Ticket> t = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(grouptaskId, de).Where(x => x.CompletionDatetime == null).ToList();


                DatabaseEntities d = new DatabaseEntities();
                GroupTasks_Details gtbl = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(grouptaskId, d);
                List<User> emails = new List<User>();
                List<string> comment = new List<string>();
                List<GroupTask_User> lst = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == gtbl.Id).ToList();
                foreach (var item in lst)
                {
                    User u = new UserBL().getUsersById((int)item.UserId);

                    emails.Add(u);
                    comment.Add(Messages.groupTaskStatusUpdation(gtbl, item.User));
                    data.GroupTaskDetailsId = gtbl.Id.ToString();

                    General_Purpose.SendPushNotification(u.Player_Id, Messages.groupTaskStatusUpdation(gtbl, item.User, 1), "Message from Zuptu", data, u.Id.ToString());
                }

                if (gtbl.Status != status)
                {
                    gtbl.Status = status;
                    if (cStatus == 4)
                    {
                        gtbl.CompletionDate = null;

                    }
                    if (status == 4)
                    {
                        gtbl.CompletionDate = DateTime.Now;

                        foreach (GroupTask_Ticket x in t)
                        {
                            x.CompletedByUser = logedinuser.Id;
                            x.CompletionDatetime = DateTime.Now;
                            new GroupTask_TicketBL().UpdateGroupTask_Tickets(x, de);

                        }
                    }
                    new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(gtbl, d);
                    d.SaveChanges();
                }
                Communication.sendMessage(comment, emails, Messages.groupTaskSlackMessage(gtbl.GroupTask.Name), gtbl.SlackChannel);

                return RedirectToAction("grouptaskDetails", "Task", new { v = General_Purpose.EncryptId(grouptaskId), message = "Status has been updated.", IsModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public bool UpdateGroupTaskStatusWithGroupStudy(int status, int grouptaskId, int isModal, int cStatus = -1)
        {
            DatabaseEntities de = new DatabaseEntities();
            de.Configuration.ProxyCreationEnabled = false;
            de.Configuration.LazyLoadingEnabled = true;

            List<GroupTask_Ticket> t = new GroupTask_TicketBL().groupTask_TicketswithoutWreapper(grouptaskId, de).Where(x => x.CompletionDatetime == null).ToList();


            DatabaseEntities d = new DatabaseEntities();
            GroupTasks_Details gtbl = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(grouptaskId, d);
            List<User> emails = new List<User>();
            List<string> comment = new List<string>();
            List<GroupTask_User> lst = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.GroupTaskDetailsId == gtbl.Id).ToList();
            foreach (var item in lst)
            {
                User u = new UserBL().getUsersById((int)item.UserId);

                emails.Add(u);
                comment.Add(Messages.groupTaskStatusUpdation(gtbl, item.User));
                data.GroupTaskDetailsId = gtbl.Id.ToString();

                General_Purpose.SendPushNotification(u.Player_Id, Messages.groupTaskStatusUpdation(gtbl, item.User, 1), "Message from Zuptu", data, u.Id.ToString());
            }

            if (gtbl.Status != status)
            {
                gtbl.Status = status;
                //if (cStatus == 4)
                //{
                //    gtbl.CompletionDate = null;

                //}
                if (status == 4)
                {
                    gtbl.CompletionDate = DateTime.Now;

                    foreach (GroupTask_Ticket x in t)
                    {
                        x.CompletedByUser = logedinuser.Id;
                        x.CompletionDatetime = DateTime.Now;
                        new GroupTask_TicketBL().UpdateGroupTask_Tickets(x, de);

                    }
                }
                new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(gtbl, d);
                d.SaveChanges();
            }
            return true;
        }
        public ActionResult deleteTaskFile(int fileId, string deptId, int taskId, string way="")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }


                new TaskFileBL().DeleteTaskFile(fileId);

                return RedirectToAction("displayUpdateAction", "Task", new { sid =General_Purpose.EncryptId((taskId)), deptId = deptId, way = way });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult uploadTaskFile(string deptId, int taskId, string way="")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }


                int count = Request.Files.Count;
                BlobManager BlobManagerObj = new BlobManager();
                for (int i = 0; i < count; i++)
                {
                    var file = Request.Files[i];
                    if (file.ContentLength > 0)
                    {



                        string path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string temp = path;
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, path);




                        new TaskFileBL().AddTaskFile(
                            new TaskFile()
                            {
                                Name = file.FileName,
                                Path = temp,
                                IsActive = 1,
                                TaskId = taskId
                            });
                    }
                }

                return RedirectToAction("displayUpdateAction", "Task", new { sid =General_Purpose.EncryptId((taskId)), deptId = deptId, way =way});
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult addGroupComment(string comment, int taskId, int gtd, string isModal = "", int repcomntid = -1, int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }
                Log.Info("Add Group Task Comment Function");

                Log.Info("Child Comment ID : " + repcomntid);

                int userId = logedinuser.Id;
                int role = logedinuser.Role;
                List<User> emails = new List<User>();
                List<string> content = new List<string>();
                GroupTaskComment tc = new GroupTaskComment();
                if (repcomntid != -1)
                {


                    tc = new GroupTaskComment() { GroupTaskUserId = taskId, Comment = comment, Date = DateTime.Now.ToString(), ParentId = (int)repcomntid };
                    Log.Info("Parent Comment ID after set into the ParentID  " + tc.ParentId);
                }
                else
                {
                    tc = new GroupTaskComment() { GroupTaskUserId = taskId, Comment = comment, Date = DateTime.Now.ToString() };
                }


                tc.IsActive = 1;
                tc.GroupTaskUserId = taskId;


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;
                }
                else
                {
                    int count = Request.Files.Count;
                    string path = null;
                    tc.File = null;
                    if (Request.Files.Count > 0)
                    {
                        var file = Request.Files[0];
                        if (file.ContentLength > 0)
                        {
                            int id = logedinuser.Id;
                            BlobManager BlobManagerObj = new BlobManager();
                            tc.FileName = file.FileName;
                            path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                            string FileAbsoluteUri = BlobManagerObj.UploadFile(file, path);

                            tc.File = path;

                            //Wajeeh's Code for saving this file in document manager
                            if (customLocPath != "")
                            {
                                tc.IsDocMFile = 1;

                                Models.File addfile = new Models.File()
                                {
                                    Name = file.FileName,
                                    FilePath = path,
                                    IsActive = 1,
                                    CreatedAt = DateTime.Now,
                                    UploadingDate = DateTime.Now,
                                    UploadedBy = logedinuser.Id,
                                    LastModified = DateTime.Now
                                };
                                if (FolderId != -1)
                                {
                                    Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                    addfile.Privacy = folder.FolderPath.ToString();
                                    addfile.FolderId = folder.Id;
                                }
                                else
                                {
                                    addfile.Privacy = FolderId.ToString();
                                }

                                Models.File mainFileAdd = new Models.File();

                                mainFileAdd = new FileBL().AddFile(addfile);

                                if (mainFileAdd == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    FileVersion version = new FileVersion()
                                    {
                                        Name = mainFileAdd.Name,
                                        FilePath = mainFileAdd.FilePath,
                                        IsActive = mainFileAdd.IsActive,
                                        CreatedAt = mainFileAdd.CreatedAt,
                                        UploadingDate = mainFileAdd.UploadingDate,
                                        UploadedBy = mainFileAdd.UploadedBy,
                                        LastModified = mainFileAdd.LastModified,
                                        FileId = mainFileAdd.Id,
                                        FolderId = mainFileAdd.FolderId,
                                        Privacy = mainFileAdd.Privacy,
                                        ArchiveDate = mainFileAdd.ArchiveDate,
                                        CheckIn = mainFileAdd.CheckIn,
                                        CheckOut = mainFileAdd.CheckOut,
                                        CheckOutBy = mainFileAdd.CheckOutBy,
                                        CurrentVersion = 1,
                                        VersionNo = 1,
                                        CheckInTime = mainFileAdd.CheckInTime,
                                        CheckOutTime = mainFileAdd.CheckOutTime
                                    };

                                    if (version.Privacy == null)
                                    {
                                        version.Privacy = "0";
                                    }

                                    if (new FileVersionBL().AddFileVersion(version) == null)
                                    {
                                        throw new Exception();
                                    }
                                    else
                                    {
                                        DateTime date = DateTime.Now;

                                        //File Log entry
                                        FileLog filesLog = new FileLog()
                                        {
                                            UserId = logedinuser.Id,
                                            FileId = mainFileAdd.Id,
                                            LogTime = date,
                                            NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                            Role = logedinuser.Role,
                                            IsActive = 1,
                                            CreatedAt = date,
                                            Type = "New File Uploaded"
                                        };

                                        if (new FileLogBL().AddFileLog(filesLog) == null)
                                        {
                                            throw new Exception();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                if (role == 1)
                {
                    GroupTaskComment gtmc = new GroupTaskComment()
                    {
                        IsActive = 1,
                        Comment = tc.Comment,
                        File = tc.File,
                        UserId = userId,
                        Date = DateTime.Now.ToString(),
                        GroupTaskDetailsId = gtd,
                        ParentId = tc.ParentId,

                        FileName = tc.FileName
                    };
                    Log.Info("Reply Comment Parent ID before update into DB: " + gtmc.ParentId);
                    GroupTasks_Details gtd6 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gtmc.GroupTaskDetailsId);
                    GroupTask gt6 = new GroupTaskBL().getGroupTasksById((int)gtd6.GroupTaskId);
                    User us6 = new UserBL().getUsersById((int)gt6.UserId);
                    gtmc.IsDocMFile = tc.IsDocMFile;
                    gtmc.CompanyId = Convert.ToInt32(logedinuser.Company);
                    gtmc.GTaskStartDate = gtd6.StartDate;
                    gtmc.GTaskEndDate = gtd6.EndDate;
                    //  gtmc.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                    gtmc.DivisionId = (int)us6.DivisionId;
                    gtmc.CreatedBy = logedinuser.Id;
                    new GroupTaskCommentBL().AddGroupTaskComments(gtmc);
                }
                else
                {
                    GroupTaskComment gtmc = new GroupTaskComment()
                    {
                        IsActive = 1,
                        Comment = tc.Comment,
                        File = tc.File,
                        GroupTaskUserId = taskId,
                        Date = DateTime.Now.ToString(),
                        ParentId = tc.ParentId,
                       
                        FileName = tc.FileName
                    };
                    Log.Info("Reply Comment Parent ID before update into DB: " + gtmc.ParentId);
                    GroupTask_User gtu6 = new GroupTask_UserBL().getGroupTask_UsersById((int)gtmc.GroupTaskUserId);
                    GroupTasks_Details gtd6 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gtu6.GroupTaskDetailsId);
                    GroupTask gt6 = new GroupTaskBL().getGroupTasksById((int)gtd6.GroupTaskId);
                    User us6 = new UserBL().getUsersById((int)gt6.UserId);
                    gtmc.CompanyId = Convert.ToInt32(logedinuser.Company);
                    gtmc.GTaskStartDate = gtd6.StartDate;
                    gtmc.GTaskEndDate = gtd6.EndDate;
                    //  gtmc.DepartmentId = (int)gtd6.GroupTask.User.DivisionId;
                    gtmc.DivisionId = (int)us6.DivisionId;
                    gtmc.CreatedBy = logedinuser.Id;
                    new GroupTaskCommentBL().AddGroupTaskComments(gtmc);
                }


                GroupTasks_Details gtbl = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(gtd);

                foreach (var item in gtbl.GroupTask_User.Where(x=>x.IsActive==1))
                {
                    if (item.User != null)
                    {
                        emails.Add(item.User);
                        content.Add(Messages.groupTaskComment(gtbl, item.User));
                        data.GroupTaskDetailsId = gtbl.Id.ToString();
                        General_Purpose.SendPushNotification(item.User.Player_Id, Messages.groupTaskComment(gtbl, item.User, 1), "Message from Zuptu", data, item.User.Id.ToString());


                    }
                }


                Communication.sendMessage(content, emails, Messages.groupTaskSlackMessage(gtbl.GroupTask.Name), gtbl.SlackChannel);
                if (isModal == "")
                {
                    return RedirectToAction("GroupTaskDetails", "Task", new { v = gtd, message = "Comment has been added.", isModal });

                }
                return RedirectToAction("GroupTaskDetails", "Task", new { v =General_Purpose.EncryptId((gtd)), message = "Comment has been added.", isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult updateGroupComment(string comment, int commentId, int taskId, int isManag, int removeFile, string isModal = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();

                GroupTaskComment tc = new GroupTaskComment() { GroupTaskUserId = taskId, Comment = comment };

                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    tc.FileName = docfile.Name;
                    tc.File = docfile.FilePath;
                }
                else
                {
                    int count = Request.Files.Count;
                    string path = null;
                    tc.File = null;
                    if (Request.Files.Count > 0)
                    {
                        var file = Request.Files[0];
                        if (file.ContentLength > 0)
                        {
                            int id = logedinuser.Id;
                            BlobManager BlobManagerObj = new BlobManager();
                            tc.FileName = file.FileName;
                            path = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                            string FileAbsoluteUri = BlobManagerObj.UploadFile(file, path);

                            tc.File = path;
                        }
                    }
                }
                GroupTaskCommentBL gtbl = new GroupTaskCommentBL();
                GroupTaskComment gtc = gtbl.getGroupTaskCommentsById(commentId, de);
                gtc.Comment = comment;
                if (tc.File != null)
                {
                    //Deleting previous file from document manager - Wajeeh
                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtc.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtc.IsDocMFile = null;
                    }
                    //ends

                    gtc.File = tc.File;
                    gtc.FileName = tc.FileName;

                    //Wajeeh's Code for saving this file in document manager
                    if (customLocPath != "")
                    {
                        gtc.IsDocMFile = 1;

                        Models.File addfile = new Models.File()
                        {
                            Name = tc.FileName,
                            FilePath = tc.File,
                            IsActive = 1,
                            CreatedAt = DateTime.Now,
                            UploadingDate = DateTime.Now,
                            UploadedBy = logedinuser.Id,
                            LastModified = DateTime.Now
                        };
                        if (FolderId != -1)
                        {
                            Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                            addfile.Privacy = folder.FolderPath.ToString();
                            addfile.FolderId = folder.Id;
                        }
                        else
                        {
                            addfile.Privacy = FolderId.ToString();
                        }

                        Models.File mainFileAdd = new Models.File();

                        mainFileAdd = new FileBL().AddFile(addfile);

                        if (mainFileAdd == null)
                        {
                            throw new Exception();
                        }
                        else
                        {
                            FileVersion version = new FileVersion()
                            {
                                Name = mainFileAdd.Name,
                                FilePath = mainFileAdd.FilePath,
                                IsActive = mainFileAdd.IsActive,
                                CreatedAt = mainFileAdd.CreatedAt,
                                UploadingDate = mainFileAdd.UploadingDate,
                                UploadedBy = mainFileAdd.UploadedBy,
                                LastModified = mainFileAdd.LastModified,
                                FileId = mainFileAdd.Id,
                                FolderId = mainFileAdd.FolderId,
                                Privacy = mainFileAdd.Privacy,
                                ArchiveDate = mainFileAdd.ArchiveDate,
                                CheckIn = mainFileAdd.CheckIn,
                                CheckOut = mainFileAdd.CheckOut,
                                CheckOutBy = mainFileAdd.CheckOutBy,
                                CurrentVersion = 1,
                                VersionNo = 1,
                                CheckInTime = mainFileAdd.CheckInTime,
                                CheckOutTime = mainFileAdd.CheckOutTime
                            };

                            if (version.Privacy == null)
                            {
                                version.Privacy = "0";
                            }

                            if (new FileVersionBL().AddFileVersion(version) == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = mainFileAdd.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "New File Uploaded"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                        }
                    }
                }
                else if (removeFile == 1)
                {
                    //Wajeeh's Code for deleting file in document manager

                    Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtc.File).FirstOrDefault();
                    if (file != null)
                    {
                        file.IsActive = 0;
                        if (new FileBL().UpdateFile(file) != null)
                        {
                            List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                .Where(x => x.FileId == file.Id).ToList();

                            if (versions.Count() > 0)
                            {
                                foreach (FileVersion o in versions)
                                {
                                    o.IsActive = 0;
                                    if (new FileVersionBL().UpdateFileVersion(o) == null)
                                    {
                                        throw new Exception();
                                    }

                                }
                            }
                            DateTime date = DateTime.Now;

                            //File Log entry
                            FileLog filesLog = new FileLog()
                            {
                                UserId = logedinuser.Id,
                                FileId = file.Id,
                                LogTime = date,
                                NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                Role = logedinuser.Role,
                                IsActive = 1,
                                CreatedAt = date,
                                Type = "File Deleted"
                            };

                            if (new FileLogBL().AddFileLog(filesLog) == null)
                            {
                                throw new Exception();
                            }
                        }
                        else
                        {
                            throw new Exception();
                        }

                        gtc.IsDocMFile = null;
                    }

                    //ends

                    gtc.File = null;
                    gtc.FileName = null;
                }
                gtbl.UpdateGroupTaskComments(gtc, de);

                // additional code to remove bug
                if (isModal == "")
                {
                    return RedirectToAction("grouptaskDetails", "Task", new { v = taskId, message = "Comment has been Updated.", isModal = isModal });

                }


                return RedirectToAction("grouptaskDetails", "Task", new { v =General_Purpose.EncryptId((taskId)), message = "Comment has been Updated.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteGroupComment(int commentId, int taskId, int isManag, string isModal = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                //deleteing comment file from document manager - Wajeeh

                List<GroupTaskComment> comments = new List<GroupTaskComment>();

                GroupTaskComment tm = new GroupTaskCommentBL().getGroupTaskCommentsById(commentId);

                if (tm.File != null)
                {
                    comments.Add(tm);
                }

                List<GroupTaskComment> cms = new GroupTaskCommentBL()
                    .getAllGroupTaskCommentsList()
                    .Where(x => x.ParentId == tm.Id)
                    .ToList();

                if (cms.Count() > 0)
                {
                    foreach (GroupTaskComment taskComment in cms)
                    {
                        if (taskComment.File != null)
                        {
                            comments.Add(taskComment);
                        }
                    }
                }

                if (comments.Count() > 0)
                {
                    foreach (GroupTaskComment t in comments)
                    {
                        Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == t.File).FirstOrDefault();
                        if (file != null)
                        {
                            file.IsActive = 0;
                            if (new FileBL().UpdateFile(file) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            t.IsDocMFile = null;
                        }
                    }
                }

                //ends

                new GroupTaskCommentBL().DeleteGroupTaskComments(commentId);
                return RedirectToAction("grouptaskDetails", "Task", new { v =General_Purpose.EncryptId((taskId)), message = "Comment has been deleted.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult downloadGroupFile(int v)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                string fileneame;
                byte[] fileBytes;

                GroupTaskComment gtmc = new GroupTaskCommentBL().getGroupTaskCommentsById(v);
                fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + gtmc.File);
                fileneame = gtmc.File;
                return File(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + gtmc.File, MediaTypeNames.Text.Plain, gtmc.File);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion CommentSection


        #region tasktags

        public ActionResult addTaskTag(TaskTag taskTag)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                if (taskTag.TagId < 1)
                {
                    return RedirectToAction("taskDisplay", new { v = StringCipher.Base64Encode(taskTag.TaskId.ToString()), msg = "Please select a tag" });
                }
                else
                {
                    taskTag.IsActive = 1;
                    new TaskTagBL().AddTaskTags(taskTag);
                    return RedirectToAction("taskDisplay", new { v = StringCipher.Base64Encode(taskTag.TaskId.ToString()) });
                }

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        [HttpPost]
        public ActionResult deleteTaskTag(int id)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                TaskTag taskTag = new TaskTagBL().getTaskTagsById(id);
                new TaskTagBL().DeleteTaskTags(id);
                return RedirectToAction("taskDisplay", new { v = StringCipher.Base64Encode(taskTag.TaskId.ToString()) });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult downloadTaskFile(string v)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("Login", "Auth");
                }

                byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + v);

                return File(Server.MapPath("~") + ProjectVaraiables.IMAGEPATH + v, MediaTypeNames.Text.Plain, v);
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        #endregion tasktags


        #region Task Repeatation

        [HttpGet]
        public ActionResult checkTasks()
        {
            try
            {
                Log.Info("Server Function Started");
                Console.WriteLine("Server Function Started");
                User_TaskBL trainee_TaskBL = new User_TaskBL();

                DatabaseEntities de = new DatabaseEntities();

                DateTime currentDate = DateTime.Now.AddDays(-1);


                string time = DateTime.Now.ToString("hh:mm tt");
                if (time == "12:00 AM")
                {
                    Log.Info("Server function runing at 12:00 AM");
                    List<User_Task> usx = new User_TaskBL().getUser_TasksListWithoutAdmin().Where(x => x.IsActive == 1 && (x.DailyReminder != null || x.BeforeDDateReminder != null)).ToList();
                    DateTime TodayDate = DateTime.Now.Date;
                    Log.Info("User Task Iteration started");
                    foreach (User_Task task1 in usx)
                    {
                        DateTime enddate = Convert.ToDateTime(task1.EndDate);
                        DateTime startdate = Convert.ToDateTime(task1.StartDate);
                        if (task1.DailyReminder != null)
                        {
                            if (task1.DailyReminder == 1)
                            {
                                if (enddate.Date > TodayDate.Date)
                                {
                                    TimeSpan Rd = enddate - TodayDate;
                                    string content = "Dear " + task1.User1.FirstName + " " + task1.User1.LastName + ",\n Your assigned task " + task1.Task.Name + " have " + Rd.Days + " remaining days. Its Due Date is " +
                   task1.EndDate.Value.ToString("MM/dd/yyyy") + "\n\n Thanks\n Team Zuptu";
                                    string title = "Zuptu Daily Task Reminder";
                                    MainMailClass mail = new MainMailClass();
                                    mail.Remindermail(task1.User1.Email, content, title);
                                }
                            }
                            else if (task1.DailyReminder == 2)
                            {
                                if (enddate.Date > TodayDate.Date)
                                {
                                    TimeSpan days = enddate.Date - TodayDate;
                                    int Remainingdays = Math.Abs(days.Days);
                                    if (Remainingdays > 7)
                                    {
                                        int x = Remainingdays / 7;
                                        for (int i = 1; i <= x; i++)
                                        {
                                            DateTime cdate = startdate.AddDays(7 * i);
                                            if (cdate.Date == TodayDate.Date)
                                            {
                                                TimeSpan Rd = enddate - TodayDate;
                                                string content = "Dear " + task1.User1.FirstName + " " + task1.User1.LastName + ",\n Your assigned task " + task1.Task.Name + " have " + Rd.Days + " remaining days. Its Due Date is " +
                               task1.EndDate.Value.ToString("MM/dd/yyyy") + "\n\n Thanks\n Team Zuptu";
                                                string title = "Weekly Task Reminder";
                                                MainMailClass mail = new MainMailClass();
                                                mail.Remindermail(task1.User1.Email, content, title);
                                            }
                                        }
                                    }
                                }
                            }
                            else if (task1.DailyReminder == 3)
                            {
                                if (enddate.Date > TodayDate.Date)
                                {
                                    TimeSpan days = enddate.Date - TodayDate;
                                    int Remainingdays = Math.Abs(days.Days);
                                    if (Remainingdays > 30)
                                    {
                                        int x = Remainingdays / 30;
                                        for (int i = 1; i < x; i++)
                                        {
                                            DateTime cdate = startdate.AddDays(30 * i);
                                            if (cdate.Date == TodayDate.Date)
                                            {
                                                TimeSpan Rd = enddate - TodayDate;
                                                string content = "Dear " + task1.User1.FirstName + " " + task1.User1.LastName + ",\n Your assigned task " + task1.Task.Name + " have " + Rd.Days + " remaining days. Its Due Date is " +
                               task1.EndDate.Value.ToString("MM/dd/yyyy") + "\n\n Thanks\n Team Zuptu";
                                                string title = "Monthly Task Reminder";
                                                MainMailClass mail = new MainMailClass();
                                                mail.Remindermail(task1.User1.Email, content, title);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (task1.BeforeDDateReminder != null)
                        {
                            DateTime d = Convert.ToDateTime(task1.BeforeDDateReminder);
                            if (d.Date == TodayDate.Date)
                            {
                                TimeSpan Rd = enddate - TodayDate;
                                string content = "Dear " + task1.User1.FirstName + " " + task1.User1.LastName + ",\n Your assigned task " + task1.Task.Name + " have " + Rd.Days + " remaining days. Its Due Date is " +
               task1.EndDate.Value.ToString("MM/dd/yyyy") + "\n\n Thanks\n Team Zuptu";
                                string title = "Task Reminder";
                                MainMailClass mail = new MainMailClass();
                                mail.Remindermail(task1.User1.Email, content);
                            }
                        }
                    }

                }
                DatabaseEntities db = new DatabaseEntities();
                Log.Info("Geting Group Task Reminder List in server function");
                Console.WriteLine("Geting Group Task Reminder List in server function");
                List<GroupTaskReminder> list = new GroupTaskReminderBAL().getGroupTaskRemindersListwithoutCompany(db).Where(x => x.IsSent == 0 && Convert.ToDateTime(x.ReminderTime).Date == DateTime.Now.Date).ToList();
                DateTime dot = DateTime.Now;
                double dtimnow = dot.Ticks; //Date Time Now Ticks
                double nextticks = dot.AddMinutes(5).Ticks; //Ticks After 5 minutes
                list = list.Where(x => Convert.ToDateTime(x.ReminderTime).Ticks == dtimnow || (Convert.ToDateTime(x.ReminderTime).Ticks > dtimnow && Convert.ToDateTime(x.ReminderTime).Ticks < nextticks)).ToList();
                foreach (GroupTaskReminder item in list)
                {

                    GroupTasks_Details gt = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)item.GroupTasks_DetailsID);
                    TimeSpan Rd2 = Convert.ToDateTime(gt.EndDate) - dot;
                    GroupTask grpt = new GroupTaskBL().getGroupTasksById((int)gt.GroupTaskId);
                    string content = "Dear " + item.User.FirstName + " " + item.User.LastName + ",\n Your assigned Group Task '" + grpt.Name + "' have " + Rd2.Days + " remaining days. Its Due Date is " +
              gt.EndDate.Value.ToString("MM/dd/yyyy") + "\n\n Thanks\n Team Zuptu";
                    string title = "Group Task Reminder";
                    MainMailClass mail = new MainMailClass();
                    mail.Remindermail(item.User.Email, content, title);
                    item.IsSent = 1;
                    Log.Info("Group Task reminder mail sent");
                    new GroupTaskReminderBAL().UpdateGroupTaskReminderwithoutCompany(item, db);
                }

                return Content("Success.");
            }
            catch (Exception ex)
            {
                Log.Warn("Error Occured in a Server function");
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), "Error in live server function");
                // return RedirectToAction("Error");
                return Content("Exception Occured.");
            }
        }
        #endregion Task Repeatation


        #region random

        public ActionResult taskLoader(string z, int individual, int manager)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (individual == 1)
                {
                    if (manager == 1)
                        return RedirectToAction("taskDetails", "Manager", new { v = z });
                    else if (manager == 2)
                        return RedirectToAction("taskDetails", "Admin", new { v = z });
                    else
                    {
                        return RedirectToAction("taskDetails", new { v = z });
                    }
                }
                else
                    return RedirectToAction("grouptaskdetails", new { v = z });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult taskLoaderCalendar(int z, int individual, int manager)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                if (individual == 1)
                {
                    if (manager == 1)
                        return RedirectToAction("taskDetails", "Manager", new { v =General_Purpose.EncryptId((z)) });
                    else if (manager == 2)
                        return RedirectToAction("taskDetails", "Admin", new { v =General_Purpose.EncryptId((z)) });
                    else
                    {
                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((z)) });

                    }
                }
                else
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((z)) });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion random


        #region requestSection

        public ActionResult requestUpdate(ExtensionRequest er, string createdBy, string IsModal = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                if (er.RequestedDays < 0)
                {
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((er.GroupTaskDetails_Id.Value)), message = "Request days can not be negative.", IsModal = IsModal });

                }
                int id = logedinuser.Id;
                int cr = id;
                if (createdBy != "-1")
                    cr = General_Purpose.DecryptId((createdBy));

                if (er.GroupTaskDetails_Id != null)
                {
                    int role = logedinuser.Role;

                    if (id == cr || logedinuser.Role == 1)
                    {
                        DatabaseEntities de = new DatabaseEntities();
                        GroupTasks_DetailsBL gtbl = new GroupTasks_DetailsBL();

                        GroupTasks_Details gtd = gtbl.getGroupTasks_DetailssByIdWrapepr(Convert.ToInt32(er.GroupTaskDetails_Id), de);

                        gtd.EndDate = gtd.EndDate.Value.AddDays(Convert.ToDouble(er.RequestedDays));
                        gtbl.UpdateGroupTasks_DetailsWrapper(gtd, de);
                        de.SaveChanges();
                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((er.GroupTaskDetails_Id.Value)), message = "Deadline has been updated successfully", IsModal = IsModal });

                        //return RedirectToAction("groupRequestResponse", new { rd =General_Purpose.EncryptId((erId)), gd =General_Purpose.EncryptId((er.GroupTaskDetails_Id.Value)), responseid = 1, IsModal = IsModal });
                    }
                }

                er.Displayed = 0;
                er.Status = 0;
                er.isActive = 1;
                string message = "Your request has been sent.";
                er.CreatedAt = DateTime.Now;
                int erId = new ExtensionRequestBL().AddExtensionRequests(er);

                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((er.GroupTaskDetails_Id.Value)), displayMessage = message, IsModal = IsModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult groupRequestResponse(string rd, string gd, int responseid, string isModal = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                int groupId = General_Purpose.DecryptId((gd));
                int requestId = General_Purpose.DecryptId((rd));

                DatabaseEntities de = new DatabaseEntities();
                ExtensionRequestBL erbl = new ExtensionRequestBL();
                GroupTasks_DetailsBL gtbl = new GroupTasks_DetailsBL();
                ExtensionRequest er = erbl.getExtensionRequestsById(requestId, de);
                GroupTasks_Details gtd = gtbl.getGroupTasks_DetailssByIdWrapepr(groupId, de);
                string message = string.Empty;
                if (er != null)
                {
                    if (responseid == 1)
                    {
                        er.Status = 1;
                        er.Displayed = 0;
                        gtd.EndDate = gtd.EndDate.Value.AddDays(Convert.ToDouble(er.RequestedDays));
                        gtbl.UpdateGroupTasks_DetailsWrapper(gtd, de);

                    }
                    else if (responseid == 2)
                    {
                        er.Status = 2;
                    }
                   // er.CreatedAt = DateTime.Now;
                    erbl.UpdateExtensionRequests(er, de);
                    message = "Your request has been updated.";
                }

                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((groupId)), displayMessage = message, isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult requestUpdateTraineTask(ExtensionRequest er, string createdBy, string way = "", string isModal = "", string department = "", string sid = "", string DivDepID = "")
        {
            try
            {

                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                int UserTask = General_Purpose.DecryptId((createdBy));
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                User_TaskBL tmbl = new User_TaskBL();
                User_Task tt = tmbl.getUser_TasksByIdWrapper(UserTask, de);
                string message = string.Empty;
                if (tt.CreatedID == null || logedinuser.Role == 1)
                {



                    if (er.RequestedDays < 0)
                    {
                        message = "Added days cannot be negative.";
                    }
                    else
                    {
                        tt.EndDate = tt.EndDate.Value.AddDays(er.RequestedDays.Value);

                        message = "You have updated the request.";
                        tmbl.UpdateUser_Tasks(tt, de);
                    }
                }
                else
                {
                    if (tt.CreatedID == logedinuser.Id || logedinuser.Role == 1)
                    {
                        if (er.RequestedDays < 0)
                        {
                            message = "Added days cannot be negative.";
                        }
                        else
                        {
                            tt.EndDate = tt.EndDate.Value.AddDays(er.RequestedDays.Value);

                            message = "You have updated the request.";
                            tmbl.UpdateUser_Tasks(tt, de);
                            de.SaveChanges();
                            return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((UserTask)), displayMessage = message, message = message, way, department, sid, isModal = isModal, DivDepID = DivDepID });

                        }
                    }
                    er.Displayed = 0;
                    er.Status = 0;
                    er.isActive = 1;
                    er.CreatedAt = DateTime.Now;
                    int erId = new ExtensionRequestBL().AddExtensionRequests(er);
                    message = "Your request has been sent.";

                    //"broadcastNotification" client function used in all layouts to update notifications
                    // var context = GlobalHost.ConnectionManager.GetHubContext<NotificationHub>();
                    //context.Clients.All.broadcastExtensionNotification("1", Convert.ToInt32(logedinuser.Company));
                    General_Purpose.SendExtensionRequestNotification(); // Temporary Commented

                    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((UserTask)), displayMessage = message, message = message, way, department, sid, isModal = isModal, DivDepID = DivDepID });
                }
                de.SaveChanges();
                de.Configuration.ProxyCreationEnabled = false;
                de.Configuration.LazyLoadingEnabled = true;

                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((UserTask)), displayMessage = message, message = message, way, department, sid, isModal = isModal, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult traineeTaskResponse(string rd, string gd, int responseid, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                int taskID = General_Purpose.DecryptId((gd));
                int requestId = General_Purpose.DecryptId((rd));
                DatabaseEntities de = new DatabaseEntities();
                ExtensionRequestBL erbl = new ExtensionRequestBL();
                User_TaskBL ttbl = new User_TaskBL();
                ExtensionRequest er = erbl.getExtensionRequestsById(requestId, de);
                User_Task trainee_Task = ttbl.getUser_TasksByIdWrapper(taskID, de);
                string message = string.Empty;
                if (er != null)
                {
                    if (responseid == 1)
                    {
                        er.Status = 1;
                        er.Displayed = 0;
                        trainee_Task.EndDate = trainee_Task.EndDate.Value.AddDays(Convert.ToDouble(er.RequestedDays));
                        ttbl.UpdateUser_Tasks(trainee_Task, de);

                    }
                    else if (responseid == 2)
                    {
                        er.Status = 2;
                    }
                    erbl.UpdateExtensionRequests(er, de);
                    message = "Your request has been updated.";
                }

                //"broadcastNotification" client function used in all layouts to update notifications
                // var context = GlobalHost.ConnectionManager.GetHubContext<NotificationHub>();
                //context.Clients.All.broadcastExtensionNotification("1", Convert.ToInt32(logedinuser.Company));
                General_Purpose.SendExtensionRequestNotification(); // Temporary Commented

                //"broadcastNotification" client function used in all layouts to update notifications

                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((trainee_Task.Id)), displayMessage = message, isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult Assignmentinvoice()
        {
            try
            {
                return View();
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }

        #endregion requestSection


        #region GroupTaskTicket
        public ActionResult completeGroupTaskTicket(int ticketId, string isModal = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                GroupTask_Ticket gtt = de.GroupTask_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;

                gtt.CompletedByUser = id;

                gtt.CompletionDatetime = DateTime.Now;
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Your todo has been completed.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult addtoDO(GroupTask_Ticket gtt, string Starttime = "", string Endtime = "", string isModal = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                gtt.CreationDatetime = DateTime.Now;
                gtt.IsActive = 1;
                gtt.CreatedBy = logedinuser.Id;


                GroupTasks_Details usertask = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(Convert.ToInt32(gtt.GroupTaskDetails_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;

                if (gtt.Name == null)
                {
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Todo name not be null.", isModal = isModal });

                }



                if (gtt.StartDate != null && gtt.EndDate != null)
                {




                    DateTime sd = Convert.ToDateTime(gtt.StartDate);
                    DateTime ed = Convert.ToDateTime(gtt.EndDate);

                    string StartDate = "";
                    string EndDate = "";
                    if (Starttime != "")
                        StartDate = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDate = sd.Date.ToString();

                    if (Endtime != "")
                        EndDate = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDate = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDate = StartDate + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDate = EndDate + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDate);
                    gtt.EndDate = Convert.ToDateTime(EndDate);

                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date must be equal or greater than Task's start date.", isModal = isModal });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "End date must be equal or less than Task's end date.", isModal = isModal });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {
                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Time period must be valid.", isModal = isModal });

                        }


                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date must be lees than end date.", isModal = isModal });

                    }


                }
                else
                {
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date and end date not be null.", isModal = isModal });

                }

                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;
                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }
                int countm = new GroupTask_TicketBL().getAllGroupTask_TicketsList().Where(c => c.GroupTaskDetails_Id == gtt.GroupTaskDetails_Id && c.IsActive == 1).Max(x => x.Position).GetValueOrDefault();
                gtt.Position = countm + 1;

                //Additional
                GroupTasks_Details gtd5 = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gtt.GroupTaskDetails_Id);
                GroupTask gt5 = new GroupTaskBL().getGroupTasksById((int)gtd5.GroupTaskId);
                User us5 = new UserBL().getUsersById((int)gt5.UserId);
                gtt.CompanyId = Convert.ToInt32(logedinuser.Company);
                gtt.GTaskStartDate = gtd5.StartDate;
                gtt.GTaskEndDate = gtd5.EndDate;
                //  gtt.DepartmentId = (int)gtd5.GroupTask.User.DivisionId;
                gtt.DivisionId = (int)us5.DivisionId;

                new GroupTask_TicketBL().AddGroupTask_Tickets(gtt);
                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Todo has been added.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult editToDO(int ticket_Id, string name = "", string StartDate = "", string Starttime = "", string EndDate = "", string Endtime = "", string isModal = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                GroupTask_Ticket gtt = de.GroupTask_Ticket.FirstOrDefault(x => x.Id == ticket_Id);

                GroupTasks_Details usertask = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(Convert.ToInt32(gtt.GroupTaskDetails_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;

                int id = logedinuser.Id;
                int role = logedinuser.Role;
                gtt.Name = name + " qqqqaaaa ";


                if (name == "")
                {
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Todo name not be null.", isModal = isModal });

                }

                if (StartDate != "" && EndDate != "")
                {
                    DateTime sd = Convert.ToDateTime(StartDate);
                    DateTime ed = Convert.ToDateTime(EndDate);





                    string StartDat = "";
                    string EndDat = "";
                    if (Starttime != "")
                        StartDat = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDat = sd.Date.ToString();

                    if (Endtime != "")
                        EndDat = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDat = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDat = StartDat + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDat = EndDat + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDat);
                    gtt.EndDate = Convert.ToDateTime(EndDat);

                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date must be equal or greater than Task's start date.", isModal = isModal });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "End date must be equal or less than Task's end date.", isModal = isModal });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {

                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Time period must be valid.", isModal = isModal });

                        }



                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date must be lees than end date.", isModal = isModal });

                    }



                }
                else
                {
                    return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Start date and end date not be null.", isModal = isModal });

                }

                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;
                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        //Deleting previous file from document manager - Wajeeh
                        Models.File file1 = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                        if (file1 != null)
                        {
                            file1.IsActive = 0;
                            if (new FileBL().UpdateFile(file1) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file1.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file1.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file1.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            gtt.IsDocMFile = null;
                        }
                        //ends

                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }

                    }
                }
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "Your todo has been edited.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteToDO(int ticket_Id, string isModal = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                GroupTask_Ticket gtt = de.GroupTask_Ticket.FirstOrDefault(x => x.Id == ticket_Id);
                int id = logedinuser.Id;
                int role = logedinuser.Role;

                //Deleting previous file from document manager - Wajeeh
                Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                if (file != null)
                {
                    file.IsActive = 0;
                    if (new FileBL().UpdateFile(file) != null)
                    {
                        List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                            .Where(x => x.FileId == file.Id).ToList();

                        if (versions.Count() > 0)
                        {
                            foreach (FileVersion o in versions)
                            {
                                o.IsActive = 0;
                                if (new FileVersionBL().UpdateFileVersion(o) == null)
                                {
                                    throw new Exception();
                                }

                            }
                        }
                        DateTime date = DateTime.Now;

                        //File Log entry
                        FileLog filesLog = new FileLog()
                        {
                            UserId = logedinuser.Id,
                            FileId = file.Id,
                            LogTime = date,
                            NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                            Role = logedinuser.Role,
                            IsActive = 1,
                            CreatedAt = date,
                            Type = "File Deleted"
                        };

                        if (new FileLogBL().AddFileLog(filesLog) == null)
                        {
                            throw new Exception();
                        }
                    }
                    else
                    {
                        throw new Exception();
                    }

                    gtt.IsDocMFile = null;
                }
                //ends

                gtt.IsActive = 0;
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("grouptaskdetails", new { v =General_Purpose.EncryptId((gtt.GroupTaskDetails_Id.Value)), displayMessage = "ToDo has been deleted.", isModal = isModal });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion


        #region Analysis redirect Region
        public ActionResult displaygtA(string v)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                return RedirectToAction("GroupTaskAnalysis", "Analysis", new { gid = v });

            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion


        #region Employee Task Tickets
        public ActionResult addEmployeeTasktoDO(Task_Ticket gtt, string Starttime = "", string Endtime = "", string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                User_Task usertask = new User_TaskBL().getUser_TasksById(Convert.ToInt32(gtt.UserTask_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;


                gtt.CreationDatetime = DateTime.Now;
                gtt.IsActive = 1;
                gtt.CreatedBy = logedinuser.Id;
                if (gtt.Name == null)
                {
                    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Todo name not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }



                if (gtt.StartDate != null && gtt.EndDate != null)
                {



                    DateTime sd = Convert.ToDateTime(gtt.StartDate);
                    DateTime ed = Convert.ToDateTime(gtt.EndDate);

                    string StartDate = "";
                    string EndDate = "";
                    if (Starttime != "")
                        StartDate = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDate = sd.Date.ToString();

                    if (Endtime != "")
                        EndDate = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDate = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDate = StartDate + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDate = EndDate + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDate);
                    gtt.EndDate = Convert.ToDateTime(EndDate);


                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be equal or greater than Task's start date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "End date must be equal or less than Task's end date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {

                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Time period must be valid", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                        }



                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be lees than end date.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }


                }
                else
                {
                    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date and end date not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;

                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }
                int c = usertask.Task_Ticket.Max(x => x.Position).GetValueOrDefault();
                gtt.Position = c + 1;

                //Additional attributes
                User_Task ut4 = new User_TaskBL().getUser_TasksById((int)gtt.UserTask_Id);
                gtt.CompanyId = Convert.ToInt32(logedinuser.Company);
                gtt.TaskStartDate = ut4.StartDate;
                gtt.TaskEndDate = ut4.EndDate;
                gtt.DepartmentId = (int)ut4.Task.DepartmentID;
                gtt.DivisionId = (int)ut4.Task.Department.DivisionID;

                new Task_TicketBL().AddTask_Tickets(gtt);
                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Todo has been added successfully.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult editEmployeeTaskTicket(int ticketId, string edit, string name = "", string StartDate = "", string Starttime = "", string EndDate = "", string Endtime = "", string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "", int DocMID = -1, int FolderId = -1, string customLocPath = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);

                User_Task usertask = new User_TaskBL().getUser_TasksById(Convert.ToInt32(gtt.UserTask_Id));
                usertask.StartDate = Convert.ToDateTime(usertask.StartDate).Date;
                usertask.EndDate = Convert.ToDateTime(usertask.EndDate).Date;

                int id = logedinuser.Id;
                int role = logedinuser.Role;

                gtt.Name = name + " qqqqaaaa ";

                if (name == "")
                {
                    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Todo name not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }

                if (StartDate != "" && EndDate != "")
                {
                    DateTime sd = Convert.ToDateTime(StartDate);
                    DateTime ed = Convert.ToDateTime(EndDate);




                    string StartDat = "";
                    string EndDat = "";
                    if (Starttime != "")
                        StartDat = sd.Date.ToString().Split(' ')[0];
                    else
                        StartDat = sd.Date.ToString();

                    if (Endtime != "")
                        EndDat = ed.Date.ToString().Split(' ')[0];
                    else
                        EndDat = ed.Date.ToString();

                    if (Starttime != "")
                    {
                        StartDat = StartDat + " " + Starttime;
                    }
                    if (Endtime != "")
                    {
                        EndDat = EndDat + " " + Endtime;
                    }
                    gtt.StartDate = Convert.ToDateTime(StartDat);
                    gtt.EndDate = Convert.ToDateTime(EndDat);

                    DateTime sd2 = Convert.ToDateTime(gtt.StartDate).Date;
                    DateTime ed2 = Convert.ToDateTime(gtt.EndDate).Date;

                    if (sd2 < usertask.StartDate)
                    {

                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be equal or greater than Task's start date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }
                    else if (ed2 > usertask.EndDate)
                    {

                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "End date must be equal or less than Task's end date", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });


                    }
                    else if (Convert.ToDateTime(sd2).Date == Convert.ToDateTime(ed2).Date)
                    {
                        long sticks = Convert.ToDateTime(gtt.StartDate).Ticks;
                        long eticks = Convert.ToDateTime(gtt.EndDate).Ticks;
                        if (sticks < eticks)
                        {

                        }
                        else
                        {
                            return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Time period must be valid", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                        }




                    }
                    else if (sd2 > ed2)
                    {
                        return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Start date must be lees than end date.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                    }



                }
                else
                {
                    return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Start date and end date not be null.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });

                }


                if (DocMID != -1)
                {
                    File docfile = new FileBL().getFileById(DocMID);

                    gtt.Ticket_FileName = docfile.Name;
                    gtt.Ticket_File = docfile.FilePath;
                    gtt.FileUploadDate = DateTime.Now;
                }
                else
                {
                    int count = Request.Files.Count;

                    var file = Request.Files[0];
                    if (file.ContentLength > 0)
                    {
                        //Deleting previous file from document manager - Wajeeh
                        Models.File file1 = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                        if (file1 != null)
                        {
                            file1.IsActive = 0;
                            if (new FileBL().UpdateFile(file1) != null)
                            {
                                List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                                    .Where(x => x.FileId == file1.Id).ToList();

                                if (versions.Count() > 0)
                                {
                                    foreach (FileVersion o in versions)
                                    {
                                        o.IsActive = 0;
                                        if (new FileVersionBL().UpdateFileVersion(o) == null)
                                        {
                                            throw new Exception();
                                        }

                                    }
                                }
                                DateTime date = DateTime.Now;

                                //File Log entry
                                FileLog filesLog = new FileLog()
                                {
                                    UserId = logedinuser.Id,
                                    FileId = file1.Id,
                                    LogTime = date,
                                    NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file1.Id).Count(),
                                    Role = logedinuser.Role,
                                    IsActive = 1,
                                    CreatedAt = date,
                                    Type = "File Deleted"
                                };

                                if (new FileLogBL().AddFileLog(filesLog) == null)
                                {
                                    throw new Exception();
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            gtt.IsDocMFile = null;
                        }
                        //ends

                        BlobManager BlobManagerObj = new BlobManager(ProjectVaraiables.COMPANY_ALPHABET + Convert.ToInt32(logedinuser.Company));
                        gtt.Ticket_FileName = file.FileName;
                        string fileName = DateTime.Now.Ticks.ToString() + System.IO.Path.GetExtension(file.FileName);
                        string FileAbsoluteUri = BlobManagerObj.UploadFile(file, fileName);

                        gtt.Ticket_File = fileName;
                        gtt.FileUploadDate = DateTime.Now;

                        //Wajeeh's Code for saving this file in document manager
                        if (customLocPath != "")
                        {
                            gtt.IsDocMFile = 1;

                            Models.File addfile = new Models.File()
                            {
                                Name = file.FileName,
                                FilePath = fileName,
                                IsActive = 1,
                                CreatedAt = DateTime.Now,
                                UploadingDate = DateTime.Now,
                                UploadedBy = logedinuser.Id,
                                LastModified = DateTime.Now
                            };
                            if (FolderId != -1)
                            {
                                Folder folder = new FolderBL().getFolderListByLogedinUser().Where(x => x.Id == FolderId).FirstOrDefault();
                                addfile.Privacy = folder.FolderPath.ToString();
                                addfile.FolderId = folder.Id;
                            }
                            else
                            {
                                addfile.Privacy = FolderId.ToString();
                            }

                            Models.File mainFileAdd = new Models.File();

                            mainFileAdd = new FileBL().AddFile(addfile);

                            if (mainFileAdd == null)
                            {
                                throw new Exception();
                            }
                            else
                            {
                                FileVersion version = new FileVersion()
                                {
                                    Name = mainFileAdd.Name,
                                    FilePath = mainFileAdd.FilePath,
                                    IsActive = mainFileAdd.IsActive,
                                    CreatedAt = mainFileAdd.CreatedAt,
                                    UploadingDate = mainFileAdd.UploadingDate,
                                    UploadedBy = mainFileAdd.UploadedBy,
                                    LastModified = mainFileAdd.LastModified,
                                    FileId = mainFileAdd.Id,
                                    FolderId = mainFileAdd.FolderId,
                                    Privacy = mainFileAdd.Privacy,
                                    ArchiveDate = mainFileAdd.ArchiveDate,
                                    CheckIn = mainFileAdd.CheckIn,
                                    CheckOut = mainFileAdd.CheckOut,
                                    CheckOutBy = mainFileAdd.CheckOutBy,
                                    CurrentVersion = 1,
                                    VersionNo = 1,
                                    CheckInTime = mainFileAdd.CheckInTime,
                                    CheckOutTime = mainFileAdd.CheckOutTime
                                };

                                if (version.Privacy == null)
                                {
                                    version.Privacy = "0";
                                }

                                if (new FileVersionBL().AddFileVersion(version) == null)
                                {
                                    throw new Exception();
                                }
                                else
                                {
                                    DateTime date = DateTime.Now;

                                    //File Log entry
                                    FileLog filesLog = new FileLog()
                                    {
                                        UserId = logedinuser.Id,
                                        FileId = mainFileAdd.Id,
                                        LogTime = date,
                                        NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == mainFileAdd.Id).Count(),
                                        Role = logedinuser.Role,
                                        IsActive = 1,
                                        CreatedAt = date,
                                        Type = "New File Uploaded"
                                    };

                                    if (new FileLogBL().AddFileLog(filesLog) == null)
                                    {
                                        throw new Exception();
                                    }
                                }
                            }
                        }
                    }
                }



                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;

                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), edit, msg = "Your todo has been updated.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        public ActionResult deleteEmployeeTaskTicket(int ticketId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;

                //Deleting previous file from document manager - Wajeeh
                Models.File file = new FileBL().getFileListByLogedinUser().Where(x => x.FilePath == gtt.Ticket_File).FirstOrDefault();
                if (file != null)
                {
                    file.IsActive = 0;
                    if (new FileBL().UpdateFile(file) != null)
                    {
                        List<FileVersion> versions = new FileVersionBL().getFileVersionListByLogedinUser()
                            .Where(x => x.FileId == file.Id).ToList();

                        if (versions.Count() > 0)
                        {
                            foreach (FileVersion o in versions)
                            {
                                o.IsActive = 0;
                                if (new FileVersionBL().UpdateFileVersion(o) == null)
                                {
                                    throw new Exception();
                                }

                            }
                        }
                        DateTime date = DateTime.Now;

                        //File Log entry
                        FileLog filesLog = new FileLog()
                        {
                            UserId = logedinuser.Id,
                            FileId = file.Id,
                            LogTime = date,
                            NoOfVersions = new FileVersionBL().getFileVersionListByLogedinUser().Where(y => y.FileId == file.Id).Count(),
                            Role = logedinuser.Role,
                            IsActive = 1,
                            CreatedAt = date,
                            Type = "File Deleted"
                        };

                        if (new FileLogBL().AddFileLog(filesLog) == null)
                        {
                            throw new Exception();
                        }
                    }
                    else
                    {
                        throw new Exception();
                    }

                    gtt.IsDocMFile = null;
                }
                //ends

                gtt.IsActive = 0;

                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), msg = "Your To Do has been deleted.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult completeEmployeeTaskTicket(int ticketId, string isModal = "", string way = "", string sid = "", string department = "", string DivDepID = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                //if(role==(int)Enums.Role.Cordinator || role==(int)Enums.Role.Manager)
                //{
                gtt.CompletedByUser = id;
                //}
                //else if(role==(int)Enums.Role.Trainee)
                //{
                //    gtt.CompletedByTrainee = id;
                //}
                gtt.CompletionDatetime = DateTime.Now;
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("taskDetails", new { v =General_Purpose.EncryptId((gtt.UserTask_Id.Value)), message = "Your To DO has been completed.", isModal = isModal, way = way, sid = sid, department = department, DivDepID = DivDepID });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion


        #region outlook
        public List<value> OutlookValue(JObject obj, List<value> x)
        {
            if (obj.Last != null)
            {
                foreach (var xq in obj.Last)
                {

                    value vas = JsonConvert.DeserializeObject<value>(xq.Last.ToString());

                    x.Add(vas);
                    return x = OutlookValue((JObject)xq, x);

                }

            }
            return x;
        }
        public async System.Threading.Tasks.Task<string> GetAccessToken(string token)
        {
            string accessToken = null;

            // Load the app config from web.config

            string appId = ProjectVaraiables.APPID;
            string appPassword = ProjectVaraiables.AppPassword;
            string redirectUri = ProjectVaraiables.RedirectUri;
            string[] scopes = ProjectVaraiables.AppScopes
            .Replace(' ', ',').Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            // Get the current user's ID
            string userId = "Hello World";


            if (!string.IsNullOrEmpty(userId))
            {
                // Get the user's token cache
                SessionTokenCache tokenCache = new SessionTokenCache(userId, token);

                ConfidentialClientApplication cca = new ConfidentialClientApplication(
                    appId, redirectUri, new ClientCredential(appPassword), tokenCache.GetMsalCacheInstance(), null);

                // Call AcquireTokenSilentAsync, which will return the cached
                // access token if it has not expired. If it has expired, it will
                // handle using the refresh token to get a new one.
                AuthenticationResult result = await cca.AcquireTokenSilentAsync(scopes, cca.GetAccountsAsync().Result.First());
                //var result = await cca.AcquireTokenByAuthorizationCodeAsync(notification.Code, scopes);

                accessToken = result.AccessToken;
            }

            return accessToken;
        }
        public async System.Threading.Tasks.Task<List<TaskCalendarDTO>> Calendar(string tok)
        {


            string token = await GetAccessToken(tok);

            List<value> list = new List<value>();
            using (var cli = new HttpClient())
            {
                var url = "https://graph.microsoft.com/v1.0/me/events";
                cli.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                var response = await cli.GetStringAsync(url);

                //JObject json = new JObject();
                JObject json = JObject.Parse(response);


                //list= OutlookValue(json, list);
                var count = JObject.Parse(json.ToString())["value"].Children().Count();

                for (int i = 0; i < count; i++)
                {
                    var fdate = JObject.Parse(json.ToString())["value"][i];
                    var subject = JObject.Parse(fdate.ToString())["subject"];
                    var start = JObject.Parse(fdate.ToString())["start"]["dateTime"];
                    var end = JObject.Parse(fdate.ToString())["end"]["dateTime"];
                    value obj = new value()
                    {
                        subject = subject.ToString(),
                        start = Convert.ToDateTime(start),
                        end = Convert.ToDateTime(end)
                        
                    };

                    list.Add(obj);
                }

            }





            try
            {
                List<TaskCalendarDTO> tasks = new List<TaskCalendarDTO>(); ;


                foreach (value item in list)
                {
                    TaskCalendarDTO tdo = new TaskCalendarDTO();
                    tdo.title = item.subject;
                    tdo.start = item.start.ToString("yyyy-MM-dd");
                    tdo.end = item.end.ToString("yyyy-MM-dd");
                    tdo.color = "#EBB32D";
                    tdo.IsOutlook = "1";
                    //tdo.url = "a1/b2/c3/";
                    tasks.Add(tdo);
                }
                var response = HttpContext.Response;

                string Zuptu_Id = string.Empty;
                // Zuptu_Id = response.Cookies["Zuptu_Id"].Value;
                response.Cookies.Remove("Zuptu_Id");

                return tasks;
            }
            catch (Microsoft.Graph.ServiceException ex)
            {
            }
            return null;

        }
        #endregion

        #region Active Tickets

        public ActionResult ActiveTickets(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });

                }

                List<Task_Ticket> listtickets = new Task_TicketBL().getTask_TicketsList().Where(x => !string.IsNullOrEmpty(x.User_Task.UserID.ToString()) && x.CreatedBy == logedinuser.Id && x.CompletionDatetime == null && x.User_Task.IsActive == 1).ToList();
                listtickets = listtickets.OrderByDescending(x => x.CreationDatetime).ToList();

                List<Task_Ticket> l = listtickets.Distinct().ToList();
                ViewBag.listtickets = l;
                ViewBag.message = message;
                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult GetActiveTickets(string TaskName = "", string CreationDate = "", string Ticketnotes = "")
        {
            try
            {


                //// List<User_Task> usertasks = new User_TaskBL().getUser_TasksList().Where(x => ((x.UserID == logedinuser.Id || x.CreatedID == logedinuser.Id) && x.CompletionDate==null ) && x.IsActive==1).ToList();


                //  List<TodosDTO> emptodos = new List<TodosDTO>();

                List<Task_Ticket> listtickets = new Task_TicketBL().getTask_TicketsList().Where(x => !string.IsNullOrEmpty(x.User_Task.UserID.ToString()) && x.CreatedBy == logedinuser.Id && x.CompletionDatetime == null && x.User_Task.IsActive == 1).ToList();
                listtickets = listtickets.OrderByDescending(x => x.CreationDatetime).ToList();

                if(TaskName != "")
                {
                    listtickets = listtickets.Where(x => x.User_Task.Task.Name.ToLower().Contains(TaskName.ToLower())).ToList();
                }

                if(CreationDate != "")
                {
                    listtickets = listtickets.Where(x => Convert.ToDateTime(x.CreationDatetime).Date == Convert.ToDateTime(CreationDate).Date).ToList();
                }

                if (Ticketnotes != "")
                {
                    listtickets = listtickets.Where(x => x.Name.ToLower().Contains(Ticketnotes.ToLower())).ToList();
                }

                //foreach (User_Task user in usertasks)
                //{
                //    List<Task_Ticket> onetasktickets = user.Task_Ticket.ToList();

                //    foreach (Task_Ticket t in onetasktickets.Where(x => x.User_Task.IsActive == 1 && x.CompletionDatetime==null && x.IsActive==1))
                //    {

                //        if (logedinuser.Role == 3)
                //        {
                //            t.User_Task.Task.Name = "<a href='../Task/taskdetails?v=" +General_Purpose.EncryptId((t.User_Task.Id)) + "&isModal=5ck'>" + t.User_Task.Task.Name + "</a>";

                //        }
                //        else
                //        {
                //            t.User_Task.Task.Name = "<a href='../Manager/taskdetails?v=" +General_Purpose.EncryptId((t.User_Task.Id)) + "&isModal=5ck'>" + t.User_Task.Task.Name + "</a>";

                //        }
                //        TodosDTO tododto = new TodosDTO()
                //        {
                //            Id = t.Id,
                //            TodoCreatedBy = t.User.FirstName + ' ' + t.User.LastName,
                //            TicketNotes = t.Name,
                //            TaskName = t.User_Task.Task.Name,
                //            CreationDatetime = t.CreationDatetime.Value.ToString(),
                //            CompletionDatetime = t.CompletionDatetime,
                //            File=t.Ticket_File,
                //            FileName=t.Ticket_FileName
                //        };


                //        if (tododto.CompletionDatetime == null)
                //        {

                //            emptodos.Add(tododto);
                //        }
                //    }


                //}



                // ViewBag.alltickets = todos;
                //  ViewBag.emptickets = emptodos;




                int start = Convert.ToInt32(Request["start"]);
                int length = Convert.ToInt32(Request["length"]);
                string searchValue = Request["search[value]"];
                string sortColumnName = Request["columns[" + Request["order[0][column]"] + "][name]"];
                string sortDirection = Request["order[0][dir]"];



                int totalrows = listtickets.Count();
                //filter
                if (!string.IsNullOrEmpty(searchValue))
                {
                    listtickets = listtickets.Where(x => x.User_Task.Task.Name.ToLower().Contains(searchValue.ToLower()) || x.Name.ToLower().Contains(searchValue.ToLower())).ToList();
                }

                int totalrowsafterfilterinig = listtickets.Count();
                //sorting
                //users = users.OrderBy(sortColumnName + " " + sortDirection).ToList();

                // pagination
                listtickets = listtickets.Skip(start).Take(length).ToList();

                //List<User> mnglist = new List<User>();
                List<TodosDTO> mnglist = new List<TodosDTO>();
                int c = 0;
                int edited = 0;
                string str = "";
                string namestr = "";

                foreach (Task_Ticket x in listtickets)
                {
                    if (x.Name.Contains("qqqqaaaa"))
                    {
                        if (x.Ticket_File == null || x.Ticket_File == "")
                        {
                            str = x.Name.Replace("qqqqaaaa", " ");
                            x.Name = "<sup><b>(Edited)</b></sup><br/>" + str;

                        }
                        else
                        {
                            str = x.Name.Replace("qqqqaaaa", " ");
                            x.Name = "<sup><b>(Edited)</b></sup><br/>" + str + "  " + " <a href='../Trainee/download?filepath=" + x.Ticket_File + "&name=" + x.Ticket_FileName + "' title=" + x.Ticket_FileName + "><span class='icon-download'></span></a>";

                        }


                    }
                    else
                    {
                        str = x.Name;
                        if (x.Ticket_File == null || x.Ticket_File == "")
                        {
                            // str = x.TicketNotes.Replace("qqqqaaaa", " ");
                            x.Name = str;

                        }
                        else
                        {
                            str = x.Name;
                            x.Name = str + "  " + " <a href='../Trainee/download?filepath=" + x.Ticket_File + "&name=" + x.Ticket_FileName + "' title=" + x.Ticket_FileName + "><span class='icon-download'></span></a>";

                        }

                        str = "";
                    }
                    User_Task ust = new User_TaskBL().getUser_TasksById((int)x.UserTask_Id);
                    Models.User user1 = new UserBL().getUsersById((int)ust.UserID);

                    if (user1.Role == 3)
                    {
                        namestr = "<a href='../Task/taskdetails?v=" +General_Purpose.EncryptId(((int)x.UserTask_Id)) + "&isModal=5ck'>" + ust.Task.Name + "</a>";

                    }
                    else
                    {
                        namestr = "<a href='../Manager/taskdetails?v=" +General_Purpose.EncryptId(((int)x.UserTask_Id)) + "&isModal=5ck'>" + ust.Task.Name + "</a>";

                    }
                    TodosDTO tododto = new TodosDTO()
                    {
                        Id = x.Id,
                        TodoCreatedBy = x.User.FirstName + ' ' + x.User.LastName,
                        TicketNotes = x.Name,
                        TaskName = namestr,
                        CreationDatetime = x.CreationDatetime.Value.ToString(),
                        //  CompletionDatetime = x.CompletionDatetime,
                        //File = x.Ticket_File,
                        //FileName = x.Ticket_FileName
                    };


                    mnglist.Add(tododto);
                    c++;
                    namestr = "";


                }

                return Json(new { data = mnglist, draw = Request["draw"], recordsTotal = totalrows, recordsFiltered = totalrowsafterfilterinig }, JsonRequestBehavior.AllowGet);




            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult CloseTaskTicket(int ticketId)
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }
                DatabaseEntities de = new DatabaseEntities();
                de.Configuration.ProxyCreationEnabled = true;
                de.Configuration.LazyLoadingEnabled = false;
                Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == ticketId);
                int id = logedinuser.Id;
                int role = logedinuser.Role;

                gtt.CompletedByUser = id;

                gtt.CompletionDatetime = DateTime.Now;
                de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                de.SaveChanges();
                de.Configuration.LazyLoadingEnabled = true;
                de.Configuration.ProxyCreationEnabled = false;
                return RedirectToAction("ActiveTickets", "Task", new { message = "To Do closed successfully" });
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        public ActionResult CloseAllTaskTickets(string TaskName = "", string CreationDate = "", string Ticketnotes = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                List<Task_Ticket> listtickets = new Task_TicketBL().getTask_TicketsList().Where(x => x.CreatedBy == logedinuser.Id && x.CompletionDatetime == null && x.User_Task.IsActive == 1).ToList();
                if (listtickets.Count() == 0)
                {
                    return RedirectToAction("ActiveTickets", "Task", new { message = "There is no active To Do" });

                }

                if (TaskName != "")
                {
                    listtickets = listtickets.Where(x => x.User_Task.Task.Name.ToLower().Contains(TaskName.ToLower())).ToList();
                }

                if (CreationDate != "")
                {
                    listtickets = listtickets.Where(x => Convert.ToDateTime(x.CreationDatetime).Date == Convert.ToDateTime(CreationDate).Date).ToList();
                }

                if (Ticketnotes != "")
                {
                    listtickets = listtickets.Where(x => x.Name.ToLower().Contains(Ticketnotes.ToLower())).ToList();
                }


                foreach (Task_Ticket i in listtickets)
                {
                    DatabaseEntities de = new DatabaseEntities();
                    de.Configuration.ProxyCreationEnabled = true;
                    de.Configuration.LazyLoadingEnabled = false;
                    Task_Ticket gtt = de.Task_Ticket.FirstOrDefault(x => x.Id == i.Id);
                    int id = logedinuser.Id;
                    int role = logedinuser.Role;

                    gtt.CompletedByUser = id;

                    gtt.CompletionDatetime = DateTime.Now;
                    de.Entry(gtt).State = System.Data.Entity.EntityState.Modified;
                    de.SaveChanges();
                    de.Configuration.LazyLoadingEnabled = true;
                    de.Configuration.ProxyCreationEnabled = false;
                }
                if (TaskName != "" || CreationDate != "" || Ticketnotes != "")
                {
                    return RedirectToAction("ActiveTickets", "Task", new { message = "Selected To Dos closed successfully" });

                }
                else
                {
                    return RedirectToAction("ActiveTickets", "Task", new { message = "All To Dos closed successfully" });
                }
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
        #endregion

        #region Reminder

        public ActionResult SetGroupTaskReminder(GroupTaskReminder gt, string Time = "", string isModal = "")
        {
            try
            {
                if (gt.ReminderTime == null)
                {
                    return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has not been added, Reminder Date must have value", isModal });

                }
                if (Time != "")
                {
                    gt.ReminderTime = Convert.ToDateTime(gt.ReminderTime.ToString().Split(' ')[0] + " " + Time);
                }
                GroupTasks_Details gg = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gt.GroupTasks_DetailsID);
                if (gt.ReminderTime == gg.EndDate || gt.ReminderTime < DateTime.Now)
                {
                    return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has not been added, Date must be less then End date", isModal });

                }
                if (Time != "")
                {
                    gt.ReminderTime = Convert.ToDateTime(gt.ReminderTime.ToString().Split(' ')[0] + " " + Time);
                }
                gt.IsActive = 1;
                gt.IsSent = 0;
                gt.CreatedAt = DateTime.Now;
                new GroupTaskReminderBAL().AddGroupTaskReminders(gt);
                return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has been added.", isModal });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }

        public ActionResult UpdateGroupTaskReminder(GroupTaskReminder gt, string Time = "", string isModal = "")
        {
            try
            {
                if (gt.ReminderTime == null)
                {
                    return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has not been updated, Reminder Date must have value", isModal });

                }
                GroupTasks_Details gg = new GroupTasks_DetailsBL().getGroupTasks_DetailssById((int)gt.GroupTasks_DetailsID);
                if (gt.ReminderTime == gg.EndDate || gt.ReminderTime < DateTime.Now)
                {
                    return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has not been updated, Date must be less then End date", isModal });

                }
                if (Time != "")
                {
                    gt.ReminderTime = Convert.ToDateTime(gt.ReminderTime.ToString().Split(' ')[0] + " " + Time);
                }
                gt.IsActive = 1;
                gt.IsSent = 0;
                gt.CreatedAt = DateTime.Now;
                gt.CompanyId = Convert.ToInt32(logedinuser.Company);
                new GroupTaskReminderBAL().UpdateGroupTaskReminders(gt);
                return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gt.GroupTasks_DetailsID)), message = "Reminder has been updated.", isModal });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }

        public ActionResult OffGroupTaskReminder(GroupTaskReminder gt, string isModal = "")
        {
            try
            {
                DatabaseEntities de = new DatabaseEntities();
                GroupTaskReminder gg = new GroupTaskReminderBAL().getGroupTaskRemindersById(gt.Id, de);
                gg.IsActive = 0;
                gg.CompanyId = Convert.ToInt32(logedinuser.Company);
                new GroupTaskReminderBAL().UpdateGroupTaskReminders(gt);
                return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gg.GroupTasks_DetailsID)), message = "Reminder has been deleted.", isModal });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
        #endregion


        #region Completed Assignments

        public ActionResult CompletedgroupAssignments(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                ViewBag.tags = new TagBL().getTagsList().OrderBy(s => s.Name).ToList();
                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).ToList();
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                //ViewBag.display = displayType;
                //ViewBag.displayTypes = new List<int>() { 1, 2, 3 }.Where(x => x != displayType);
                ViewBag.priorities = new List<int>() { 0, 1, 2 };


                ViewBag.message = message;
                List<GroupTask_User> leadname = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.LeadRole == 1 && x.User.CompanyID == Convert.ToInt32(logedinuser.Company) && x.GroupTasks_Details.CourseId==null).ToList();
                List<TaskDTO> pleadfname = new List<TaskDTO>();
                List<TaskDTO> pleadlname = new List<TaskDTO>();
                foreach (GroupTask_User t in leadname)
                {
                    TaskDTO obj = new TaskDTO()

                    {
                        Name = t.User.FirstName,
                        Id = t.User.Id,


                    };
                    TaskDTO obj2 = new TaskDTO()

                    {
                        Name = t.User.LastName,
                        Id = t.User.Id,


                    };
                    int c = 0;
                    c = pleadfname.Where(x => x.Id == t.User.Id).Count();
                    if (c == 0)
                    {
                        pleadfname.Add(obj);
                        pleadlname.Add(obj2);

                    }


                }
                ViewBag.LeadName = pleadfname;
                ViewBag.LeadLName = pleadlname;
                
                List<GroupTasks_Details> gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x => x.GroupTask.IsActive == 1 && x.CompletionDate != null && x.CourseId == null).ToList();
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                if (role == 3 || role == 2 || role == 4)
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.IsActive == 1 && y.UserId == id).Count() > 0).ToList();
                }
                //ViewBag.TaskName = new GroupTaskBL().getGroupTasksList().Where(x => x.IsActive == 1 && x.).ToList();
                ViewBag.TaskName = gTasks;

                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }
         public ActionResult CompletedgroupStudyAssignments(string message = "")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                ViewBag.tags = new TagBL().getTagsList().OrderBy(s => s.Name).ToList();
                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.departments = new DepartmentBL().getDepartmentsList().OrderBy(s => s.Name).ToList();
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList().OrderBy(s => s.Name).ToList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                //ViewBag.display = displayType;
                //ViewBag.displayTypes = new List<int>() { 1, 2, 3 }.Where(x => x != displayType);
                ViewBag.priorities = new List<int>() { 0, 1, 2 };


                ViewBag.message = message;
                List<GroupTask_User> leadname = new GroupTask_UserBL().getGroupTask_UsersList().Where(x => x.LeadRole == 1 && x.User.CompanyID == Convert.ToInt32(logedinuser.Company) && x.GroupTasks_Details.CourseId != null).ToList();
                List<TaskDTO> pleadfname = new List<TaskDTO>();
                List<TaskDTO> pleadlname = new List<TaskDTO>();
                foreach (GroupTask_User t in leadname)
                {
                    TaskDTO obj = new TaskDTO()

                    {
                        Name = t.User.FirstName,
                        Id = t.User.Id,


                    };
                    TaskDTO obj2 = new TaskDTO()

                    {
                        Name = t.User.LastName,
                        Id = t.User.Id,


                    };
                    int c = 0;
                    c = pleadfname.Where(x => x.Id == t.User.Id).Count();
                    if (c == 0)
                    {
                        pleadfname.Add(obj);
                        pleadlname.Add(obj2);

                    }


                }
                ViewBag.LeadName = pleadfname;
                ViewBag.LeadLName = pleadlname;
                
                List<GroupTasks_Details> gTasks = new GroupTasks_DetailsBL().getGroupTasks_DetailssList().Where(x => x.GroupTask.IsActive == 1 && x.CompletionDate != null && x.CourseId != null).ToList();
                int id = logedinuser.Id;
                int role = logedinuser.Role;
                if (role == 3 || role == 2 || role == 4)
                {
                    gTasks = gTasks.Where(x => x.GroupTask_User.Where(y => y.IsActive == 1 && y.UserId == id).Count() > 0).ToList();
                }
                //ViewBag.TaskName = new GroupTaskBL().getGroupTasksList().Where(x => x.IsActive == 1 && x.).ToList();
                ViewBag.TaskName = gTasks;

                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }


        public ActionResult CompletedAssignments(string message = "", string DivDepID = "", string isModal = "0")
        {
            try
            {
                if (AuthenticateUser() == false)
                {
                    return RedirectToAction("login", "Auth", new { error = "Timeout! Please Login Again" });
                }

                if (logedinuser.Role == 3)
                {
                    return Content("Acess Restricted !");
                }



                string complettionName = string.Empty;


                ViewBag.tags = new TagBL().getTagsList();


                ViewBag.departments = new DepartmentBL().getDepartmentsList();

                ViewBag.statuses = new List<int>() { 0, 1, 2, 3, 4 };
                ViewBag.taskTypes = new TaskTypeBL().getTaskTypesList();
                ViewBag.completionListId = new List<int>() { 1, 2, 3 };
                ViewBag.completionList = new List<string>() { "In Process", "Completed", "Late" };
                ViewBag.completionIdName = complettionName;


                ViewBag.message = message;
                ViewBag.DivDepID = DivDepID;

                List<User> userslist = new UserBL().getUsersList().Where(x => x.IsActive == 1 && x.Role == 3).ToList();
                ViewBag.FirstLastName = userslist;

                List<Task> taskslist = new TaskBL().getTasksList().Where(x => x.IsActive == 1).ToList();
                ViewBag.TaskName = taskslist;

                //////////////////////////////// Reminder for Dep/ Division
                /// 
                User_Task tt = new User_Task();
                if (DivDepID != "")
                {
                    tt = new User_TaskBL().getUser_TasksList().OrderByDescending(c => c.Id).Where(x => ((x.DivisionID == DivDepID || x.DepartmentID == DivDepID)) && x.IsPrivate == 0 && x.User1.Role == 1).FirstOrDefault();

                }
                DateTime dd = Convert.ToDateTime(tt.EndDate).Date;

                DateTime d7 = DateTime.Now.Date.AddDays(7);
                DateTime d30 = DateTime.Now.Date.AddDays(30);
                ViewBag.DailyRem = -1;
                ViewBag.WeeklyRem = -1;
                ViewBag.MonthlyRem = -1;
                if (dd > DateTime.Now.Date)
                {
                    ViewBag.DailyRem = 1;

                    if (dd > d7)
                    {
                        ViewBag.WeeklyRem = 1;

                        if (dd > d30)
                        {
                            ViewBag.MonthlyRem = 1;
                        }
                    }
                }
                if (tt.DailyReminder != null)
                {
                    ViewBag.DailyReminder = tt.DailyReminder;
                }
                if (tt.BeforeDDateReminder != null)
                {
                    TimeSpan days = Convert.ToDateTime(tt.BeforeDDateReminder) - dd;
                    ViewBag.BeforeDDateReminder = Math.Abs(days.Days);
                }
                return View();
            }
            catch (Exception ex)
            {

                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");

            }
        }

        #endregion

        #region Group Study

        public ActionResult SwitchGroupStudyLeader(int UserId,int gtdId, string isModal = "")
        {
            try
            {
                GroupTasks_Details gtd = new GroupTasks_DetailsBL().getGroupTasks_DetailssById(gtdId);

                DatabaseEntities de = new DatabaseEntities();
                User_Task ut = new User_TaskBL().GetGroupStudyUser_Tasks(Convert.ToInt32(logedinuser.Company),de).Where(x => x.GroupTaskDetailId == gtdId).FirstOrDefault();
                Course_UserTask cut = new Course_UserTaskBL().getCourse_UserTaskList().Where(x => x.User_TaskID == ut.Id && x.CourseID == gtd.CourseId).FirstOrDefault();
                if (cut != null)
                {
                    CourseGroupStudy cgst = new CourseGroupStudyBL().getCourseGroupStudyById((int)cut.CourseGroupStudyId);
                    if(cgst!=null)
                    {
                        cgst.LeadBy = UserId;
                        new CourseGroupStudyBL().UpdateCourseGroupStudy(cgst);
                    }
                    cut.UserId = UserId;
                    new Course_UserTaskBL().UpdateCourse_UserTask(cut);
                }


                ut.UserID = UserId;
               // de.SaveChanges();
                new User_TaskBL().UpdateUser_Tasks(ut, de);
                
                return RedirectToAction("GroupTaskDetails", "Task", new { v = General_Purpose.EncryptId(((int)gtdId)), message = "Group Leader has been changed.", isModal });
            }
            catch (Exception ex)
            {
                errormail.Remindermail(ProjectVaraiables.DeveloperMail, ex.Message.ToString() + "  \n Site Trace:: " + ex.StackTrace.ToString(), logedinuser.Name + ": Error in Zuptu");
                return RedirectToAction("Error");
            }
        }
        #endregion

        #region Task Dates Updation
        [HttpPost]
        public string getGtTaskDates(string TaskId , int IsGrpTask = -1)
        {
            DatabaseEntities db = new DatabaseEntities();
            int taskId = Convert.ToInt32(TaskId);
            if (IsGrpTask == -1)
            {
                User_Task task = new User_TaskBL().getUser_TasksByIdWrapper(taskId, db);
                string completionDate = "", CreatedAt = "";
                if (task.CompletionDate.HasValue)
                {
                    completionDate = task.CompletionDate.Value.ToString("yyyy-MM-dd");
                }
                if (task.CreatedAt.HasValue)
                {
                    CreatedAt = task.CreatedAt.Value.ToString("yyyy-MM-dd");
                }
                TaskDatesDTO obj = new TaskDatesDTO()
                {
                    Id = task.Id,
                    StartDate = task.StartDate.Value.ToString("yyyy-MM-dd"),
                    EndDate = task.EndDate.Value.ToString("yyyy-MM-dd"),
                    CompletionDate = completionDate,
                    CreationDate = CreatedAt

                };
                return JsonConvert.SerializeObject(obj, Formatting.Indented,
                  new JsonSerializerSettings()
                  {
                      ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                  }); ;

            }
            else
            {
                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(taskId, db);
                string completionDate = "", CreatedAt = "";
                if (task.CompletionDate.HasValue)
                {
                    completionDate = task.CompletionDate.Value.ToString("yyyy-MM-dd");
                }
                if (task.CreatedAt.HasValue)
                {
                    CreatedAt = task.CreatedAt.Value.ToString("yyyy-MM-dd");
                }
                TaskDatesDTO obj = new TaskDatesDTO()
                {
                    Id = task.Id,
                    StartDate = task.StartDate.Value.ToString("yyyy-MM-dd"),
                    EndDate = task.EndDate.Value.ToString("yyyy-MM-dd"),
                    CompletionDate = completionDate,
                    CreationDate = CreatedAt

                };

                return JsonConvert.SerializeObject(obj, Formatting.Indented,
                  new JsonSerializerSettings()
                  {
                      ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                  }); ;

            }



           
        }
        [HttpPost]
        public string UpdateTaskDateValues(TaskDatesDTO obj,int IsGrpTask=-1)
        {
            DatabaseEntities db = new DatabaseEntities();
            DatabaseEntities de = new DatabaseEntities();

            if (IsGrpTask == -1)
            {
                User_Task task = new User_TaskBL().getUser_TasksByIdWrapper(obj.Id, db);

                task.StartDate = Convert.ToDateTime(Convert.ToDateTime(obj.StartDate).ToString("MM/dd/yyyy"));
                task.EndDate = Convert.ToDateTime(Convert.ToDateTime(obj.EndDate).ToString("MM/dd/yyyy"));
                task.CreatedAt = Convert.ToDateTime(Convert.ToDateTime(obj.CreationDate).ToString("MM/dd/yyyy"));
                if (!String.IsNullOrEmpty(obj.CompletionDate))
                {
                    task.CompletionDate = Convert.ToDateTime(Convert.ToDateTime(obj.CompletionDate).ToString("MM/dd/yyyy"));
                    Course_UserTask Cut = new Course_UserTaskBL().getCourse_UserTaskList(de).Where(c => c.User_TaskID == task.Id).FirstOrDefault();
                    if (Cut != null)
                    {
                        if (Cut.CompletedAt.HasValue)
                        {
                            Cut.CompletedAt= Convert.ToDateTime(Convert.ToDateTime(obj.CompletionDate).ToString("MM/dd/yyyy"));
                            new Course_UserTaskBL().UpdateCourse_UserTask(Cut, de);
                        }
                    }

                }
                task.DailyReminder = null;
                task.BeforeDDateReminder = null;
                new User_TaskBL().UpdateUser_Tasks(task, db);
            }
            else
            {
                GroupTasks_Details task = new GroupTasks_DetailsBL().getGroupTasks_DetailssByIdWrapepr(obj.Id, db);

                task.StartDate = Convert.ToDateTime(Convert.ToDateTime(obj.StartDate).ToString("MM/dd/yyyy"));
                task.EndDate = Convert.ToDateTime(Convert.ToDateTime(obj.EndDate).ToString("MM/dd/yyyy"));
                task.CreatedAt = Convert.ToDateTime(Convert.ToDateTime(obj.CreationDate).ToString("MM/dd/yyyy"));
                if (!String.IsNullOrEmpty(obj.CompletionDate))
                {
                    task.CompletionDate = Convert.ToDateTime(Convert.ToDateTime(obj.CompletionDate).ToString("MM/dd/yyyy"));
                }
               // task.DailyReminder = null;
               // task.BeforeDDateReminder = null;
                new GroupTasks_DetailsBL().UpdateGroupTasks_DetailsWrapper(task, db);
            }
            
            return JsonConvert.SerializeObject(obj, Formatting.Indented,
                   new JsonSerializerSettings()
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                   }); ;
        }

        #endregion
    }
}
