//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrainingTracker.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Attempted_Quiz> Attempted_Quiz { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Course_File> Course_File { get; set; }
        public virtual DbSet<Course_UserTask> Course_UserTask { get; set; }
        public virtual DbSet<DelegateFile> DelegateFiles { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<ExtensionRequest> ExtensionRequests { get; set; }
        public virtual DbSet<FavoriteReport> FavoriteReports { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<FileDownloadLink> FileDownloadLinks { get; set; }
        public virtual DbSet<FileLog> FileLogs { get; set; }
        public virtual DbSet<FileVersion> FileVersions { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<FolderAccess> FolderAccesses { get; set; }
        public virtual DbSet<GroupTask> GroupTasks { get; set; }
        public virtual DbSet<GroupTask_Task> GroupTask_Task { get; set; }
        public virtual DbSet<GroupTask_Ticket> GroupTask_Ticket { get; set; }
        public virtual DbSet<GroupTask_User> GroupTask_User { get; set; }
        public virtual DbSet<GroupTaskComment> GroupTaskComments { get; set; }
        public virtual DbSet<GroupTaskReminder> GroupTaskReminders { get; set; }
        public virtual DbSet<GroupTasks_Details> GroupTasks_Details { get; set; }
        public virtual DbSet<Meeting> Meetings { get; set; }
        public virtual DbSet<OldPassword> OldPasswords { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Question_File> Question_File { get; set; }
        public virtual DbSet<Quiz> Quizs { get; set; }
        public virtual DbSet<Quiz_Result> Quiz_Result { get; set; }
        public virtual DbSet<SuperAdmin> SuperAdmins { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Task_Ticket> Task_Ticket { get; set; }
        public virtual DbSet<TaskComment> TaskComments { get; set; }
        public virtual DbSet<TaskFile> TaskFiles { get; set; }
        public virtual DbSet<TaskTag> TaskTags { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User_Meeting> User_Meeting { get; set; }
        public virtual DbSet<User_Task> User_Task { get; set; }
        public virtual DbSet<User_Worktype> User_Worktype { get; set; }
        public virtual DbSet<UserSecurity> UserSecurities { get; set; }
        public virtual DbSet<UserTask_QuizResult> UserTask_QuizResult { get; set; }
        public virtual DbSet<Worktype> Worktypes { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<CourseGroupStudy> CourseGroupStudies { get; set; }
    
        public virtual ObjectResult<AuthenticateUser_Result> AuthenticateUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthenticateUser_Result>("AuthenticateUser", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SelectALLUserTask_Result> SelectALLUserTask(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectALLUserTask_Result>("SelectALLUserTask", userIdParameter);
        }
    
        public virtual ObjectResult<SelectGroupTaskDetailsById_Result> SelectGroupTaskDetailsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectGroupTaskDetailsById_Result>("SelectGroupTaskDetailsById", idParameter);
        }
    
        public virtual ObjectResult<SelectGroupTaskDetailsbyUserId_Result> SelectGroupTaskDetailsbyUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectGroupTaskDetailsbyUserId_Result>("SelectGroupTaskDetailsbyUserId", userIdParameter);
        }
    
        public virtual ObjectResult<SelectUncompletedGroupTaskDetailsbyUserId_Result> SelectUncompletedGroupTaskDetailsbyUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUncompletedGroupTaskDetailsbyUserId_Result>("SelectUncompletedGroupTaskDetailsbyUserId", userIdParameter);
        }
    
        public virtual ObjectResult<SelectUserGroupTask_Result> SelectUserGroupTask(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserGroupTask_Result>("SelectUserGroupTask", idParameter);
        }
    
        public virtual ObjectResult<SelectUserTask_Result> SelectUserTask(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserTask_Result>("SelectUserTask", idParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateCertificate_Result> sp_AddUpdateCertificate(string statementType, Nullable<int> id, Nullable<int> isActive, string name, string path, Nullable<int> userID, Nullable<System.DateTime> createdAt, Nullable<int> companyId)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateCertificate_Result>("sp_AddUpdateCertificate", statementTypeParameter, idParameter, isActiveParameter, nameParameter, pathParameter, userIDParameter, createdAtParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateCompany_Result> sp_AddUpdateCompany(string statementType, Nullable<int> id, string name, string address, string phone_Number, Nullable<int> isActive, string slackWebhook, Nullable<int> managerNumber, Nullable<int> employeeNumber, Nullable<int> isFavReport, Nullable<System.DateTime> createdAt, Nullable<int> isLMS, Nullable<int> isDocManager)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phone_NumberParameter = phone_Number != null ?
                new ObjectParameter("Phone_Number", phone_Number) :
                new ObjectParameter("Phone_Number", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var slackWebhookParameter = slackWebhook != null ?
                new ObjectParameter("SlackWebhook", slackWebhook) :
                new ObjectParameter("SlackWebhook", typeof(string));
    
            var managerNumberParameter = managerNumber.HasValue ?
                new ObjectParameter("ManagerNumber", managerNumber) :
                new ObjectParameter("ManagerNumber", typeof(int));
    
            var employeeNumberParameter = employeeNumber.HasValue ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(int));
    
            var isFavReportParameter = isFavReport.HasValue ?
                new ObjectParameter("IsFavReport", isFavReport) :
                new ObjectParameter("IsFavReport", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var isLMSParameter = isLMS.HasValue ?
                new ObjectParameter("IsLMS", isLMS) :
                new ObjectParameter("IsLMS", typeof(int));
    
            var isDocManagerParameter = isDocManager.HasValue ?
                new ObjectParameter("IsDocManager", isDocManager) :
                new ObjectParameter("IsDocManager", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateCompany_Result>("sp_AddUpdateCompany", statementTypeParameter, idParameter, nameParameter, addressParameter, phone_NumberParameter, isActiveParameter, slackWebhookParameter, managerNumberParameter, employeeNumberParameter, isFavReportParameter, createdAtParameter, isLMSParameter, isDocManagerParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateContact_Result> sp_AddUpdateContact(string statementType, Nullable<int> id, Nullable<int> userId, string subject, string message, string priority, string file, string fileName, Nullable<System.DateTime> sendingTime, string ticketNo, Nullable<System.DateTime> createdAt, Nullable<int> isActive, string userEmail)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var sendingTimeParameter = sendingTime.HasValue ?
                new ObjectParameter("SendingTime", sendingTime) :
                new ObjectParameter("SendingTime", typeof(System.DateTime));
    
            var ticketNoParameter = ticketNo != null ?
                new ObjectParameter("TicketNo", ticketNo) :
                new ObjectParameter("TicketNo", typeof(string));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateContact_Result>("sp_AddUpdateContact", statementTypeParameter, idParameter, userIdParameter, subjectParameter, messageParameter, priorityParameter, fileParameter, fileNameParameter, sendingTimeParameter, ticketNoParameter, createdAtParameter, isActiveParameter, userEmailParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateDepartment_Result> sp_AddUpdateDepartment(string statementType, Nullable<int> id, Nullable<int> divisionID, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateDepartment_Result>("sp_AddUpdateDepartment", statementTypeParameter, idParameter, divisionIDParameter, nameParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateDivision_Result> sp_AddUpdateDivision(string statementType, Nullable<int> id, string name, Nullable<int> companyID, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateDivision_Result>("sp_AddUpdateDivision", statementTypeParameter, idParameter, nameParameter, companyIDParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateExtensionRequest_Result> sp_AddUpdateExtensionRequest(string statementType, Nullable<int> id, Nullable<int> groupTaskDetails_Id, Nullable<int> requestedDays, string reason, Nullable<int> status, Nullable<int> displayed, Nullable<int> user_TaskId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupTaskDetails_IdParameter = groupTaskDetails_Id.HasValue ?
                new ObjectParameter("GroupTaskDetails_Id", groupTaskDetails_Id) :
                new ObjectParameter("GroupTaskDetails_Id", typeof(int));
    
            var requestedDaysParameter = requestedDays.HasValue ?
                new ObjectParameter("RequestedDays", requestedDays) :
                new ObjectParameter("RequestedDays", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var displayedParameter = displayed.HasValue ?
                new ObjectParameter("Displayed", displayed) :
                new ObjectParameter("Displayed", typeof(int));
    
            var user_TaskIdParameter = user_TaskId.HasValue ?
                new ObjectParameter("User_TaskId", user_TaskId) :
                new ObjectParameter("User_TaskId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateExtensionRequest_Result>("sp_AddUpdateExtensionRequest", statementTypeParameter, idParameter, groupTaskDetails_IdParameter, requestedDaysParameter, reasonParameter, statusParameter, displayedParameter, user_TaskIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateFavoriteReport_Result> sp_AddUpdateFavoriteReport(string statementType, Nullable<int> id, string name, string division, string department, string taskName, string taskType, string status, string priority, string startingDate, string endingDate, string startDate, string endDate, string completeDate, string userType, string employee, Nullable<int> reportType, Nullable<int> isStatic, Nullable<int> user_Id, Nullable<int> isActive, Nullable<System.DateTime> created_At, string workerType, string filterDate)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var startingDateParameter = startingDate != null ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(string));
    
            var endingDateParameter = endingDate != null ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var completeDateParameter = completeDate != null ?
                new ObjectParameter("CompleteDate", completeDate) :
                new ObjectParameter("CompleteDate", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var employeeParameter = employee != null ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(string));
    
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            var isStaticParameter = isStatic.HasValue ?
                new ObjectParameter("IsStatic", isStatic) :
                new ObjectParameter("IsStatic", typeof(int));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var created_AtParameter = created_At.HasValue ?
                new ObjectParameter("Created_At", created_At) :
                new ObjectParameter("Created_At", typeof(System.DateTime));
    
            var workerTypeParameter = workerType != null ?
                new ObjectParameter("WorkerType", workerType) :
                new ObjectParameter("WorkerType", typeof(string));
    
            var filterDateParameter = filterDate != null ?
                new ObjectParameter("FilterDate", filterDate) :
                new ObjectParameter("FilterDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateFavoriteReport_Result>("sp_AddUpdateFavoriteReport", statementTypeParameter, idParameter, nameParameter, divisionParameter, departmentParameter, taskNameParameter, taskTypeParameter, statusParameter, priorityParameter, startingDateParameter, endingDateParameter, startDateParameter, endDateParameter, completeDateParameter, userTypeParameter, employeeParameter, reportTypeParameter, isStaticParameter, user_IdParameter, isActiveParameter, created_AtParameter, workerTypeParameter, filterDateParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTask_Result> sp_AddUpdateGroupTask(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<int> userId, Nullable<int> isPrivate, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTask_Result>("sp_AddUpdateGroupTask", statementTypeParameter, idParameter, nameParameter, isActiveParameter, userIdParameter, isPrivateParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTask_Task_Result> sp_AddUpdateGroupTask_Task(string statementType, Nullable<int> id, Nullable<int> taskId, Nullable<int> groupTaskId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var groupTaskIdParameter = groupTaskId.HasValue ?
                new ObjectParameter("GroupTaskId", groupTaskId) :
                new ObjectParameter("GroupTaskId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTask_Task_Result>("sp_AddUpdateGroupTask_Task", statementTypeParameter, idParameter, taskIdParameter, groupTaskIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTask_Ticket_Result> sp_AddUpdateGroupTask_Ticket(string statementType, Nullable<int> id, Nullable<int> groupTaskDetails_Id, string name, Nullable<System.DateTime> creationDatetime, Nullable<System.DateTime> completionDatetime, Nullable<int> createdBy, Nullable<int> completedByUser, Nullable<int> isActive, Nullable<System.DateTime> fileUploadDate, string ticket_FileName, string ticket_File, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> position, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupTaskDetails_IdParameter = groupTaskDetails_Id.HasValue ?
                new ObjectParameter("GroupTaskDetails_Id", groupTaskDetails_Id) :
                new ObjectParameter("GroupTaskDetails_Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var creationDatetimeParameter = creationDatetime.HasValue ?
                new ObjectParameter("CreationDatetime", creationDatetime) :
                new ObjectParameter("CreationDatetime", typeof(System.DateTime));
    
            var completionDatetimeParameter = completionDatetime.HasValue ?
                new ObjectParameter("CompletionDatetime", completionDatetime) :
                new ObjectParameter("CompletionDatetime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var completedByUserParameter = completedByUser.HasValue ?
                new ObjectParameter("CompletedByUser", completedByUser) :
                new ObjectParameter("CompletedByUser", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var fileUploadDateParameter = fileUploadDate.HasValue ?
                new ObjectParameter("FileUploadDate", fileUploadDate) :
                new ObjectParameter("FileUploadDate", typeof(System.DateTime));
    
            var ticket_FileNameParameter = ticket_FileName != null ?
                new ObjectParameter("Ticket_FileName", ticket_FileName) :
                new ObjectParameter("Ticket_FileName", typeof(string));
    
            var ticket_FileParameter = ticket_File != null ?
                new ObjectParameter("Ticket_File", ticket_File) :
                new ObjectParameter("Ticket_File", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTask_Ticket_Result>("sp_AddUpdateGroupTask_Ticket", statementTypeParameter, idParameter, groupTaskDetails_IdParameter, nameParameter, creationDatetimeParameter, completionDatetimeParameter, createdByParameter, completedByUserParameter, isActiveParameter, fileUploadDateParameter, ticket_FileNameParameter, ticket_FileParameter, startDateParameter, endDateParameter, positionParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTask_User_Result> sp_AddUpdateGroupTask_User(string statementType, Nullable<int> id, Nullable<int> status, Nullable<int> userId, Nullable<int> isActive, Nullable<int> leadRole, Nullable<int> groupTaskDetailsId, Nullable<System.DateTime> beforeDDateReminder, Nullable<int> dailyReminder, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var leadRoleParameter = leadRole.HasValue ?
                new ObjectParameter("LeadRole", leadRole) :
                new ObjectParameter("LeadRole", typeof(int));
    
            var groupTaskDetailsIdParameter = groupTaskDetailsId.HasValue ?
                new ObjectParameter("GroupTaskDetailsId", groupTaskDetailsId) :
                new ObjectParameter("GroupTaskDetailsId", typeof(int));
    
            var beforeDDateReminderParameter = beforeDDateReminder.HasValue ?
                new ObjectParameter("BeforeDDateReminder", beforeDDateReminder) :
                new ObjectParameter("BeforeDDateReminder", typeof(System.DateTime));
    
            var dailyReminderParameter = dailyReminder.HasValue ?
                new ObjectParameter("DailyReminder", dailyReminder) :
                new ObjectParameter("DailyReminder", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTask_User_Result>("sp_AddUpdateGroupTask_User", statementTypeParameter, idParameter, statusParameter, userIdParameter, isActiveParameter, leadRoleParameter, groupTaskDetailsIdParameter, beforeDDateReminderParameter, dailyReminderParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTaskComment_Result> sp_AddUpdateGroupTaskComment(string statementType, Nullable<int> id, string comment, Nullable<int> groupTaskUserId, string date, Nullable<int> isActive, string file, string fileName, Nullable<int> userId, Nullable<int> groupTaskDetailsId, Nullable<int> parentId, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var groupTaskUserIdParameter = groupTaskUserId.HasValue ?
                new ObjectParameter("GroupTaskUserId", groupTaskUserId) :
                new ObjectParameter("GroupTaskUserId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var groupTaskDetailsIdParameter = groupTaskDetailsId.HasValue ?
                new ObjectParameter("GroupTaskDetailsId", groupTaskDetailsId) :
                new ObjectParameter("GroupTaskDetailsId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTaskComment_Result>("sp_AddUpdateGroupTaskComment", statementTypeParameter, idParameter, commentParameter, groupTaskUserIdParameter, dateParameter, isActiveParameter, fileParameter, fileNameParameter, userIdParameter, groupTaskDetailsIdParameter, parentIdParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTaskReminder_Result> sp_AddUpdateGroupTaskReminder(string statementType, Nullable<int> id, Nullable<int> userID, Nullable<System.DateTime> reminderTime, Nullable<int> isSent, Nullable<int> groupTasks_DetailsID, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var reminderTimeParameter = reminderTime.HasValue ?
                new ObjectParameter("ReminderTime", reminderTime) :
                new ObjectParameter("ReminderTime", typeof(System.DateTime));
    
            var isSentParameter = isSent.HasValue ?
                new ObjectParameter("IsSent", isSent) :
                new ObjectParameter("IsSent", typeof(int));
    
            var groupTasks_DetailsIDParameter = groupTasks_DetailsID.HasValue ?
                new ObjectParameter("GroupTasks_DetailsID", groupTasks_DetailsID) :
                new ObjectParameter("GroupTasks_DetailsID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTaskReminder_Result>("sp_AddUpdateGroupTaskReminder", statementTypeParameter, idParameter, userIDParameter, reminderTimeParameter, isSentParameter, groupTasks_DetailsIDParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateGroupTasks_Detail_Result> sp_AddUpdateGroupTasks_Detail(string statementType, Nullable<int> id, Nullable<double> hours, Nullable<double> cEU, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> grade, Nullable<System.DateTime> completionDate, Nullable<int> isActive, string notes, Nullable<int> groupTaskId, Nullable<int> status, Nullable<double> cost, Nullable<int> priority, string slackChannel, Nullable<int> createdBy, Nullable<int> ticketSortBy, Nullable<int> parentID, Nullable<int> repeatTime, Nullable<int> repeatDeadline, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var cEUParameter = cEU.HasValue ?
                new ObjectParameter("CEU", cEU) :
                new ObjectParameter("CEU", typeof(double));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(int));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var groupTaskIdParameter = groupTaskId.HasValue ?
                new ObjectParameter("GroupTaskId", groupTaskId) :
                new ObjectParameter("GroupTaskId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(double));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var slackChannelParameter = slackChannel != null ?
                new ObjectParameter("SlackChannel", slackChannel) :
                new ObjectParameter("SlackChannel", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var ticketSortByParameter = ticketSortBy.HasValue ?
                new ObjectParameter("TicketSortBy", ticketSortBy) :
                new ObjectParameter("TicketSortBy", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var repeatTimeParameter = repeatTime.HasValue ?
                new ObjectParameter("RepeatTime", repeatTime) :
                new ObjectParameter("RepeatTime", typeof(int));
    
            var repeatDeadlineParameter = repeatDeadline.HasValue ?
                new ObjectParameter("RepeatDeadline", repeatDeadline) :
                new ObjectParameter("RepeatDeadline", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateGroupTasks_Detail_Result>("sp_AddUpdateGroupTasks_Detail", statementTypeParameter, idParameter, hoursParameter, cEUParameter, startDateParameter, endDateParameter, gradeParameter, completionDateParameter, isActiveParameter, notesParameter, groupTaskIdParameter, statusParameter, costParameter, priorityParameter, slackChannelParameter, createdByParameter, ticketSortByParameter, parentIDParameter, repeatTimeParameter, repeatDeadlineParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateOldPassword_Result> sp_AddUpdateOldPassword(string statementType, Nullable<int> id, Nullable<int> userId, string password, Nullable<System.DateTime> createdAt, Nullable<int> isActive)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateOldPassword_Result>("sp_AddUpdateOldPassword", statementTypeParameter, idParameter, userIdParameter, passwordParameter, createdAtParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateSuperAdmin_Result> sp_AddUpdateSuperAdmin(string statementType, Nullable<int> id, string firstName, string lastName, string email, string password, string phone, string imagePath, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateSuperAdmin_Result>("sp_AddUpdateSuperAdmin", statementTypeParameter, idParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, phoneParameter, imagePathParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTag_Result> sp_AddUpdateTag(string statementType, Nullable<int> id, Nullable<int> isActive, string name, Nullable<int> divisionId, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTag_Result>("sp_AddUpdateTag", statementTypeParameter, idParameter, isActiveParameter, nameParameter, divisionIdParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTask_Result> sp_AddUpdateTask(string statementType, Nullable<int> id, Nullable<int> isActive, string name, Nullable<int> taskTypeID, Nullable<int> divisionId, string description, Nullable<double> cost, Nullable<double> hours, Nullable<double> cEU, Nullable<int> departmentID, string file, Nullable<int> userId, Nullable<int> isPrivate, Nullable<int> courseId, Nullable<int> isResultAnnounced, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var taskTypeIDParameter = taskTypeID.HasValue ?
                new ObjectParameter("TaskTypeID", taskTypeID) :
                new ObjectParameter("TaskTypeID", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(double));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var cEUParameter = cEU.HasValue ?
                new ObjectParameter("CEU", cEU) :
                new ObjectParameter("CEU", typeof(double));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var isResultAnnouncedParameter = isResultAnnounced.HasValue ?
                new ObjectParameter("IsResultAnnounced", isResultAnnounced) :
                new ObjectParameter("IsResultAnnounced", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTask_Result>("sp_AddUpdateTask", statementTypeParameter, idParameter, isActiveParameter, nameParameter, taskTypeIDParameter, divisionIdParameter, descriptionParameter, costParameter, hoursParameter, cEUParameter, departmentIDParameter, fileParameter, userIdParameter, isPrivateParameter, courseIdParameter, isResultAnnouncedParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTask_Ticket_Result> sp_AddUpdateTask_Ticket(string statementType, Nullable<int> id, Nullable<int> userTask_Id, string name, Nullable<System.DateTime> creationDatetime, Nullable<System.DateTime> completionDatetime, Nullable<int> createdBy, Nullable<int> completedByUser, Nullable<int> isActive, Nullable<int> createdOn, string ticket_File, string ticket_FileName, Nullable<System.DateTime> fileUploadDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> position, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userTask_IdParameter = userTask_Id.HasValue ?
                new ObjectParameter("UserTask_Id", userTask_Id) :
                new ObjectParameter("UserTask_Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var creationDatetimeParameter = creationDatetime.HasValue ?
                new ObjectParameter("CreationDatetime", creationDatetime) :
                new ObjectParameter("CreationDatetime", typeof(System.DateTime));
    
            var completionDatetimeParameter = completionDatetime.HasValue ?
                new ObjectParameter("CompletionDatetime", completionDatetime) :
                new ObjectParameter("CompletionDatetime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var completedByUserParameter = completedByUser.HasValue ?
                new ObjectParameter("CompletedByUser", completedByUser) :
                new ObjectParameter("CompletedByUser", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(int));
    
            var ticket_FileParameter = ticket_File != null ?
                new ObjectParameter("Ticket_File", ticket_File) :
                new ObjectParameter("Ticket_File", typeof(string));
    
            var ticket_FileNameParameter = ticket_FileName != null ?
                new ObjectParameter("Ticket_FileName", ticket_FileName) :
                new ObjectParameter("Ticket_FileName", typeof(string));
    
            var fileUploadDateParameter = fileUploadDate.HasValue ?
                new ObjectParameter("FileUploadDate", fileUploadDate) :
                new ObjectParameter("FileUploadDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTask_Ticket_Result>("sp_AddUpdateTask_Ticket", statementTypeParameter, idParameter, userTask_IdParameter, nameParameter, creationDatetimeParameter, completionDatetimeParameter, createdByParameter, completedByUserParameter, isActiveParameter, createdOnParameter, ticket_FileParameter, ticket_FileNameParameter, fileUploadDateParameter, startDateParameter, endDateParameter, positionParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTaskComment_Result> sp_AddUpdateTaskComment(string statementType, Nullable<int> id, string comment, Nullable<int> taskId, string date, string file, string fileName, Nullable<int> isActive, Nullable<int> userId, Nullable<int> parentId, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTaskComment_Result>("sp_AddUpdateTaskComment", statementTypeParameter, idParameter, commentParameter, taskIdParameter, dateParameter, fileParameter, fileNameParameter, isActiveParameter, userIdParameter, parentIdParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTaskFile_Result> sp_AddUpdateTaskFile(string statementType, Nullable<int> id, string name, string path, Nullable<int> taskId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTaskFile_Result>("sp_AddUpdateTaskFile", statementTypeParameter, idParameter, nameParameter, pathParameter, taskIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTaskTag_Result> sp_AddUpdateTaskTag(string statementType, Nullable<int> id, Nullable<int> taskId, Nullable<int> tagId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTaskTag_Result>("sp_AddUpdateTaskTag", statementTypeParameter, idParameter, taskIdParameter, tagIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateTaskType_Result> sp_AddUpdateTaskType(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<int> companyID, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateTaskType_Result>("sp_AddUpdateTaskType", statementTypeParameter, idParameter, nameParameter, isActiveParameter, companyIDParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateUser_Result> sp_AddUpdateUser(string statementType, Nullable<int> id, string firstName, string lastName, string email, string phoneNumber, string homeNumber, string notes, Nullable<int> isActive, Nullable<int> acessLevel, string image, string password, Nullable<int> isSlack, Nullable<int> isSMS, Nullable<int> isMail, string slackAddress, string googleKeyLength, string goggleTaskColor, Nullable<int> showTasks, Nullable<int> showUrgent, Nullable<int> companyID, Nullable<int> divisionId, Nullable<int> departmentId, Nullable<int> role, Nullable<int> isMasterAdmin, string outlookToken, string searchByPriority, string searchByDivision, string searchByDepartment, string searchByPrivate, string searchByUserType, string lowPriorityColor, string mediumPriorityColor, string highPriorityColor, string canvasLoginId, Nullable<System.DateTime> joiningDate, Nullable<System.DateTime> deletionDate, string player_Id, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var homeNumberParameter = homeNumber != null ?
                new ObjectParameter("HomeNumber", homeNumber) :
                new ObjectParameter("HomeNumber", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var acessLevelParameter = acessLevel.HasValue ?
                new ObjectParameter("AcessLevel", acessLevel) :
                new ObjectParameter("AcessLevel", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isSlackParameter = isSlack.HasValue ?
                new ObjectParameter("isSlack", isSlack) :
                new ObjectParameter("isSlack", typeof(int));
    
            var isSMSParameter = isSMS.HasValue ?
                new ObjectParameter("isSMS", isSMS) :
                new ObjectParameter("isSMS", typeof(int));
    
            var isMailParameter = isMail.HasValue ?
                new ObjectParameter("isMail", isMail) :
                new ObjectParameter("isMail", typeof(int));
    
            var slackAddressParameter = slackAddress != null ?
                new ObjectParameter("SlackAddress", slackAddress) :
                new ObjectParameter("SlackAddress", typeof(string));
    
            var googleKeyLengthParameter = googleKeyLength != null ?
                new ObjectParameter("GoogleKeyLength", googleKeyLength) :
                new ObjectParameter("GoogleKeyLength", typeof(string));
    
            var goggleTaskColorParameter = goggleTaskColor != null ?
                new ObjectParameter("GoggleTaskColor", goggleTaskColor) :
                new ObjectParameter("GoggleTaskColor", typeof(string));
    
            var showTasksParameter = showTasks.HasValue ?
                new ObjectParameter("ShowTasks", showTasks) :
                new ObjectParameter("ShowTasks", typeof(int));
    
            var showUrgentParameter = showUrgent.HasValue ?
                new ObjectParameter("ShowUrgent", showUrgent) :
                new ObjectParameter("ShowUrgent", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var isMasterAdminParameter = isMasterAdmin.HasValue ?
                new ObjectParameter("IsMasterAdmin", isMasterAdmin) :
                new ObjectParameter("IsMasterAdmin", typeof(int));
    
            var outlookTokenParameter = outlookToken != null ?
                new ObjectParameter("OutlookToken", outlookToken) :
                new ObjectParameter("OutlookToken", typeof(string));
    
            var searchByPriorityParameter = searchByPriority != null ?
                new ObjectParameter("SearchByPriority", searchByPriority) :
                new ObjectParameter("SearchByPriority", typeof(string));
    
            var searchByDivisionParameter = searchByDivision != null ?
                new ObjectParameter("SearchByDivision", searchByDivision) :
                new ObjectParameter("SearchByDivision", typeof(string));
    
            var searchByDepartmentParameter = searchByDepartment != null ?
                new ObjectParameter("SearchByDepartment", searchByDepartment) :
                new ObjectParameter("SearchByDepartment", typeof(string));
    
            var searchByPrivateParameter = searchByPrivate != null ?
                new ObjectParameter("SearchByPrivate", searchByPrivate) :
                new ObjectParameter("SearchByPrivate", typeof(string));
    
            var searchByUserTypeParameter = searchByUserType != null ?
                new ObjectParameter("SearchByUserType", searchByUserType) :
                new ObjectParameter("SearchByUserType", typeof(string));
    
            var lowPriorityColorParameter = lowPriorityColor != null ?
                new ObjectParameter("LowPriorityColor", lowPriorityColor) :
                new ObjectParameter("LowPriorityColor", typeof(string));
    
            var mediumPriorityColorParameter = mediumPriorityColor != null ?
                new ObjectParameter("MediumPriorityColor", mediumPriorityColor) :
                new ObjectParameter("MediumPriorityColor", typeof(string));
    
            var highPriorityColorParameter = highPriorityColor != null ?
                new ObjectParameter("HighPriorityColor", highPriorityColor) :
                new ObjectParameter("HighPriorityColor", typeof(string));
    
            var canvasLoginIdParameter = canvasLoginId != null ?
                new ObjectParameter("CanvasLoginId", canvasLoginId) :
                new ObjectParameter("CanvasLoginId", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var deletionDateParameter = deletionDate.HasValue ?
                new ObjectParameter("DeletionDate", deletionDate) :
                new ObjectParameter("DeletionDate", typeof(System.DateTime));
    
            var player_IdParameter = player_Id != null ?
                new ObjectParameter("Player_Id", player_Id) :
                new ObjectParameter("Player_Id", typeof(string));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateUser_Result>("sp_AddUpdateUser", statementTypeParameter, idParameter, firstNameParameter, lastNameParameter, emailParameter, phoneNumberParameter, homeNumberParameter, notesParameter, isActiveParameter, acessLevelParameter, imageParameter, passwordParameter, isSlackParameter, isSMSParameter, isMailParameter, slackAddressParameter, googleKeyLengthParameter, goggleTaskColorParameter, showTasksParameter, showUrgentParameter, companyIDParameter, divisionIdParameter, departmentIdParameter, roleParameter, isMasterAdminParameter, outlookTokenParameter, searchByPriorityParameter, searchByDivisionParameter, searchByDepartmentParameter, searchByPrivateParameter, searchByUserTypeParameter, lowPriorityColorParameter, mediumPriorityColorParameter, highPriorityColorParameter, canvasLoginIdParameter, joiningDateParameter, deletionDateParameter, player_IdParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateUser_Task_Result> sp_AddUpdateUser_Task(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string notes, Nullable<double> cost, Nullable<double> cEU, Nullable<int> grad, Nullable<int> userID, Nullable<int> taskID, Nullable<int> createdID, Nullable<int> status, Nullable<double> hours, Nullable<System.DateTime> completionDate, string file, Nullable<int> repeatTime, Nullable<int> repeatDeadline, Nullable<int> isPrivate, Nullable<int> priority, Nullable<System.DateTime> beforeDDateReminder, Nullable<int> dailyReminder, Nullable<int> canvasCourseId, string divisionID, string departmentID, string templateName, Nullable<int> parentID, Nullable<int> ticketSortBy, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(double));
    
            var cEUParameter = cEU.HasValue ?
                new ObjectParameter("CEU", cEU) :
                new ObjectParameter("CEU", typeof(double));
    
            var gradParameter = grad.HasValue ?
                new ObjectParameter("Grad", grad) :
                new ObjectParameter("Grad", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var createdIDParameter = createdID.HasValue ?
                new ObjectParameter("CreatedID", createdID) :
                new ObjectParameter("CreatedID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(double));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var repeatTimeParameter = repeatTime.HasValue ?
                new ObjectParameter("RepeatTime", repeatTime) :
                new ObjectParameter("RepeatTime", typeof(int));
    
            var repeatDeadlineParameter = repeatDeadline.HasValue ?
                new ObjectParameter("RepeatDeadline", repeatDeadline) :
                new ObjectParameter("RepeatDeadline", typeof(int));
    
            var isPrivateParameter = isPrivate.HasValue ?
                new ObjectParameter("IsPrivate", isPrivate) :
                new ObjectParameter("IsPrivate", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var beforeDDateReminderParameter = beforeDDateReminder.HasValue ?
                new ObjectParameter("BeforeDDateReminder", beforeDDateReminder) :
                new ObjectParameter("BeforeDDateReminder", typeof(System.DateTime));
    
            var dailyReminderParameter = dailyReminder.HasValue ?
                new ObjectParameter("DailyReminder", dailyReminder) :
                new ObjectParameter("DailyReminder", typeof(int));
    
            var canvasCourseIdParameter = canvasCourseId.HasValue ?
                new ObjectParameter("CanvasCourseId", canvasCourseId) :
                new ObjectParameter("CanvasCourseId", typeof(int));
    
            var divisionIDParameter = divisionID != null ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("TemplateName", templateName) :
                new ObjectParameter("TemplateName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var ticketSortByParameter = ticketSortBy.HasValue ?
                new ObjectParameter("TicketSortBy", ticketSortBy) :
                new ObjectParameter("TicketSortBy", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateUser_Task_Result>("sp_AddUpdateUser_Task", statementTypeParameter, idParameter, isActiveParameter, startDateParameter, endDateParameter, notesParameter, costParameter, cEUParameter, gradParameter, userIDParameter, taskIDParameter, createdIDParameter, statusParameter, hoursParameter, completionDateParameter, fileParameter, repeatTimeParameter, repeatDeadlineParameter, isPrivateParameter, priorityParameter, beforeDDateReminderParameter, dailyReminderParameter, canvasCourseIdParameter, divisionIDParameter, departmentIDParameter, templateNameParameter, parentIDParameter, ticketSortByParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateUser_Worktype_Result> sp_AddUpdateUser_Worktype(string statementType, Nullable<int> id, Nullable<int> userId, Nullable<int> worktypeId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var worktypeIdParameter = worktypeId.HasValue ?
                new ObjectParameter("WorktypeId", worktypeId) :
                new ObjectParameter("WorktypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateUser_Worktype_Result>("sp_AddUpdateUser_Worktype", statementTypeParameter, idParameter, userIdParameter, worktypeIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateUserSecurity_Result> sp_AddUpdateUserSecurity(string statementType, Nullable<int> id, Nullable<int> userId, string question, string answer, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateUserSecurity_Result>("sp_AddUpdateUserSecurity", statementTypeParameter, idParameter, userIdParameter, questionParameter, answerParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual ObjectResult<sp_AddUpdateWorktype_Result> sp_AddUpdateWorktype(string statementType, Nullable<int> id, string name, Nullable<int> addedBy, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> companyID, Nullable<int> divisionID)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddUpdateWorktype_Result>("sp_AddUpdateWorktype", statementTypeParameter, idParameter, nameParameter, addedByParameter, isActiveParameter, createdAtParameter, companyIDParameter, divisionIDParameter);
        }
    
        public virtual int sp_AnswerAddUpdate(string statementType, Nullable<int> id, Nullable<int> optionID, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> questionID)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AnswerAddUpdate", statementTypeParameter, idParameter, optionIDParameter, isActiveParameter, createdAtParameter, questionIDParameter);
        }
    
        public virtual int sp_Attempted_QuizAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<int> course_UserTaskID, Nullable<int> quizID, Nullable<System.DateTime> createdAt, string obtainedmarks, Nullable<int> resultStatus, Nullable<int> attemptsDone)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var course_UserTaskIDParameter = course_UserTaskID.HasValue ?
                new ObjectParameter("Course_UserTaskID", course_UserTaskID) :
                new ObjectParameter("Course_UserTaskID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var obtainedmarksParameter = obtainedmarks != null ?
                new ObjectParameter("Obtainedmarks", obtainedmarks) :
                new ObjectParameter("Obtainedmarks", typeof(string));
    
            var resultStatusParameter = resultStatus.HasValue ?
                new ObjectParameter("ResultStatus", resultStatus) :
                new ObjectParameter("ResultStatus", typeof(int));
    
            var attemptsDoneParameter = attemptsDone.HasValue ?
                new ObjectParameter("AttemptsDone", attemptsDone) :
                new ObjectParameter("AttemptsDone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attempted_QuizAddUpdate", statementTypeParameter, idParameter, isActiveParameter, course_UserTaskIDParameter, quizIDParameter, createdAtParameter, obtainedmarksParameter, resultStatusParameter, attemptsDoneParameter);
        }
    
        public virtual int sp_Course_FileAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<int> courseID, Nullable<System.DateTime> createdAt, Nullable<int> addedBy, string file, string fileName, string fileSize, Nullable<int> quizID, Nullable<int> isScormFile)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var isScormFileParameter = isScormFile.HasValue ?
                new ObjectParameter("IsScormFile", isScormFile) :
                new ObjectParameter("IsScormFile", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Course_FileAddUpdate", statementTypeParameter, idParameter, isActiveParameter, courseIDParameter, createdAtParameter, addedByParameter, fileParameter, fileNameParameter, fileSizeParameter, quizIDParameter, isScormFileParameter);
        }
    
        public virtual int sp_Course_UserTaskAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<int> courseID, Nullable<int> user_TaskID, Nullable<System.DateTime> createdAt, Nullable<int> userId, string totalMarks, Nullable<System.DateTime> completedAt, Nullable<int> resultStatus, Nullable<int> companyID, Nullable<int> isResultUpdated, Nullable<int> resultUpdatedBy, Nullable<int> isLead, Nullable<int> courseGroupStudyId)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var user_TaskIDParameter = user_TaskID.HasValue ?
                new ObjectParameter("User_TaskID", user_TaskID) :
                new ObjectParameter("User_TaskID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var totalMarksParameter = totalMarks != null ?
                new ObjectParameter("TotalMarks", totalMarks) :
                new ObjectParameter("TotalMarks", typeof(string));
    
            var completedAtParameter = completedAt.HasValue ?
                new ObjectParameter("CompletedAt", completedAt) :
                new ObjectParameter("CompletedAt", typeof(System.DateTime));
    
            var resultStatusParameter = resultStatus.HasValue ?
                new ObjectParameter("ResultStatus", resultStatus) :
                new ObjectParameter("ResultStatus", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isResultUpdatedParameter = isResultUpdated.HasValue ?
                new ObjectParameter("IsResultUpdated", isResultUpdated) :
                new ObjectParameter("IsResultUpdated", typeof(int));
    
            var resultUpdatedByParameter = resultUpdatedBy.HasValue ?
                new ObjectParameter("ResultUpdatedBy", resultUpdatedBy) :
                new ObjectParameter("ResultUpdatedBy", typeof(int));
    
            var isLeadParameter = isLead.HasValue ?
                new ObjectParameter("IsLead", isLead) :
                new ObjectParameter("IsLead", typeof(int));
    
            var courseGroupStudyIdParameter = courseGroupStudyId.HasValue ?
                new ObjectParameter("CourseGroupStudyId", courseGroupStudyId) :
                new ObjectParameter("CourseGroupStudyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Course_UserTaskAddUpdate", statementTypeParameter, idParameter, isActiveParameter, courseIDParameter, user_TaskIDParameter, createdAtParameter, userIdParameter, totalMarksParameter, completedAtParameter, resultStatusParameter, companyIDParameter, isResultUpdatedParameter, resultUpdatedByParameter, isLeadParameter, courseGroupStudyIdParameter);
        }
    
        public virtual int sp_CourseAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isPublished, string description, Nullable<int> companyID, Nullable<int> noFile, string fileSize, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> createdBy, Nullable<int> resultAnnoucement, string titleImage, Nullable<int> createCertificate, Nullable<int> isScorm, string scormCourseFile, string signatureImage, string certificateValidity, string citation, string signatureText)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var noFileParameter = noFile.HasValue ?
                new ObjectParameter("NoFile", noFile) :
                new ObjectParameter("NoFile", typeof(int));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var resultAnnoucementParameter = resultAnnoucement.HasValue ?
                new ObjectParameter("ResultAnnoucement", resultAnnoucement) :
                new ObjectParameter("ResultAnnoucement", typeof(int));
    
            var titleImageParameter = titleImage != null ?
                new ObjectParameter("TitleImage", titleImage) :
                new ObjectParameter("TitleImage", typeof(string));
    
            var createCertificateParameter = createCertificate.HasValue ?
                new ObjectParameter("CreateCertificate", createCertificate) :
                new ObjectParameter("CreateCertificate", typeof(int));
    
            var isScormParameter = isScorm.HasValue ?
                new ObjectParameter("IsScorm", isScorm) :
                new ObjectParameter("IsScorm", typeof(int));
    
            var scormCourseFileParameter = scormCourseFile != null ?
                new ObjectParameter("ScormCourseFile", scormCourseFile) :
                new ObjectParameter("ScormCourseFile", typeof(string));
    
            var signatureImageParameter = signatureImage != null ?
                new ObjectParameter("SignatureImage", signatureImage) :
                new ObjectParameter("SignatureImage", typeof(string));
    
            var certificateValidityParameter = certificateValidity != null ?
                new ObjectParameter("CertificateValidity", certificateValidity) :
                new ObjectParameter("CertificateValidity", typeof(string));
    
            var citationParameter = citation != null ?
                new ObjectParameter("Citation", citation) :
                new ObjectParameter("Citation", typeof(string));
    
            var signatureTextParameter = signatureText != null ?
                new ObjectParameter("SignatureText", signatureText) :
                new ObjectParameter("SignatureText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CourseAddUpdate", statementTypeParameter, idParameter, nameParameter, isPublishedParameter, descriptionParameter, companyIDParameter, noFileParameter, fileSizeParameter, isActiveParameter, createdAtParameter, createdByParameter, resultAnnoucementParameter, titleImageParameter, createCertificateParameter, isScormParameter, scormCourseFileParameter, signatureImageParameter, certificateValidityParameter, citationParameter, signatureTextParameter);
        }
    
        public virtual ObjectResult<sp_DelegatFileAddUpdate_Result> sp_DelegatFileAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> sharedWith, Nullable<int> sharedBy, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> isOutside, string shareableLink, Nullable<int> fileVersionId)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var sharedWithParameter = sharedWith.HasValue ?
                new ObjectParameter("SharedWith", sharedWith) :
                new ObjectParameter("SharedWith", typeof(int));
    
            var sharedByParameter = sharedBy.HasValue ?
                new ObjectParameter("SharedBy", sharedBy) :
                new ObjectParameter("SharedBy", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var isOutsideParameter = isOutside.HasValue ?
                new ObjectParameter("IsOutside", isOutside) :
                new ObjectParameter("IsOutside", typeof(int));
    
            var shareableLinkParameter = shareableLink != null ?
                new ObjectParameter("ShareableLink", shareableLink) :
                new ObjectParameter("ShareableLink", typeof(string));
    
            var fileVersionIdParameter = fileVersionId.HasValue ?
                new ObjectParameter("FileVersionId", fileVersionId) :
                new ObjectParameter("FileVersionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DelegatFileAddUpdate_Result>("sp_DelegatFileAddUpdate", statementTypeParameter, idParameter, isActiveParameter, createdAtParameter, sharedWithParameter, sharedByParameter, startTimeParameter, endTimeParameter, isOutsideParameter, shareableLinkParameter, fileVersionIdParameter);
        }
    
        public virtual ObjectResult<File> sp_FileAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<System.DateTime> checkInTime, Nullable<System.DateTime> checkOutTime, Nullable<int> folderId, string filePath, string privacy, Nullable<int> isSigned, string signedImage, Nullable<int> signedBy, Nullable<System.DateTime> archiveDate, Nullable<System.DateTime> uploadingDate, Nullable<System.DateTime> lastModified, Nullable<int> checkIn, string checkInMessage, Nullable<int> checkOut, Nullable<int> checkOutBy, Nullable<int> uploadedBy, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkOutTimeParameter = checkOutTime.HasValue ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(System.DateTime));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSignedParameter = isSigned.HasValue ?
                new ObjectParameter("IsSigned", isSigned) :
                new ObjectParameter("IsSigned", typeof(int));
    
            var signedImageParameter = signedImage != null ?
                new ObjectParameter("SignedImage", signedImage) :
                new ObjectParameter("SignedImage", typeof(string));
    
            var signedByParameter = signedBy.HasValue ?
                new ObjectParameter("SignedBy", signedBy) :
                new ObjectParameter("SignedBy", typeof(int));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var uploadingDateParameter = uploadingDate.HasValue ?
                new ObjectParameter("UploadingDate", uploadingDate) :
                new ObjectParameter("UploadingDate", typeof(System.DateTime));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(int));
    
            var checkInMessageParameter = checkInMessage != null ?
                new ObjectParameter("CheckInMessage", checkInMessage) :
                new ObjectParameter("CheckInMessage", typeof(string));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(int));
    
            var checkOutByParameter = checkOutBy.HasValue ?
                new ObjectParameter("CheckOutBy", checkOutBy) :
                new ObjectParameter("CheckOutBy", typeof(int));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(int));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_FileAddUpdate", statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, checkInTimeParameter, checkOutTimeParameter, folderIdParameter, filePathParameter, privacyParameter, isSignedParameter, signedImageParameter, signedByParameter, archiveDateParameter, uploadingDateParameter, lastModifiedParameter, checkInParameter, checkInMessageParameter, checkOutParameter, checkOutByParameter, uploadedByParameter, archivedDateParameter, archivedByParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<File> sp_FileAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<System.DateTime> checkInTime, Nullable<System.DateTime> checkOutTime, Nullable<int> folderId, string filePath, string privacy, Nullable<int> isSigned, string signedImage, Nullable<int> signedBy, Nullable<System.DateTime> archiveDate, Nullable<System.DateTime> uploadingDate, Nullable<System.DateTime> lastModified, Nullable<int> checkIn, string checkInMessage, Nullable<int> checkOut, Nullable<int> checkOutBy, Nullable<int> uploadedBy, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid, MergeOption mergeOption)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkOutTimeParameter = checkOutTime.HasValue ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(System.DateTime));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSignedParameter = isSigned.HasValue ?
                new ObjectParameter("IsSigned", isSigned) :
                new ObjectParameter("IsSigned", typeof(int));
    
            var signedImageParameter = signedImage != null ?
                new ObjectParameter("SignedImage", signedImage) :
                new ObjectParameter("SignedImage", typeof(string));
    
            var signedByParameter = signedBy.HasValue ?
                new ObjectParameter("SignedBy", signedBy) :
                new ObjectParameter("SignedBy", typeof(int));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var uploadingDateParameter = uploadingDate.HasValue ?
                new ObjectParameter("UploadingDate", uploadingDate) :
                new ObjectParameter("UploadingDate", typeof(System.DateTime));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(int));
    
            var checkInMessageParameter = checkInMessage != null ?
                new ObjectParameter("CheckInMessage", checkInMessage) :
                new ObjectParameter("CheckInMessage", typeof(string));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(int));
    
            var checkOutByParameter = checkOutBy.HasValue ?
                new ObjectParameter("CheckOutBy", checkOutBy) :
                new ObjectParameter("CheckOutBy", typeof(int));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(int));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_FileAddUpdate", mergeOption, statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, checkInTimeParameter, checkOutTimeParameter, folderIdParameter, filePathParameter, privacyParameter, isSignedParameter, signedImageParameter, signedByParameter, archiveDateParameter, uploadingDateParameter, lastModifiedParameter, checkInParameter, checkInMessageParameter, checkOutParameter, checkOutByParameter, uploadedByParameter, archivedDateParameter, archivedByParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<FileLog> sp_FileLogAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> userId, Nullable<int> fileId, string type, Nullable<System.DateTime> logTime, Nullable<int> noOfVersions, Nullable<int> role)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var logTimeParameter = logTime.HasValue ?
                new ObjectParameter("LogTime", logTime) :
                new ObjectParameter("LogTime", typeof(System.DateTime));
    
            var noOfVersionsParameter = noOfVersions.HasValue ?
                new ObjectParameter("NoOfVersions", noOfVersions) :
                new ObjectParameter("NoOfVersions", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileLog>("sp_FileLogAddUpdate", statementTypeParameter, idParameter, isActiveParameter, createdAtParameter, userIdParameter, fileIdParameter, typeParameter, logTimeParameter, noOfVersionsParameter, roleParameter);
        }
    
        public virtual ObjectResult<FileLog> sp_FileLogAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> userId, Nullable<int> fileId, string type, Nullable<System.DateTime> logTime, Nullable<int> noOfVersions, Nullable<int> role, MergeOption mergeOption)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var logTimeParameter = logTime.HasValue ?
                new ObjectParameter("LogTime", logTime) :
                new ObjectParameter("LogTime", typeof(System.DateTime));
    
            var noOfVersionsParameter = noOfVersions.HasValue ?
                new ObjectParameter("NoOfVersions", noOfVersions) :
                new ObjectParameter("NoOfVersions", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileLog>("sp_FileLogAddUpdate", mergeOption, statementTypeParameter, idParameter, isActiveParameter, createdAtParameter, userIdParameter, fileIdParameter, typeParameter, logTimeParameter, noOfVersionsParameter, roleParameter);
        }
    
        public virtual ObjectResult<FileVersion> sp_FileVersionAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<System.DateTime> checkInTime, Nullable<System.DateTime> checkOutTime, Nullable<int> folderId, string filePath, string privacy, Nullable<int> isSigned, string signedImage, Nullable<int> signedBy, Nullable<System.DateTime> archiveDate, Nullable<System.DateTime> uploadingDate, Nullable<System.DateTime> lastModified, Nullable<int> checkIn, string checkInMessage, Nullable<int> checkOut, Nullable<int> checkOutBy, Nullable<int> uploadedBy, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> versionNo, Nullable<int> fileId, Nullable<int> currentVersion, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkOutTimeParameter = checkOutTime.HasValue ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(System.DateTime));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSignedParameter = isSigned.HasValue ?
                new ObjectParameter("IsSigned", isSigned) :
                new ObjectParameter("IsSigned", typeof(int));
    
            var signedImageParameter = signedImage != null ?
                new ObjectParameter("SignedImage", signedImage) :
                new ObjectParameter("SignedImage", typeof(string));
    
            var signedByParameter = signedBy.HasValue ?
                new ObjectParameter("SignedBy", signedBy) :
                new ObjectParameter("SignedBy", typeof(int));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var uploadingDateParameter = uploadingDate.HasValue ?
                new ObjectParameter("UploadingDate", uploadingDate) :
                new ObjectParameter("UploadingDate", typeof(System.DateTime));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(int));
    
            var checkInMessageParameter = checkInMessage != null ?
                new ObjectParameter("CheckInMessage", checkInMessage) :
                new ObjectParameter("CheckInMessage", typeof(string));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(int));
    
            var checkOutByParameter = checkOutBy.HasValue ?
                new ObjectParameter("CheckOutBy", checkOutBy) :
                new ObjectParameter("CheckOutBy", typeof(int));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(int));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var versionNoParameter = versionNo.HasValue ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var currentVersionParameter = currentVersion.HasValue ?
                new ObjectParameter("CurrentVersion", currentVersion) :
                new ObjectParameter("CurrentVersion", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_FileVersionAddUpdate", statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, checkInTimeParameter, checkOutTimeParameter, folderIdParameter, filePathParameter, privacyParameter, isSignedParameter, signedImageParameter, signedByParameter, archiveDateParameter, uploadingDateParameter, lastModifiedParameter, checkInParameter, checkInMessageParameter, checkOutParameter, checkOutByParameter, uploadedByParameter, archivedDateParameter, archivedByParameter, versionNoParameter, fileIdParameter, currentVersionParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<FileVersion> sp_FileVersionAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<System.DateTime> checkInTime, Nullable<System.DateTime> checkOutTime, Nullable<int> folderId, string filePath, string privacy, Nullable<int> isSigned, string signedImage, Nullable<int> signedBy, Nullable<System.DateTime> archiveDate, Nullable<System.DateTime> uploadingDate, Nullable<System.DateTime> lastModified, Nullable<int> checkIn, string checkInMessage, Nullable<int> checkOut, Nullable<int> checkOutBy, Nullable<int> uploadedBy, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> versionNo, Nullable<int> fileId, Nullable<int> currentVersion, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid, MergeOption mergeOption)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime.HasValue ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(System.DateTime));
    
            var checkOutTimeParameter = checkOutTime.HasValue ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(System.DateTime));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSignedParameter = isSigned.HasValue ?
                new ObjectParameter("IsSigned", isSigned) :
                new ObjectParameter("IsSigned", typeof(int));
    
            var signedImageParameter = signedImage != null ?
                new ObjectParameter("SignedImage", signedImage) :
                new ObjectParameter("SignedImage", typeof(string));
    
            var signedByParameter = signedBy.HasValue ?
                new ObjectParameter("SignedBy", signedBy) :
                new ObjectParameter("SignedBy", typeof(int));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var uploadingDateParameter = uploadingDate.HasValue ?
                new ObjectParameter("UploadingDate", uploadingDate) :
                new ObjectParameter("UploadingDate", typeof(System.DateTime));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(int));
    
            var checkInMessageParameter = checkInMessage != null ?
                new ObjectParameter("CheckInMessage", checkInMessage) :
                new ObjectParameter("CheckInMessage", typeof(string));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(int));
    
            var checkOutByParameter = checkOutBy.HasValue ?
                new ObjectParameter("CheckOutBy", checkOutBy) :
                new ObjectParameter("CheckOutBy", typeof(int));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(int));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var versionNoParameter = versionNo.HasValue ?
                new ObjectParameter("VersionNo", versionNo) :
                new ObjectParameter("VersionNo", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var currentVersionParameter = currentVersion.HasValue ?
                new ObjectParameter("CurrentVersion", currentVersion) :
                new ObjectParameter("CurrentVersion", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_FileVersionAddUpdate", mergeOption, statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, checkInTimeParameter, checkOutTimeParameter, folderIdParameter, filePathParameter, privacyParameter, isSignedParameter, signedImageParameter, signedByParameter, archiveDateParameter, uploadingDateParameter, lastModifiedParameter, checkInParameter, checkInMessageParameter, checkOutParameter, checkOutByParameter, uploadedByParameter, archivedDateParameter, archivedByParameter, versionNoParameter, fileIdParameter, currentVersionParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<sp_FolderAccessAddUpdate_Result> sp_FolderAccessAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> sharedWith, Nullable<int> sharedBy, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> isOutside, string shareableLink, Nullable<int> accessLevel, Nullable<int> role, Nullable<int> folderId)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var sharedWithParameter = sharedWith.HasValue ?
                new ObjectParameter("SharedWith", sharedWith) :
                new ObjectParameter("SharedWith", typeof(int));
    
            var sharedByParameter = sharedBy.HasValue ?
                new ObjectParameter("SharedBy", sharedBy) :
                new ObjectParameter("SharedBy", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var isOutsideParameter = isOutside.HasValue ?
                new ObjectParameter("IsOutside", isOutside) :
                new ObjectParameter("IsOutside", typeof(int));
    
            var shareableLinkParameter = shareableLink != null ?
                new ObjectParameter("ShareableLink", shareableLink) :
                new ObjectParameter("ShareableLink", typeof(string));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FolderAccessAddUpdate_Result>("sp_FolderAccessAddUpdate", statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, sharedWithParameter, sharedByParameter, startTimeParameter, endTimeParameter, isOutsideParameter, shareableLinkParameter, accessLevelParameter, roleParameter, folderIdParameter);
        }
    
        public virtual ObjectResult<Folder> sp_FolderAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> userId, string folderPath, Nullable<System.DateTime> archiveDate, string privacy, Nullable<int> isSharedRoot, Nullable<int> parentId, Nullable<System.DateTime> lastModified, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSharedRootParameter = isSharedRoot.HasValue ?
                new ObjectParameter("IsSharedRoot", isSharedRoot) :
                new ObjectParameter("IsSharedRoot", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_FolderAddUpdate", statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, userIdParameter, folderPathParameter, archiveDateParameter, privacyParameter, isSharedRootParameter, parentIdParameter, lastModifiedParameter, archivedDateParameter, archivedByParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<Folder> sp_FolderAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> userId, string folderPath, Nullable<System.DateTime> archiveDate, string privacy, Nullable<int> isSharedRoot, Nullable<int> parentId, Nullable<System.DateTime> lastModified, Nullable<System.DateTime> archivedDate, Nullable<int> archivedBy, Nullable<int> companyid, Nullable<int> divisionid, Nullable<int> departmentid, MergeOption mergeOption)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            var privacyParameter = privacy != null ?
                new ObjectParameter("Privacy", privacy) :
                new ObjectParameter("Privacy", typeof(string));
    
            var isSharedRootParameter = isSharedRoot.HasValue ?
                new ObjectParameter("IsSharedRoot", isSharedRoot) :
                new ObjectParameter("IsSharedRoot", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var lastModifiedParameter = lastModified.HasValue ?
                new ObjectParameter("LastModified", lastModified) :
                new ObjectParameter("LastModified", typeof(System.DateTime));
    
            var archivedDateParameter = archivedDate.HasValue ?
                new ObjectParameter("ArchivedDate", archivedDate) :
                new ObjectParameter("ArchivedDate", typeof(System.DateTime));
    
            var archivedByParameter = archivedBy.HasValue ?
                new ObjectParameter("ArchivedBy", archivedBy) :
                new ObjectParameter("ArchivedBy", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var divisionidParameter = divisionid.HasValue ?
                new ObjectParameter("divisionid", divisionid) :
                new ObjectParameter("divisionid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_FolderAddUpdate", mergeOption, statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, userIdParameter, folderPathParameter, archiveDateParameter, privacyParameter, isSharedRootParameter, parentIdParameter, lastModifiedParameter, archivedDateParameter, archivedByParameter, companyidParameter, divisionidParameter, departmentidParameter);
        }
    
        public virtual ObjectResult<sp_GetAnswerById_Result> sp_GetAnswerById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAnswerById_Result>("sp_GetAnswerById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetAnswers_Result> sp_GetAnswers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAnswers_Result>("sp_GetAnswers");
        }
    
        public virtual ObjectResult<sp_GetArchivedDelegateFiles_Result> sp_GetArchivedDelegateFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedDelegateFiles_Result>("sp_GetArchivedDelegateFiles");
        }
    
        public virtual ObjectResult<sp_GetArchivedFileLogs_Result> sp_GetArchivedFileLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedFileLogs_Result>("sp_GetArchivedFileLogs");
        }
    
        public virtual ObjectResult<sp_GetArchivedFiles_Result> sp_GetArchivedFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedFiles_Result>("sp_GetArchivedFiles");
        }
    
        public virtual ObjectResult<sp_GetArchivedFileVersions_Result> sp_GetArchivedFileVersions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedFileVersions_Result>("sp_GetArchivedFileVersions");
        }
    
        public virtual ObjectResult<sp_GetArchivedFolderAccesses_Result> sp_GetArchivedFolderAccesses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedFolderAccesses_Result>("sp_GetArchivedFolderAccesses");
        }
    
        public virtual ObjectResult<sp_GetArchivedFolders_Result> sp_GetArchivedFolders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetArchivedFolders_Result>("sp_GetArchivedFolders");
        }
    
        public virtual ObjectResult<sp_GetAttempted_QuizById_Result> sp_GetAttempted_QuizById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttempted_QuizById_Result>("sp_GetAttempted_QuizById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetAttempted_Quizes_Result> sp_GetAttempted_Quizes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttempted_Quizes_Result>("sp_GetAttempted_Quizes");
        }
    
        public virtual ObjectResult<Certificate> sp_GetCertificateById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Certificate>("sp_GetCertificateById", idParameter);
        }
    
        public virtual ObjectResult<Certificate> sp_GetCertificateById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Certificate>("sp_GetCertificateById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Certificate> sp_GetCertificates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Certificate>("sp_GetCertificates");
        }
    
        public virtual ObjectResult<Certificate> sp_GetCertificates(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Certificate>("sp_GetCertificates", mergeOption);
        }
    
        public virtual ObjectResult<sp_GetCompanies_Result> sp_GetCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanies_Result>("sp_GetCompanies");
        }
    
        public virtual ObjectResult<sp_GetCompanyById_Result> sp_GetCompanyById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanyById_Result>("sp_GetCompanyById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetContactById_Result> sp_GetContactById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetContactById_Result>("sp_GetContactById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetContacts_Result> sp_GetContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetContacts_Result>("sp_GetContacts");
        }
    
        public virtual ObjectResult<sp_GetCourse_FileById_Result> sp_GetCourse_FileById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourse_FileById_Result>("sp_GetCourse_FileById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetCourse_Files_Result> sp_GetCourse_Files()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourse_Files_Result>("sp_GetCourse_Files");
        }
    
        public virtual ObjectResult<Course_UserTask> sp_GetCourse_UserTaskById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course_UserTask>("sp_GetCourse_UserTaskById", idParameter);
        }
    
        public virtual ObjectResult<Course_UserTask> sp_GetCourse_UserTaskById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course_UserTask>("sp_GetCourse_UserTaskById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Course_UserTask> sp_GetCourse_UserTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course_UserTask>("sp_GetCourse_UserTasks");
        }
    
        public virtual ObjectResult<Course_UserTask> sp_GetCourse_UserTasks(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course_UserTask>("sp_GetCourse_UserTasks", mergeOption);
        }
    
        public virtual ObjectResult<Course> sp_GetCourseById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCourseById", idParameter);
        }
    
        public virtual ObjectResult<Course> sp_GetCourseById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCourseById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Course> sp_GetCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCourses");
        }
    
        public virtual ObjectResult<Course> sp_GetCourses(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCourses", mergeOption);
        }
    
        public virtual ObjectResult<sp_GetDelegateFileById_Result> sp_GetDelegateFileById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDelegateFileById_Result>("sp_GetDelegateFileById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetDelegateFiles_Result> sp_GetDelegateFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDelegateFiles_Result>("sp_GetDelegateFiles");
        }
    
        public virtual ObjectResult<sp_GetDepartmentById_Result> sp_GetDepartmentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDepartmentById_Result>("sp_GetDepartmentById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetDepartments_Result> sp_GetDepartments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDepartments_Result>("sp_GetDepartments");
        }
    
        public virtual ObjectResult<sp_GetDivisionById_Result> sp_GetDivisionById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDivisionById_Result>("sp_GetDivisionById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetDivisions_Result> sp_GetDivisions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDivisions_Result>("sp_GetDivisions");
        }
    
        public virtual ObjectResult<sp_GetExtensionRequestById_Result> sp_GetExtensionRequestById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetExtensionRequestById_Result>("sp_GetExtensionRequestById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetExtensionRequests_Result> sp_GetExtensionRequests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetExtensionRequests_Result>("sp_GetExtensionRequests");
        }
    
        public virtual ObjectResult<sp_GetFavoriteReportById_Result> sp_GetFavoriteReportById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFavoriteReportById_Result>("sp_GetFavoriteReportById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetFavoriteReports_Result> sp_GetFavoriteReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFavoriteReports_Result>("sp_GetFavoriteReports");
        }
    
        public virtual ObjectResult<File> sp_GetFileById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFileById", idParameter);
        }
    
        public virtual ObjectResult<File> sp_GetFileById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFileById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<sp_GetFileLogById_Result> sp_GetFileLogById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFileLogById_Result>("sp_GetFileLogById", idParameter);
        }
    
        public virtual ObjectResult<File> sp_GetFileLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFileLogs");
        }
    
        public virtual ObjectResult<File> sp_GetFileLogs(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFileLogs", mergeOption);
        }
    
        public virtual ObjectResult<File> sp_GetFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFiles");
        }
    
        public virtual ObjectResult<File> sp_GetFiles(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<File>("sp_GetFiles", mergeOption);
        }
    
        public virtual ObjectResult<FileVersion> sp_GetFileVersionById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_GetFileVersionById", idParameter);
        }
    
        public virtual ObjectResult<FileVersion> sp_GetFileVersionById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_GetFileVersionById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<FileVersion> sp_GetFileVersions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_GetFileVersions");
        }
    
        public virtual ObjectResult<FileVersion> sp_GetFileVersions(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FileVersion>("sp_GetFileVersions", mergeOption);
        }
    
        public virtual ObjectResult<sp_GetFolderAccessById_Result> sp_GetFolderAccessById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFolderAccessById_Result>("sp_GetFolderAccessById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetFolderAccesses_Result> sp_GetFolderAccesses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFolderAccesses_Result>("sp_GetFolderAccesses");
        }
    
        public virtual ObjectResult<Folder> sp_GetFolderById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_GetFolderById", idParameter);
        }
    
        public virtual ObjectResult<Folder> sp_GetFolderById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_GetFolderById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Folder> sp_GetFolders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_GetFolders");
        }
    
        public virtual ObjectResult<Folder> sp_GetFolders(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Folder>("sp_GetFolders", mergeOption);
        }
    
        public virtual ObjectResult<sp_GetGroupTask_TaskById_Result> sp_GetGroupTask_TaskById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_TaskById_Result>("sp_GetGroupTask_TaskById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTask_Tasks_Result> sp_GetGroupTask_Tasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_Tasks_Result>("sp_GetGroupTask_Tasks");
        }
    
        public virtual ObjectResult<sp_GetGroupTask_TicketById_Result> sp_GetGroupTask_TicketById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_TicketById_Result>("sp_GetGroupTask_TicketById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTask_Tickets_Result> sp_GetGroupTask_Tickets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_Tickets_Result>("sp_GetGroupTask_Tickets");
        }
    
        public virtual ObjectResult<sp_GetGroupTask_UserById_Result> sp_GetGroupTask_UserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_UserById_Result>("sp_GetGroupTask_UserById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTask_Users_Result> sp_GetGroupTask_Users()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTask_Users_Result>("sp_GetGroupTask_Users");
        }
    
        public virtual ObjectResult<sp_GetGroupTaskById_Result> sp_GetGroupTaskById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTaskById_Result>("sp_GetGroupTaskById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTaskCommentById_Result> sp_GetGroupTaskCommentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTaskCommentById_Result>("sp_GetGroupTaskCommentById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTaskComments_Result> sp_GetGroupTaskComments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTaskComments_Result>("sp_GetGroupTaskComments");
        }
    
        public virtual ObjectResult<sp_GetGroupTaskReminderById_Result> sp_GetGroupTaskReminderById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTaskReminderById_Result>("sp_GetGroupTaskReminderById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTaskReminders_Result> sp_GetGroupTaskReminders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTaskReminders_Result>("sp_GetGroupTaskReminders");
        }
    
        public virtual ObjectResult<sp_GetGroupTasks_Result> sp_GetGroupTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTasks_Result>("sp_GetGroupTasks");
        }
    
        public virtual ObjectResult<sp_GetGroupTasks_DetailById_Result> sp_GetGroupTasks_DetailById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTasks_DetailById_Result>("sp_GetGroupTasks_DetailById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetGroupTasks_Details_Result> sp_GetGroupTasks_Details()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGroupTasks_Details_Result>("sp_GetGroupTasks_Details");
        }
    
        public virtual ObjectResult<sp_GetMeetingById_Result> sp_GetMeetingById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMeetingById_Result>("sp_GetMeetingById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetMeetings_Result> sp_GetMeetings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMeetings_Result>("sp_GetMeetings");
        }
    
        public virtual ObjectResult<sp_GetOldPasswordById_Result> sp_GetOldPasswordById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOldPasswordById_Result>("sp_GetOldPasswordById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetOldPasswords_Result> sp_GetOldPasswords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOldPasswords_Result>("sp_GetOldPasswords");
        }
    
        public virtual ObjectResult<sp_GetOptionById_Result> sp_GetOptionById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOptionById_Result>("sp_GetOptionById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetOptions_Result> sp_GetOptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOptions_Result>("sp_GetOptions");
        }
    
        public virtual ObjectResult<sp_GetQuestion_FileById_Result> sp_GetQuestion_FileById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestion_FileById_Result>("sp_GetQuestion_FileById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetQuestion_Files_Result> sp_GetQuestion_Files()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestion_Files_Result>("sp_GetQuestion_Files");
        }
    
        public virtual ObjectResult<sp_GetQuestionById_Result> sp_GetQuestionById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestionById_Result>("sp_GetQuestionById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetQuestions_Result> sp_GetQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestions_Result>("sp_GetQuestions");
        }
    
        public virtual ObjectResult<sp_GetQuiz_ResultById_Result> sp_GetQuiz_ResultById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuiz_ResultById_Result>("sp_GetQuiz_ResultById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetQuiz_Results_Result> sp_GetQuiz_Results()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuiz_Results_Result>("sp_GetQuiz_Results");
        }
    
        public virtual ObjectResult<sp_GetQuizById_Result> sp_GetQuizById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuizById_Result>("sp_GetQuizById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetQuizes_Result> sp_GetQuizes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuizes_Result>("sp_GetQuizes");
        }
    
        public virtual ObjectResult<sp_GetSuperAdminById_Result> sp_GetSuperAdminById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuperAdminById_Result>("sp_GetSuperAdminById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetSuperAdmins_Result> sp_GetSuperAdmins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuperAdmins_Result>("sp_GetSuperAdmins");
        }
    
        public virtual ObjectResult<sp_GetTagById_Result> sp_GetTagById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTagById_Result>("sp_GetTagById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTags_Result> sp_GetTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTags_Result>("sp_GetTags");
        }
    
        public virtual ObjectResult<sp_GetTask_TicketById_Result> sp_GetTask_TicketById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTask_TicketById_Result>("sp_GetTask_TicketById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTask_Tickets_Result> sp_GetTask_Tickets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTask_Tickets_Result>("sp_GetTask_Tickets");
        }
    
        public virtual ObjectResult<sp_GetTaskById_Result> sp_GetTaskById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskById_Result>("sp_GetTaskById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskCommentById_Result> sp_GetTaskCommentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskCommentById_Result>("sp_GetTaskCommentById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskComments_Result> sp_GetTaskComments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskComments_Result>("sp_GetTaskComments");
        }
    
        public virtual ObjectResult<sp_GetTaskFileById_Result> sp_GetTaskFileById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskFileById_Result>("sp_GetTaskFileById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskFiles_Result> sp_GetTaskFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskFiles_Result>("sp_GetTaskFiles");
        }
    
        public virtual ObjectResult<sp_GetTasks_Result> sp_GetTasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTasks_Result>("sp_GetTasks");
        }
    
        public virtual ObjectResult<sp_GetTaskTagById_Result> sp_GetTaskTagById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskTagById_Result>("sp_GetTaskTagById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskTags_Result> sp_GetTaskTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskTags_Result>("sp_GetTaskTags");
        }
    
        public virtual ObjectResult<sp_GetTaskTypeById_Result> sp_GetTaskTypeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskTypeById_Result>("sp_GetTaskTypeById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskTypes_Result> sp_GetTaskTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskTypes_Result>("sp_GetTaskTypes");
        }
    
        public virtual ObjectResult<sp_GetUser_Meeting_Result> sp_GetUser_Meeting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_Meeting_Result>("sp_GetUser_Meeting");
        }
    
        public virtual ObjectResult<sp_GetUser_MeetingById_Result> sp_GetUser_MeetingById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_MeetingById_Result>("sp_GetUser_MeetingById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetUser_TaskById_Result> sp_GetUser_TaskById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_TaskById_Result>("sp_GetUser_TaskById", idParameter);
        }
    
        public virtual ObjectResult<User_Task> sp_GetUser_Tasks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("sp_GetUser_Tasks");
        }
    
        public virtual ObjectResult<User_Task> sp_GetUser_Tasks(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("sp_GetUser_Tasks", mergeOption);
        }
    
        public virtual ObjectResult<sp_GetUser_WorktypeById_Result> sp_GetUser_WorktypeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_WorktypeById_Result>("sp_GetUser_WorktypeById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetUser_Worktypes_Result> sp_GetUser_Worktypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_Worktypes_Result>("sp_GetUser_Worktypes");
        }
    
        public virtual ObjectResult<sp_GetUserById_Result> sp_GetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserById_Result>("sp_GetUserById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetUsers_Result> sp_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUsers_Result>("sp_GetUsers");
        }
    
        public virtual ObjectResult<sp_GetUserSecurities_Result> sp_GetUserSecurities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserSecurities_Result>("sp_GetUserSecurities");
        }
    
        public virtual ObjectResult<sp_GetUserSecurityById_Result> sp_GetUserSecurityById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserSecurityById_Result>("sp_GetUserSecurityById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetUserTask_QuizResultById_Result> sp_GetUserTask_QuizResultById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserTask_QuizResultById_Result>("sp_GetUserTask_QuizResultById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetUserTask_QuizResults_Result> sp_GetUserTask_QuizResults()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserTask_QuizResults_Result>("sp_GetUserTask_QuizResults");
        }
    
        public virtual ObjectResult<sp_GetWorktypeById_Result> sp_GetWorktypeById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorktypeById_Result>("sp_GetWorktypeById", idParameter);
        }
    
        public virtual ObjectResult<sp_GetWorktypes_Result> sp_GetWorktypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorktypes_Result>("sp_GetWorktypes");
        }
    
        public virtual ObjectResult<sp_MeetingAddUpdate_Result> sp_MeetingAddUpdate(string statementType, Nullable<int> id, Nullable<int> course_UserTaskId, Nullable<int> userTaskId, Nullable<int> meetingType, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> hostId, string roomName, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> isCanceled, Nullable<int> isCompleted, Nullable<System.DateTime> completionTime, string description)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var course_UserTaskIdParameter = course_UserTaskId.HasValue ?
                new ObjectParameter("Course_UserTaskId", course_UserTaskId) :
                new ObjectParameter("Course_UserTaskId", typeof(int));
    
            var userTaskIdParameter = userTaskId.HasValue ?
                new ObjectParameter("UserTaskId", userTaskId) :
                new ObjectParameter("UserTaskId", typeof(int));
    
            var meetingTypeParameter = meetingType.HasValue ?
                new ObjectParameter("MeetingType", meetingType) :
                new ObjectParameter("MeetingType", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var hostIdParameter = hostId.HasValue ?
                new ObjectParameter("HostId", hostId) :
                new ObjectParameter("HostId", typeof(int));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var isCanceledParameter = isCanceled.HasValue ?
                new ObjectParameter("IsCanceled", isCanceled) :
                new ObjectParameter("IsCanceled", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(int));
    
            var completionTimeParameter = completionTime.HasValue ?
                new ObjectParameter("CompletionTime", completionTime) :
                new ObjectParameter("CompletionTime", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MeetingAddUpdate_Result>("sp_MeetingAddUpdate", statementTypeParameter, idParameter, course_UserTaskIdParameter, userTaskIdParameter, meetingTypeParameter, isActiveParameter, createdAtParameter, hostIdParameter, roomNameParameter, startTimeParameter, endTimeParameter, isCanceledParameter, isCompletedParameter, completionTimeParameter, descriptionParameter);
        }
    
        public virtual int sp_OptionAddUpdate(string statementType, Nullable<int> id, string name, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> questionID)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OptionAddUpdate", statementTypeParameter, idParameter, nameParameter, isActiveParameter, createdAtParameter, questionIDParameter);
        }
    
        public virtual int sp_Question_FileAddUpdate(string statementType, Nullable<int> id, string file, string fileName, string fileSize, Nullable<int> questionID, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Question_FileAddUpdate", statementTypeParameter, idParameter, fileParameter, fileNameParameter, fileSizeParameter, questionIDParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual int sp_QuestionAddUpdate(string statementType, Nullable<int> id, string description, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> quizID, Nullable<int> optionCount, Nullable<int> marks)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var optionCountParameter = optionCount.HasValue ?
                new ObjectParameter("OptionCount", optionCount) :
                new ObjectParameter("OptionCount", typeof(int));
    
            var marksParameter = marks.HasValue ?
                new ObjectParameter("Marks", marks) :
                new ObjectParameter("Marks", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_QuestionAddUpdate", statementTypeParameter, idParameter, descriptionParameter, isActiveParameter, createdAtParameter, quizIDParameter, optionCountParameter, marksParameter);
        }
    
        public virtual int sp_Quiz_ResultAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<int> course_UserTaskID, Nullable<int> questionID, Nullable<int> optionID, Nullable<System.DateTime> submittedAt, Nullable<System.DateTime> createdAt, Nullable<int> submittedBy, Nullable<int> status)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var course_UserTaskIDParameter = course_UserTaskID.HasValue ?
                new ObjectParameter("Course_UserTaskID", course_UserTaskID) :
                new ObjectParameter("Course_UserTaskID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var submittedAtParameter = submittedAt.HasValue ?
                new ObjectParameter("SubmittedAt", submittedAt) :
                new ObjectParameter("SubmittedAt", typeof(System.DateTime));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Quiz_ResultAddUpdate", statementTypeParameter, idParameter, isActiveParameter, course_UserTaskIDParameter, questionIDParameter, optionIDParameter, submittedAtParameter, createdAtParameter, submittedByParameter, statusParameter);
        }
    
        public virtual int sp_QuizAddUpdateDelete(string statementType, Nullable<int> id, string name, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> timer, string marks, Nullable<int> timeLimit, Nullable<int> isActive, Nullable<System.DateTime> createdAt, Nullable<int> createdBy, Nullable<int> isPublished, Nullable<int> publishedBy, Nullable<int> courseID, string instructions, Nullable<int> attempts, Nullable<int> showResult, Nullable<int> passingMarks)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var timerParameter = timer.HasValue ?
                new ObjectParameter("Timer", timer) :
                new ObjectParameter("Timer", typeof(int));
    
            var marksParameter = marks != null ?
                new ObjectParameter("Marks", marks) :
                new ObjectParameter("Marks", typeof(string));
    
            var timeLimitParameter = timeLimit.HasValue ?
                new ObjectParameter("TimeLimit", timeLimit) :
                new ObjectParameter("TimeLimit", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(int));
    
            var publishedByParameter = publishedBy.HasValue ?
                new ObjectParameter("PublishedBy", publishedBy) :
                new ObjectParameter("PublishedBy", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("Instructions", instructions) :
                new ObjectParameter("Instructions", typeof(string));
    
            var attemptsParameter = attempts.HasValue ?
                new ObjectParameter("Attempts", attempts) :
                new ObjectParameter("Attempts", typeof(int));
    
            var showResultParameter = showResult.HasValue ?
                new ObjectParameter("ShowResult", showResult) :
                new ObjectParameter("ShowResult", typeof(int));
    
            var passingMarksParameter = passingMarks.HasValue ?
                new ObjectParameter("PassingMarks", passingMarks) :
                new ObjectParameter("PassingMarks", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_QuizAddUpdateDelete", statementTypeParameter, idParameter, nameParameter, descriptionParameter, startDateParameter, endDateParameter, timerParameter, marksParameter, timeLimitParameter, isActiveParameter, createdAtParameter, createdByParameter, isPublishedParameter, publishedByParameter, courseIDParameter, instructionsParameter, attemptsParameter, showResultParameter, passingMarksParameter);
        }
    
        public virtual ObjectResult<sp_User_MeetingAddUpdate_Result> sp_User_MeetingAddUpdate(string statementType, Nullable<int> id, Nullable<int> participantId, Nullable<int> meetingId, Nullable<int> isActive, Nullable<System.DateTime> createdAt)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(int));
    
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("MeetingId", meetingId) :
                new ObjectParameter("MeetingId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_User_MeetingAddUpdate_Result>("sp_User_MeetingAddUpdate", statementTypeParameter, idParameter, participantIdParameter, meetingIdParameter, isActiveParameter, createdAtParameter);
        }
    
        public virtual int sp_UserTask_QuizResultAddUpdate(string statementType, Nullable<int> id, Nullable<int> isActive, Nullable<int> course_UserTaskID, Nullable<int> quizID, Nullable<System.DateTime> createdAt, Nullable<System.DateTime> startedAt, string obtainedmarks, Nullable<System.DateTime> completedAt, Nullable<int> publishedBy, Nullable<int> isPublished, Nullable<int> resultStatus)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var course_UserTaskIDParameter = course_UserTaskID.HasValue ?
                new ObjectParameter("Course_UserTaskID", course_UserTaskID) :
                new ObjectParameter("Course_UserTaskID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var startedAtParameter = startedAt.HasValue ?
                new ObjectParameter("StartedAt", startedAt) :
                new ObjectParameter("StartedAt", typeof(System.DateTime));
    
            var obtainedmarksParameter = obtainedmarks != null ?
                new ObjectParameter("Obtainedmarks", obtainedmarks) :
                new ObjectParameter("Obtainedmarks", typeof(string));
    
            var completedAtParameter = completedAt.HasValue ?
                new ObjectParameter("CompletedAt", completedAt) :
                new ObjectParameter("CompletedAt", typeof(System.DateTime));
    
            var publishedByParameter = publishedBy.HasValue ?
                new ObjectParameter("PublishedBy", publishedBy) :
                new ObjectParameter("PublishedBy", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(int));
    
            var resultStatusParameter = resultStatus.HasValue ?
                new ObjectParameter("ResultStatus", resultStatus) :
                new ObjectParameter("ResultStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserTask_QuizResultAddUpdate", statementTypeParameter, idParameter, isActiveParameter, course_UserTaskIDParameter, quizIDParameter, createdAtParameter, startedAtParameter, obtainedmarksParameter, completedAtParameter, publishedByParameter, isPublishedParameter, resultStatusParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUser_Tasks(Nullable<int> role, Nullable<int> companyId)
        {
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUser_Tasks", roleParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUser_Tasks(Nullable<int> role, Nullable<int> companyId, MergeOption mergeOption)
        {
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUser_Tasks", mergeOption, roleParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetUser_TasksCount(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetUser_TasksCount", companyIdParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasks(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasks", companyIdParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasks(Nullable<int> companyId, MergeOption mergeOption)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasks", mergeOption, companyIdParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasksByDate(Nullable<int> companyId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasksByDate", companyIdParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasksByDate(Nullable<int> companyId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, MergeOption mergeOption)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasksByDate", mergeOption, companyIdParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasksByRoleAndDate(Nullable<int> role, Nullable<int> companyId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasksByRoleAndDate", roleParameter, companyIdParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<User_Task> spGetUserTasksByRoleAndDate(Nullable<int> role, Nullable<int> companyId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, MergeOption mergeOption)
        {
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Task>("spGetUserTasksByRoleAndDate", mergeOption, roleParameter, companyIdParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int UpdateGroupTaskDetails(Nullable<int> id, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGroupTaskDetails", idParameter, statusParameter);
        }
    
        public virtual int UpdateUserTask(Nullable<int> id, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserTask", idParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetUser_TasksCount1(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetUser_TasksCount1", companyIdParameter);
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_CourseGroupStudyAddUpdate(string statementType, Nullable<int> id, string name, string description, Nullable<int> courseID, Nullable<int> user_TaskId, Nullable<int> leadBy, Nullable<int> status, Nullable<int> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdAt, Nullable<int> companyId)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var user_TaskIdParameter = user_TaskId.HasValue ?
                new ObjectParameter("User_TaskId", user_TaskId) :
                new ObjectParameter("User_TaskId", typeof(int));
    
            var leadByParameter = leadBy.HasValue ?
                new ObjectParameter("LeadBy", leadBy) :
                new ObjectParameter("LeadBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_CourseGroupStudyAddUpdate", statementTypeParameter, idParameter, nameParameter, descriptionParameter, courseIDParameter, user_TaskIdParameter, leadByParameter, statusParameter, isActiveParameter, createdByParameter, createdAtParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_CourseGroupStudyAddUpdate(string statementType, Nullable<int> id, string name, string description, Nullable<int> courseID, Nullable<int> user_TaskId, Nullable<int> leadBy, Nullable<int> status, Nullable<int> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdAt, Nullable<int> companyId, MergeOption mergeOption)
        {
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var user_TaskIdParameter = user_TaskId.HasValue ?
                new ObjectParameter("User_TaskId", user_TaskId) :
                new ObjectParameter("User_TaskId", typeof(int));
    
            var leadByParameter = leadBy.HasValue ?
                new ObjectParameter("LeadBy", leadBy) :
                new ObjectParameter("LeadBy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdAtParameter = createdAt.HasValue ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_CourseGroupStudyAddUpdate", mergeOption, statementTypeParameter, idParameter, nameParameter, descriptionParameter, courseIDParameter, user_TaskIdParameter, leadByParameter, statusParameter, isActiveParameter, createdByParameter, createdAtParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_GetCourseGroupStudies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_GetCourseGroupStudies");
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_GetCourseGroupStudies(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_GetCourseGroupStudies", mergeOption);
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_GetCourseGroupStudyById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_GetCourseGroupStudyById", idParameter);
        }
    
        public virtual ObjectResult<CourseGroupStudy> sp_GetCourseGroupStudyById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseGroupStudy>("sp_GetCourseGroupStudyById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<spGetTaskTickets_Result> spGetTaskTickets(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTaskTickets_Result>("spGetTaskTickets", listParameter);
        }
    
        [DbFunction("Entities", "Split_String")]
        public virtual IQueryable<Nullable<int>> Split_String(string inStr)
        {
            var inStrParameter = inStr != null ?
                new ObjectParameter("InStr", inStr) :
                new ObjectParameter("InStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[Entities].[Split_String](@InStr)", inStrParameter);
        }
    }
}
